
Module_001_SuperMaketCheckOut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005574  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005944  08005944  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800594c  0800594c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000389c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00003004  200038ac  200038ac  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f3f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288c  00000000  00000000  00030f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00033810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed8  00000000  00000000  00034810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b19  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104a1  00000000  00000000  00057201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0fc7  00000000  00000000  000676a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138669  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004248  00000000  00000000  001386bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056ec 	.word	0x080056ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080056ec 	.word	0x080056ec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20002ea0 	.word	0x20002ea0
 8000504:	20002f48 	.word	0x20002f48

08000508 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetTimerTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetTimerTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000526:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	20003148 	.word	0x20003148
 8000538:	200031f0 	.word	0x200031f0

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b0e8      	sub	sp, #416	; 0x1a0
 8000540:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of cartSem */
  osSemaphoreStaticDef(cartSem, &cartSemControlBlock);
 8000542:	2300      	movs	r3, #0
 8000544:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8000548:	4bcf      	ldr	r3, [pc, #828]	; (8000888 <MX_FREERTOS_Init+0x34c>)
 800054a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  cartSemHandle = osSemaphoreCreate(osSemaphore(cartSem), 20);
 800054e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000552:	2114      	movs	r1, #20
 8000554:	4618      	mov	r0, r3
 8000556:	f001 ff69 	bl	800242c <osSemaphoreCreate>
 800055a:	4603      	mov	r3, r0
 800055c:	4acb      	ldr	r2, [pc, #812]	; (800088c <MX_FREERTOS_Init+0x350>)
 800055e:	6013      	str	r3, [r2, #0]

  /* definition and creation of handheldScanner */
  osSemaphoreStaticDef(handheldScanner, &handheldScannerControlBlock);
 8000560:	2300      	movs	r3, #0
 8000562:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8000566:	4bca      	ldr	r3, [pc, #808]	; (8000890 <MX_FREERTOS_Init+0x354>)
 8000568:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  handheldScannerHandle = osSemaphoreCreate(osSemaphore(handheldScanner), 10);
 800056c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000570:	210a      	movs	r1, #10
 8000572:	4618      	mov	r0, r3
 8000574:	f001 ff5a 	bl	800242c <osSemaphoreCreate>
 8000578:	4603      	mov	r3, r0
 800057a:	4ac6      	ldr	r2, [pc, #792]	; (8000894 <MX_FREERTOS_Init+0x358>)
 800057c:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of entryTmr */
  osTimerStaticDef(entryTmr, entryTmrCb, &entryTmrControlBlock);
 800057e:	4ac6      	ldr	r2, [pc, #792]	; (8000898 <MX_FREERTOS_Init+0x35c>)
 8000580:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000588:	e883 0003 	stmia.w	r3, {r0, r1}
  entryTmrHandle = osTimerCreate(osTimer(entryTmr), osTimerPeriodic, NULL);
 800058c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000590:	2200      	movs	r2, #0
 8000592:	2101      	movs	r1, #1
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fe1d 	bl	80021d4 <osTimerCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4abf      	ldr	r2, [pc, #764]	; (800089c <MX_FREERTOS_Init+0x360>)
 800059e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ShoppingChecktmr */
  osTimerStaticDef(ShoppingChecktmr, ShoppingChecktmrCb, &myTimer02ControlBlock);
 80005a0:	4abf      	ldr	r2, [pc, #764]	; (80008a0 <MX_FREERTOS_Init+0x364>)
 80005a2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80005a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005aa:	e883 0003 	stmia.w	r3, {r0, r1}
  ShoppingChecktmrHandle = osTimerCreate(osTimer(ShoppingChecktmr), osTimerPeriodic, NULL);
 80005ae:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80005b2:	2200      	movs	r2, #0
 80005b4:	2101      	movs	r1, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fe0c 	bl	80021d4 <osTimerCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4ab9      	ldr	r2, [pc, #740]	; (80008a4 <MX_FREERTOS_Init+0x368>)
 80005c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of CashierTmr01 */
  osTimerStaticDef(CashierTmr01, CashierTmr01Cb, &CashierTmr01ControlBlock);
 80005c2:	4ab9      	ldr	r2, [pc, #740]	; (80008a8 <MX_FREERTOS_Init+0x36c>)
 80005c4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80005c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005cc:	e883 0003 	stmia.w	r3, {r0, r1}
  CashierTmr01Handle = osTimerCreate(osTimer(CashierTmr01), osTimerPeriodic, NULL);
 80005d0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fdfb 	bl	80021d4 <osTimerCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4ab2      	ldr	r2, [pc, #712]	; (80008ac <MX_FREERTOS_Init+0x370>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of CashierTmr02 */
  osTimerStaticDef(CashierTmr02, CashierTmr02Cb, &CashierTmr02ControlBlock);
 80005e4:	4ab2      	ldr	r2, [pc, #712]	; (80008b0 <MX_FREERTOS_Init+0x374>)
 80005e6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80005ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ee:	e883 0003 	stmia.w	r3, {r0, r1}
  CashierTmr02Handle = osTimerCreate(osTimer(CashierTmr02), osTimerPeriodic, NULL);
 80005f2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80005f6:	2200      	movs	r2, #0
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fdea 	bl	80021d4 <osTimerCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4aac      	ldr	r2, [pc, #688]	; (80008b4 <MX_FREERTOS_Init+0x378>)
 8000604:	6013      	str	r3, [r2, #0]

  /* definition and creation of CashierTmr03 */
  osTimerStaticDef(CashierTmr03, CashierTmr03CashierTmr02, &CashierTmr03ControlBlock);
 8000606:	4aac      	ldr	r2, [pc, #688]	; (80008b8 <MX_FREERTOS_Init+0x37c>)
 8000608:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	e883 0003 	stmia.w	r3, {r0, r1}
  CashierTmr03Handle = osTimerCreate(osTimer(CashierTmr03), osTimerPeriodic, NULL);
 8000614:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000618:	2200      	movs	r2, #0
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fdd9 	bl	80021d4 <osTimerCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4aa5      	ldr	r2, [pc, #660]	; (80008bc <MX_FREERTOS_Init+0x380>)
 8000626:	6013      	str	r3, [r2, #0]

  /* definition and creation of scannerTmr01 */
  osTimerStaticDef(scannerTmr01, ScannerTmr01CB, &scannerTmr01ControlBlock);
 8000628:	4aa5      	ldr	r2, [pc, #660]	; (80008c0 <MX_FREERTOS_Init+0x384>)
 800062a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800062e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000632:	e883 0003 	stmia.w	r3, {r0, r1}
  scannerTmr01Handle = osTimerCreate(osTimer(scannerTmr01), osTimerPeriodic, NULL);
 8000636:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800063a:	2200      	movs	r2, #0
 800063c:	2101      	movs	r1, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fdc8 	bl	80021d4 <osTimerCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a9f      	ldr	r2, [pc, #636]	; (80008c4 <MX_FREERTOS_Init+0x388>)
 8000648:	6013      	str	r3, [r2, #0]

  /* definition and creation of scannerTmr02 */
  osTimerStaticDef(scannerTmr02, ScannerTmr02CB, &scannerTmr02ControlBlock);
 800064a:	4a9f      	ldr	r2, [pc, #636]	; (80008c8 <MX_FREERTOS_Init+0x38c>)
 800064c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000654:	e883 0003 	stmia.w	r3, {r0, r1}
  scannerTmr02Handle = osTimerCreate(osTimer(scannerTmr02), osTimerPeriodic, NULL);
 8000658:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fdb7 	bl	80021d4 <osTimerCreate>
 8000666:	4603      	mov	r3, r0
 8000668:	4a98      	ldr	r2, [pc, #608]	; (80008cc <MX_FREERTOS_Init+0x390>)
 800066a:	6013      	str	r3, [r2, #0]

  /* definition and creation of returnCardTmr */
  osTimerStaticDef(returnCardTmr, ReturnCardTmrCb, &returnCardTmrControlBlock);
 800066c:	4a98      	ldr	r2, [pc, #608]	; (80008d0 <MX_FREERTOS_Init+0x394>)
 800066e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000672:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000676:	e883 0003 	stmia.w	r3, {r0, r1}
  returnCardTmrHandle = osTimerCreate(osTimer(returnCardTmr), osTimerPeriodic, NULL);
 800067a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800067e:	2200      	movs	r2, #0
 8000680:	2101      	movs	r1, #1
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fda6 	bl	80021d4 <osTimerCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a92      	ldr	r2, [pc, #584]	; (80008d4 <MX_FREERTOS_Init+0x398>)
 800068c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of cashierQueue01 */
  osMessageQStaticDef(cashierQueue01, 64, uint32_t, cashierQueue01Buffer, &cashierQueue01ControlBlock);
 800068e:	4b92      	ldr	r3, [pc, #584]	; (80008d8 <MX_FREERTOS_Init+0x39c>)
 8000690:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8000694:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000696:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cashierQueue01Handle = osMessageCreate(osMessageQ(cashierQueue01), NULL);
 800069a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 ff67 	bl	8002574 <osMessageCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a8c      	ldr	r2, [pc, #560]	; (80008dc <MX_FREERTOS_Init+0x3a0>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of cashierQueue02 */
  osMessageQStaticDef(cashierQueue02, 64, uint32_t, cashierQueue02Buffer, &cashierQueue02ControlBlock);
 80006ac:	4b8c      	ldr	r3, [pc, #560]	; (80008e0 <MX_FREERTOS_Init+0x3a4>)
 80006ae:	f507 7498 	add.w	r4, r7, #304	; 0x130
 80006b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cashierQueue02Handle = osMessageCreate(osMessageQ(cashierQueue02), NULL);
 80006b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 ff58 	bl	8002574 <osMessageCreate>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a87      	ldr	r2, [pc, #540]	; (80008e4 <MX_FREERTOS_Init+0x3a8>)
 80006c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of cashierQueue03 */
  osMessageQStaticDef(cashierQueue03, 64, uint32_t, cashierQueue03Buffer, &cashierQueue03ControlBlock);
 80006ca:	4b87      	ldr	r3, [pc, #540]	; (80008e8 <MX_FREERTOS_Init+0x3ac>)
 80006cc:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80006d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cashierQueue03Handle = osMessageCreate(osMessageQ(cashierQueue03), NULL);
 80006d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 ff49 	bl	8002574 <osMessageCreate>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a81      	ldr	r2, [pc, #516]	; (80008ec <MX_FREERTOS_Init+0x3b0>)
 80006e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of scannerTerm01 */
  osMessageQStaticDef(scannerTerm01, 64, uint32_t, scannerTerm01Buffer, &scannerTerm01ControlBlock);
 80006e8:	4b81      	ldr	r3, [pc, #516]	; (80008f0 <MX_FREERTOS_Init+0x3b4>)
 80006ea:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80006ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  scannerTerm01Handle = osMessageCreate(osMessageQ(scannerTerm01), NULL);
 80006f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 ff3a 	bl	8002574 <osMessageCreate>
 8000700:	4603      	mov	r3, r0
 8000702:	4a7c      	ldr	r2, [pc, #496]	; (80008f4 <MX_FREERTOS_Init+0x3b8>)
 8000704:	6013      	str	r3, [r2, #0]

  /* definition and creation of scannerTerm02 */
  osMessageQStaticDef(scannerTerm02, 64, uint32_t, scannerTerm02Buffer, &scannerTerm02ControlBlock);
 8000706:	4b7c      	ldr	r3, [pc, #496]	; (80008f8 <MX_FREERTOS_Init+0x3bc>)
 8000708:	f507 7480 	add.w	r4, r7, #256	; 0x100
 800070c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  scannerTerm02Handle = osMessageCreate(osMessageQ(scannerTerm02), NULL);
 8000712:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f001 ff2b 	bl	8002574 <osMessageCreate>
 800071e:	4603      	mov	r3, r0
 8000720:	4a76      	ldr	r2, [pc, #472]	; (80008fc <MX_FREERTOS_Init+0x3c0>)
 8000722:	6013      	str	r3, [r2, #0]

  /* definition and creation of shoppingQueue */
  osMessageQStaticDef(shoppingQueue, 64, uint32_t, shoppingQueueBuffer, &shoppingQueueControlBlock);
 8000724:	4b76      	ldr	r3, [pc, #472]	; (8000900 <MX_FREERTOS_Init+0x3c4>)
 8000726:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 800072a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800072c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  shoppingQueueHandle = osMessageCreate(osMessageQ(shoppingQueue), NULL);
 8000730:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f001 ff1c 	bl	8002574 <osMessageCreate>
 800073c:	4603      	mov	r3, r0
 800073e:	4a71      	ldr	r2, [pc, #452]	; (8000904 <MX_FREERTOS_Init+0x3c8>)
 8000740:	6013      	str	r3, [r2, #0]

  /* definition and creation of returCashier */
  osMessageQStaticDef(returCashier, 64, uint32_t, returCashierBuffer, &returCashierControlBlock);
 8000742:	4b71      	ldr	r3, [pc, #452]	; (8000908 <MX_FREERTOS_Init+0x3cc>)
 8000744:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8000748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800074a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  returCashierHandle = osMessageCreate(osMessageQ(returCashier), NULL);
 800074e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f001 ff0d 	bl	8002574 <osMessageCreate>
 800075a:	4603      	mov	r3, r0
 800075c:	4a6b      	ldr	r2, [pc, #428]	; (800090c <MX_FREERTOS_Init+0x3d0>)
 800075e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, DefaultTaskRun, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000760:	4b6b      	ldr	r3, [pc, #428]	; (8000910 <MX_FREERTOS_Init+0x3d4>)
 8000762:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000766:	461d      	mov	r5, r3
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000774:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fcf1 	bl	8002162 <osThreadCreate>
 8000780:	4603      	mov	r3, r0
 8000782:	4a64      	ldr	r2, [pc, #400]	; (8000914 <MX_FREERTOS_Init+0x3d8>)
 8000784:	6013      	str	r3, [r2, #0]

  /* definition and creation of scannerCheckOut */
  osThreadStaticDef(scannerCheckOut, ScannerCheckOutRun, osPriorityIdle, 0, 256, scannerCheckOutBuffer, &scannerCheckOutControlBlock);
 8000786:	4b64      	ldr	r3, [pc, #400]	; (8000918 <MX_FREERTOS_Init+0x3dc>)
 8000788:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800078c:	461d      	mov	r5, r3
 800078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000792:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  scannerCheckOutHandle = osThreadCreate(osThread(scannerCheckOut), NULL);
 800079a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fcde 	bl	8002162 <osThreadCreate>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a5c      	ldr	r2, [pc, #368]	; (800091c <MX_FREERTOS_Init+0x3e0>)
 80007aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of scannerCheckOut1 */
  osThreadStaticDef(scannerCheckOut1, ScannerCheckOut1Run, osPriorityIdle, 0, 256, scannerCheckOut1Buffer, &scannerCheckOut1ControlBlock);
 80007ac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80007b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80007b4:	4a5a      	ldr	r2, [pc, #360]	; (8000920 <MX_FREERTOS_Init+0x3e4>)
 80007b6:	461c      	mov	r4, r3
 80007b8:	4615      	mov	r5, r2
 80007ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  scannerCheckOut1Handle = osThreadCreate(osThread(scannerCheckOut1), NULL);
 80007c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fcc8 	bl	8002162 <osThreadCreate>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a53      	ldr	r2, [pc, #332]	; (8000924 <MX_FREERTOS_Init+0x3e8>)
 80007d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of shoppingtask */
  osThreadStaticDef(shoppingtask, ShoppingTaskRun, osPriorityIdle, 0, 256, shoppingtaskBuffer, &shoppingtaskControlBlock);
 80007d8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80007dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80007e0:	4a51      	ldr	r2, [pc, #324]	; (8000928 <MX_FREERTOS_Init+0x3ec>)
 80007e2:	461c      	mov	r4, r3
 80007e4:	4615      	mov	r5, r2
 80007e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  shoppingtaskHandle = osThreadCreate(osThread(shoppingtask), NULL);
 80007f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fcb2 	bl	8002162 <osThreadCreate>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a4a      	ldr	r2, [pc, #296]	; (800092c <MX_FREERTOS_Init+0x3f0>)
 8000802:	6013      	str	r3, [r2, #0]

  /* definition and creation of returnCard */
  osThreadStaticDef(returnCard, ReturnCardRun, osPriorityIdle, 0, 256, returnCardBuffer, &returnCardControlBlock);
 8000804:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000808:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800080c:	4a48      	ldr	r2, [pc, #288]	; (8000930 <MX_FREERTOS_Init+0x3f4>)
 800080e:	461c      	mov	r4, r3
 8000810:	4615      	mov	r5, r2
 8000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000816:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800081a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  returnCardHandle = osThreadCreate(osThread(returnCard), NULL);
 800081e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fc9c 	bl	8002162 <osThreadCreate>
 800082a:	4603      	mov	r3, r0
 800082c:	4a41      	ldr	r2, [pc, #260]	; (8000934 <MX_FREERTOS_Init+0x3f8>)
 800082e:	6013      	str	r3, [r2, #0]

  /* definition and creation of cashierTask01 */
  osThreadStaticDef(cashierTask01, CashierTask01Run, osPriorityIdle, 0, 256, cashierTask01Buffer, &cashierTask01ControlBlock);
 8000830:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000834:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000838:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <MX_FREERTOS_Init+0x3fc>)
 800083a:	461c      	mov	r4, r3
 800083c:	4615      	mov	r5, r2
 800083e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000842:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cashierTask01Handle = osThreadCreate(osThread(cashierTask01), NULL);
 800084a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fc86 	bl	8002162 <osThreadCreate>
 8000856:	4603      	mov	r3, r0
 8000858:	4a38      	ldr	r2, [pc, #224]	; (800093c <MX_FREERTOS_Init+0x400>)
 800085a:	6013      	str	r3, [r2, #0]

  /* definition and creation of cashierTask02 */
  osThreadStaticDef(cashierTask02, CashierTask02Run, osPriorityIdle, 0, 256, cashierTask02Buffer, &cashierTask02ControlBlock);
 800085c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000860:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000864:	4a36      	ldr	r2, [pc, #216]	; (8000940 <MX_FREERTOS_Init+0x404>)
 8000866:	461c      	mov	r4, r3
 8000868:	4615      	mov	r5, r2
 800086a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cashierTask02Handle = osThreadCreate(osThread(cashierTask02), NULL);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fc70 	bl	8002162 <osThreadCreate>
 8000882:	4603      	mov	r3, r0
 8000884:	e05e      	b.n	8000944 <MX_FREERTOS_Init+0x408>
 8000886:	bf00      	nop
 8000888:	20002e0c 	.word	0x20002e0c
 800088c:	20002e08 	.word	0x20002e08
 8000890:	20002e58 	.word	0x20002e58
 8000894:	20002e54 	.word	0x20002e54
 8000898:	08005780 	.word	0x08005780
 800089c:	20002ca8 	.word	0x20002ca8
 80008a0:	08005788 	.word	0x08005788
 80008a4:	20002cd4 	.word	0x20002cd4
 80008a8:	08005790 	.word	0x08005790
 80008ac:	20002d00 	.word	0x20002d00
 80008b0:	08005798 	.word	0x08005798
 80008b4:	20002d2c 	.word	0x20002d2c
 80008b8:	080057a0 	.word	0x080057a0
 80008bc:	20002d58 	.word	0x20002d58
 80008c0:	080057a8 	.word	0x080057a8
 80008c4:	20002d84 	.word	0x20002d84
 80008c8:	080057b0 	.word	0x080057b0
 80008cc:	20002db0 	.word	0x20002db0
 80008d0:	080057b8 	.word	0x080057b8
 80008d4:	20002ddc 	.word	0x20002ddc
 80008d8:	080057c0 	.word	0x080057c0
 80008dc:	20002394 	.word	0x20002394
 80008e0:	080057d0 	.word	0x080057d0
 80008e4:	200024e0 	.word	0x200024e0
 80008e8:	080057e0 	.word	0x080057e0
 80008ec:	2000262c 	.word	0x2000262c
 80008f0:	080057f0 	.word	0x080057f0
 80008f4:	20002778 	.word	0x20002778
 80008f8:	08005800 	.word	0x08005800
 80008fc:	200028c4 	.word	0x200028c4
 8000900:	08005810 	.word	0x08005810
 8000904:	20002a10 	.word	0x20002a10
 8000908:	08005820 	.word	0x08005820
 800090c:	20002b5c 	.word	0x20002b5c
 8000910:	08005830 	.word	0x08005830
 8000914:	20000034 	.word	0x20000034
 8000918:	0800584c 	.word	0x0800584c
 800091c:	200002e0 	.word	0x200002e0
 8000920:	08005868 	.word	0x08005868
 8000924:	2000078c 	.word	0x2000078c
 8000928:	08005884 	.word	0x08005884
 800092c:	20000c38 	.word	0x20000c38
 8000930:	080058a0 	.word	0x080058a0
 8000934:	200010e4 	.word	0x200010e4
 8000938:	080058bc 	.word	0x080058bc
 800093c:	20001590 	.word	0x20001590
 8000940:	080058d8 	.word	0x080058d8
 8000944:	4a0d      	ldr	r2, [pc, #52]	; (800097c <MX_FREERTOS_Init+0x440>)
 8000946:	6013      	str	r3, [r2, #0]

  /* definition and creation of cashierTask03 */
  osThreadStaticDef(cashierTask03, CashierTask03Run, osPriorityIdle, 0, 256, cashierTask03Buffer, &cashierTask03ControlBlock);
 8000948:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800094c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <MX_FREERTOS_Init+0x444>)
 8000952:	461c      	mov	r4, r3
 8000954:	4615      	mov	r5, r2
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800095e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cashierTask03Handle = osThreadCreate(osThread(cashierTask03), NULL);
 8000962:	463b      	mov	r3, r7
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fbfb 	bl	8002162 <osThreadCreate>
 800096c:	4603      	mov	r3, r0
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <MX_FREERTOS_Init+0x448>)
 8000970:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000972:	bf00      	nop
 8000974:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8000978:	46bd      	mov	sp, r7
 800097a:	bdb0      	pop	{r4, r5, r7, pc}
 800097c:	20001a3c 	.word	0x20001a3c
 8000980:	080058f4 	.word	0x080058f4
 8000984:	20001ee8 	.word	0x20001ee8

08000988 <DefaultTaskRun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTaskRun */
void DefaultTaskRun(void const * argument)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTaskRun */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f001 fc0b 	bl	80021ac <osDelay>
 8000996:	e7fb      	b.n	8000990 <DefaultTaskRun+0x8>

08000998 <ScannerCheckOutRun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ScannerCheckOutRun */
void ScannerCheckOutRun(void const * argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ScannerCheckOutRun */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f001 fc03 	bl	80021ac <osDelay>
 80009a6:	e7fb      	b.n	80009a0 <ScannerCheckOutRun+0x8>

080009a8 <ScannerCheckOut1Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ScannerCheckOut1Run */
void ScannerCheckOut1Run(void const * argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ScannerCheckOut1Run */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f001 fbfb 	bl	80021ac <osDelay>
 80009b6:	e7fb      	b.n	80009b0 <ScannerCheckOut1Run+0x8>

080009b8 <ShoppingTaskRun>:
/* USER CODE BEGIN Header_ShoppingTaskRun */


/* USER CODE END Header_ShoppingTaskRun */
void ShoppingTaskRun(void const * argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN ShoppingTaskRun */
	osEvent evt ={0};
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
	uint32_t shoppingPeriod = DEFAULT_SHOPPING_PERIOD;
 80009cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
	SetupEmtryTmr();
 80009d2:	f000 f921 	bl	8000c18 <SetupEmtryTmr>
  /* Infinite loop */
  for(;;)
  {
  /*get item from shopping queue */
	  evt = osMessageGet(shoppingQueueHandle, MAX_DELAY_TIMEOUT);
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <ShoppingTaskRun+0x58>)
 80009d8:	6819      	ldr	r1, [r3, #0]
 80009da:	f107 0318 	add.w	r3, r7, #24
 80009de:	f04f 32ff 	mov.w	r2, #4294967295
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fe1c 	bl	8002620 <osMessageGet>
	  shoppingPeriod = ShoppingCalculateNextPeriod(evt.value.v);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f922 	bl	8000c34 <ShoppingCalculateNextPeriod>
 80009f0:	6278      	str	r0, [r7, #36]	; 0x24
	  osTimerStart(ShoppingChecktmrHandle, shoppingPeriod);
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <ShoppingTaskRun+0x5c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fc0b 	bl	8002214 <osTimerStart>
	  // wait shopping finish
	  osSignalWait(SHOPPING_TIMER_EXPIRED_EVT, osWaitForever);
 80009fe:	463b      	mov	r3, r7
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	2101      	movs	r1, #1
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fcc4 	bl	8002394 <osSignalWait>
	  evt = osMessageGet(shoppingQueueHandle, MAX_DELAY_TIMEOUT);
 8000a0c:	e7e3      	b.n	80009d6 <ShoppingTaskRun+0x1e>
 8000a0e:	bf00      	nop
 8000a10:	20002a10 	.word	0x20002a10
 8000a14:	20002cd4 	.word	0x20002cd4

08000a18 <ReturnCardRun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReturnCardRun */
void ReturnCardRun(void const * argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReturnCardRun */
	osEvent evt;
	uint32_t retPeriod = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
  evt =  osMessageGet(cashierQueue01Handle, MAX_DELAY_TIMEOUT);
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <ReturnCardRun+0x38>)
 8000a26:	6819      	ldr	r1, [r3, #0]
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 fdf5 	bl	8002620 <osMessageGet>
    retPeriod = ReturncalcNextPeriod(evt.value.v);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f917 	bl	8000c6c <ReturncalcNextPeriod>
 8000a3e:	6178      	str	r0, [r7, #20]
    osTimerStart(returnCardTmrHandle, retPeriod);
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <ReturnCardRun+0x3c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6979      	ldr	r1, [r7, #20]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fbe4 	bl	8002214 <osTimerStart>
  evt =  osMessageGet(cashierQueue01Handle, MAX_DELAY_TIMEOUT);
 8000a4c:	e7ea      	b.n	8000a24 <ReturnCardRun+0xc>
 8000a4e:	bf00      	nop
 8000a50:	20002394 	.word	0x20002394
 8000a54:	20002ddc 	.word	0x20002ddc

08000a58 <CashierTask01Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CashierTask01Run */
void CashierTask01Run(void const * argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CashierTask01Run */
	osEvent evt = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
   evt = osMessageGet(cashierQueue01Handle, MAX_DELAY_TIMEOUT);
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <CashierTask01Run+0x38>)
 8000a6e:	6819      	ldr	r1, [r3, #0]
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 fdd1 	bl	8002620 <osMessageGet>
   osTimerStart(CashierTmr01Handle, SECOND_TO_TICK(CASHIER_CHECKOUT_TIME));
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <CashierTask01Run+0x3c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fbc4 	bl	8002214 <osTimerStart>
   evt = osMessageGet(cashierQueue01Handle, MAX_DELAY_TIMEOUT);
 8000a8c:	e7ee      	b.n	8000a6c <CashierTask01Run+0x14>
 8000a8e:	bf00      	nop
 8000a90:	20002394 	.word	0x20002394
 8000a94:	20002d00 	.word	0x20002d00

08000a98 <CashierTask02Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CashierTask02Run */
void CashierTask02Run(void const * argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CashierTask02Run */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f001 fb83 	bl	80021ac <osDelay>
 8000aa6:	e7fb      	b.n	8000aa0 <CashierTask02Run+0x8>

08000aa8 <CashierTask03Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CashierTask03Run */
void CashierTask03Run(void const * argument)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CashierTask03Run */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f001 fb7b 	bl	80021ac <osDelay>
 8000ab6:	e7fb      	b.n	8000ab0 <CashierTask03Run+0x8>

08000ab8 <entryTmrCb>:
  /* USER CODE END CashierTask03Run */
}

/* entryTmrCb function */
void entryTmrCb(void const * argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryTmrCb */
  /*B1.task carts*/
	uint32_t remain_token = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
	uint32_t data_frame = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
	uint8_t hasScanner = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]
	uint8_t cont = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73bb      	strb	r3, [r7, #14]
	id++;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <entryTmrCb+0x78>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <entryTmrCb+0x78>)
 8000adc:	801a      	strh	r2, [r3, #0]
	osSemaphoreId sem = *((osSemaphoreId*)argument);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	60bb      	str	r3, [r7, #8]
	remain_token = osSemaphoreWait(sem, 0);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	68b8      	ldr	r0, [r7, #8]
 8000ae8:	f001 fcc0 	bl	800246c <osSemaphoreWait>
 8000aec:	4603      	mov	r3, r0
 8000aee:	617b      	str	r3, [r7, #20]
	if (remain_token <= 0 )
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d103      	bne.n	8000afe <entryTmrCb+0x46>
	{
		emtryCart = 1;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <entryTmrCb+0x7c>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
		return;
 8000afc:	e015      	b.n	8000b2a <entryTmrCb+0x72>
	}

  /*B2.Push to queue shopping*/
	data_frame = MAKE_SHOPPING_CUSTOMER_FRAME(id,emtryCart,hasScanner);
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <entryTmrCb+0x78>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	05da      	lsls	r2, r3, #23
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <entryTmrCb+0x7c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
	osMessagePut(shoppingQueueHandle, data_frame, 0);
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <entryTmrCb+0x80>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	6939      	ldr	r1, [r7, #16]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fd3e 	bl	80025a0 <osMessagePut>
	emtryCart = 0;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <entryTmrCb+0x7c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
  /* USER CODE END entryTmrCb */
}
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000002c 	.word	0x2000002c
 8000b34:	2000002e 	.word	0x2000002e
 8000b38:	20002a10 	.word	0x20002a10

08000b3c <ShoppingChecktmrCb>:

/* ShoppingChecktmrCb function */
void ShoppingChecktmrCb(void const * argument)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ShoppingChecktmrCb */
	uint32_t timestap = ShoppingGetCurrentTime();
 8000b44:	f000 f88a 	bl	8000c5c <ShoppingGetCurrentTime>
 8000b48:	60f8      	str	r0, [r7, #12]
	osMessagePut(cashierQueue01Handle, timestap, 0);
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <ShoppingChecktmrCb+0x30>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	68f9      	ldr	r1, [r7, #12]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 fd24 	bl	80025a0 <osMessagePut>
	osTimerStop(ShoppingChecktmrHandle);
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <ShoppingChecktmrCb+0x34>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 fb9d 	bl	800229c <osTimerStop>
  /* USER CODE END ShoppingChecktmrCb */
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20002394 	.word	0x20002394
 8000b70:	20002cd4 	.word	0x20002cd4

08000b74 <CashierTmr01Cb>:

/* CashierTmr01Cb function */
void CashierTmr01Cb(void const * argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CashierTmr01Cb */
	uint32_t timestap = ShoppingGetCurrentTime();
 8000b7c:	f000 f86e 	bl	8000c5c <ShoppingGetCurrentTime>
 8000b80:	60f8      	str	r0, [r7, #12]
	osMessagePut(returCashierHandle, timestap, 0);
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <CashierTmr01Cb+0x30>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2200      	movs	r2, #0
 8000b88:	68f9      	ldr	r1, [r7, #12]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 fd08 	bl	80025a0 <osMessagePut>
	osSignalSet(shoppingtaskHandle, SHOPPING_TIMER_EXPIRED_EVT);
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <CashierTmr01Cb+0x34>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2101      	movs	r1, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fbbc 	bl	8002314 <osSignalSet>
  /* USER CODE END CashierTmr01Cb */
}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20002b5c 	.word	0x20002b5c
 8000ba8:	20000c38 	.word	0x20000c38

08000bac <CashierTmr02Cb>:

/* CashierTmr02Cb function */
void CashierTmr02Cb(void const * argument)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CashierTmr02Cb */

  /* USER CODE END CashierTmr02Cb */
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <CashierTmr03CashierTmr02>:

/* CashierTmr03CashierTmr02 function */
void CashierTmr03CashierTmr02(void const * argument)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CashierTmr03CashierTmr02 */

  /* USER CODE END CashierTmr03CashierTmr02 */
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <ScannerTmr01CB>:

/* ScannerTmr01CB function */
void ScannerTmr01CB(void const * argument)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ScannerTmr01CB */

  /* USER CODE END ScannerTmr01CB */
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <ScannerTmr02CB>:

/* ScannerTmr02CB function */
void ScannerTmr02CB(void const * argument)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ScannerTmr02CB */

  /* USER CODE END ScannerTmr02CB */
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <ReturnCardTmrCb>:

/* ReturnCardTmrCb function */
void ReturnCardTmrCb(void const * argument)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	osSemaphoreId semf = *((osSemaphoreId*)argument);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN ReturnCardTmrCb */
	osSemaphoreRelease(semf);
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f001 fc7c 	bl	8002508 <osSemaphoreRelease>
  /* USER CODE END ReturnCardTmrCb */
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <SetupEmtryTmr>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void SetupEmtryTmr(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	osTimerStart(entryTmrHandle, SECOND_TO_TICK(ENTRY_PERIOD));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SetupEmtryTmr+0x18>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 faf5 	bl	8002214 <osTimerStart>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20002ca8 	.word	0x20002ca8

08000c34 <ShoppingCalculateNextPeriod>:
static uint32_t ShoppingCalculateNextPeriod (uint32_t frame)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	return (frame & 0x2)?DEFAULT_SHOPPING_PERIOD:DEFAULT_CONT_SHOPPING_PERIOD;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <ShoppingCalculateNextPeriod+0x18>
 8000c46:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c4a:	e001      	b.n	8000c50 <ShoppingCalculateNextPeriod+0x1c>
 8000c4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <ShoppingGetCurrentTime>:
static uint32_t ShoppingGetCurrentTime(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	// get tick
	return xTaskGetTickCount();
 8000c60:	f002 ffe2 	bl	8003c28 <xTaskGetTickCount>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <ReturncalcNextPeriod>:
static uint32_t ReturncalcNextPeriod(uint32_t currenttime)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	uint32_t period = currenttime - lastcurrenttime;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <ReturncalcNextPeriod+0x30>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	60fb      	str	r3, [r7, #12]
	if (period >=SECOND_TO_TICK(RETURN_CART_TIME) ){
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c84:	d302      	bcc.n	8000c8c <ReturncalcNextPeriod+0x20>
		return SECOND_TO_TICK(RETURN_CART_TIME);
 8000c86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c8a:	e000      	b.n	8000c8e <ReturncalcNextPeriod+0x22>
	}

	return period;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000030 	.word	0x20000030

08000ca0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_GPIO_Init+0x30>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <MX_GPIO_Init+0x30>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_GPIO_Init+0x30>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 f98a 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f808 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f7ff ffde 	bl	8000ca0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ce4:	f7ff fc2a 	bl	800053c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ce8:	f001 fa34 	bl	8002154 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <main+0x18>
	...

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b094      	sub	sp, #80	; 0x50
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	2230      	movs	r2, #48	; 0x30
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f004 fcec 	bl	80056dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <SystemClock_Config+0xc8>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <SystemClock_Config+0xc8>)
 8000d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <SystemClock_Config+0xc8>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <SystemClock_Config+0xcc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <SystemClock_Config+0xcc>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <SystemClock_Config+0xcc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d60:	2304      	movs	r3, #4
 8000d62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d64:	2348      	movs	r3, #72	; 0x48
 8000d66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f107 0320 	add.w	r3, r7, #32
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fa5f 	bl	8001238 <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d80:	f000 f82d 	bl	8000dde <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d84:	230f      	movs	r3, #15
 8000d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2102      	movs	r1, #2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 fcc1 	bl	8001728 <HAL_RCC_ClockConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dac:	f000 f817 	bl	8000dde <Error_Handler>
  }
}
 8000db0:	bf00      	nop
 8000db2:	3750      	adds	r7, #80	; 0x50
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd0:	d101      	bne.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dd2:	f000 f92f 	bl	8001034 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de2:	b672      	cpsid	i
}
 8000de4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <Error_Handler+0x8>

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_MspInit+0x54>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <HAL_MspInit+0x54>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_MspInit+0x54>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_MspInit+0x54>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_MspInit+0x54>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_MspInit+0x54>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	210f      	movs	r1, #15
 8000e2a:	f06f 0001 	mvn.w	r0, #1
 8000e2e:	f000 f9d9 	bl	80011e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <HAL_InitTick+0xe8>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	4a33      	ldr	r2, [pc, #204]	; (8000f28 <HAL_InitTick+0xe8>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <HAL_InitTick+0xe8>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6c:	f107 0210 	add.w	r2, r7, #16
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fe62 	bl	8001b40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e7c:	6a3b      	ldr	r3, [r7, #32]
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d103      	bne.n	8000e8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e86:	f000 fe47 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8000e8a:	6378      	str	r0, [r7, #52]	; 0x34
 8000e8c:	e004      	b.n	8000e98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e8e:	f000 fe43 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8000e92:	4603      	mov	r3, r0
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9a:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <HAL_InitTick+0xec>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0c9b      	lsrs	r3, r3, #18
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <HAL_InitTick+0xf0>)
 8000ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <HAL_InitTick+0xf0>)
 8000eb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000eb6:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <HAL_InitTick+0xf0>)
 8000eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eba:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <HAL_InitTick+0xf0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_InitTick+0xf0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_InitTick+0xf0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000ece:	4818      	ldr	r0, [pc, #96]	; (8000f30 <HAL_InitTick+0xf0>)
 8000ed0:	f000 fe68 	bl	8001ba4 <HAL_TIM_Base_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000eda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d11b      	bne.n	8000f1a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000ee2:	4813      	ldr	r0, [pc, #76]	; (8000f30 <HAL_InitTick+0xf0>)
 8000ee4:	f000 feb8 	bl	8001c58 <HAL_TIM_Base_Start_IT>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d111      	bne.n	8000f1a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef6:	201c      	movs	r0, #28
 8000ef8:	f000 f990 	bl	800121c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	d808      	bhi.n	8000f14 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000f02:	2200      	movs	r2, #0
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	201c      	movs	r0, #28
 8000f08:	f000 f96c 	bl	80011e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0c:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <HAL_InitTick+0xf4>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e002      	b.n	8000f1a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3738      	adds	r7, #56	; 0x38
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	431bde83 	.word	0x431bde83
 8000f30:	200035f0 	.word	0x200035f0
 8000f34:	20000004 	.word	0x20000004

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM2_IRQHandler+0x10>)
 8000f6a:	f000 fee5 	bl	8001d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200035f0 	.word	0x200035f0

08000f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <SystemInit+0x20>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <SystemInit+0x20>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fa2:	490e      	ldr	r1, [pc, #56]	; (8000fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb8:	4c0b      	ldr	r4, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc6:	f7ff ffd7 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f004 fb55 	bl	8005678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff fe81 	bl	8000cd4 <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fe0:	08005954 	.word	0x08005954
  ldr r2, =_sbss
 8000fe4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fe8:	200038ac 	.word	0x200038ac

08000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_Init+0x40>)
 8000ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_Init+0x40>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_Init+0x40>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f8d8 	bl	80011ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	200f      	movs	r0, #15
 8001020:	f7ff ff0e 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fee0 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023c00 	.word	0x40023c00

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	20003638 	.word	0x20003638

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20003638 	.word	0x20003638

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff4c 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f6:	f7ff ff61 	bl	80010bc <__NVIC_GetPriorityGrouping>
 80011fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	6978      	ldr	r0, [r7, #20]
 8001202:	f7ff ffb1 	bl	8001168 <NVIC_EncodePriority>
 8001206:	4602      	mov	r2, r0
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff80 	bl	8001114 <__NVIC_SetPriority>
}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff54 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e267      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001256:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b04      	cmp	r3, #4
 8001260:	d00c      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4b85      	ldr	r3, [pc, #532]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <HAL_RCC_OscConfig+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d157      	bne.n	8001340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e242      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x74>
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a75      	ldr	r2, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x98>
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6f      	ldr	r2, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012d0:	4b69      	ldr	r3, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a68      	ldr	r2, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b66      	ldr	r3, [pc, #408]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a65      	ldr	r2, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff feb4 	bl	800105c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff feb0 	bl	800105c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e207      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xc0>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fea0 	bl	800105c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fe9c 	bl	800105c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1f3      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0xe8>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134e:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b44      	ldr	r3, [pc, #272]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1c7      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4937      	ldr	r1, [pc, #220]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_RCC_OscConfig+0x244>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fe55 	bl	800105c <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fe51 	bl	800105c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a8      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4925      	ldr	r1, [pc, #148]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_RCC_OscConfig+0x244>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fe34 	bl	800105c <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fe30 	bl	800105c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e187      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d036      	beq.n	8001490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_RCC_OscConfig+0x248>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fe14 	bl	800105c <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fe10 	bl	800105c <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e167      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800144c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
 8001456:	e01b      	b.n	8001490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_OscConfig+0x248>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fdfd 	bl	800105c <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e00e      	b.n	8001484 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fdf9 	bl	800105c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d907      	bls.n	8001484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e150      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	42470000 	.word	0x42470000
 8001480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ea      	bne.n	8001466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8097 	beq.w	80015cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a7c      	ldr	r2, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b7a      	ldr	r3, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b77      	ldr	r3, [pc, #476]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b74      	ldr	r3, [pc, #464]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a73      	ldr	r2, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fdb9 	bl	800105c <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff fdb5 	bl	800105c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e10c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x2ea>
 8001514:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x30c>
 800152a:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a5e      	ldr	r2, [pc, #376]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001544:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a54      	ldr	r2, [pc, #336]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d015      	beq.n	8001590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fd7a 	bl	800105c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff fd76 	bl	800105c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0cb      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0ee      	beq.n	800156c <HAL_RCC_OscConfig+0x334>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fd64 	bl	800105c <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fd60 	bl	800105c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0b5      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ee      	bne.n	8001598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a38      	ldr	r2, [pc, #224]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a1 	beq.w	8001718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d05c      	beq.n	800169c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d141      	bne.n	800166e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fd34 	bl	800105c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fd30 	bl	800105c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e087      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	491b      	ldr	r1, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fd09 	bl	800105c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fd05 	bl	800105c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e05c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x416>
 800166c:	e054      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fcf2 	bl	800105c <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fcee 	bl	800105c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e045      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x444>
 800169a:	e03d      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e038      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x4ec>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d028      	beq.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d121      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d11a      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d111      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	3b01      	subs	r3, #1
 80016fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fc20 	bl	800105c <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fc1c 	bl	800105c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fab6 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	0800592c 	.word	0x0800592c
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b094      	sub	sp, #80	; 0x50
 80018fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001904:	2300      	movs	r3, #0
 8001906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190c:	4b79      	ldr	r3, [pc, #484]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d00d      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x40>
 8001918:	2b08      	cmp	r3, #8
 800191a:	f200 80e1 	bhi.w	8001ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x34>
 8001922:	2b04      	cmp	r3, #4
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x3a>
 8001926:	e0db      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800192c:	e0db      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_GetSysClockFreq+0x208>)
 8001930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001932:	e0d8      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001934:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193e:	4b6d      	ldr	r3, [pc, #436]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	2200      	movs	r2, #0
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
 8001954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
 8001962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001966:	4622      	mov	r2, r4
 8001968:	462b      	mov	r3, r5
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	0159      	lsls	r1, r3, #5
 8001974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001978:	0150      	lsls	r0, r2, #5
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4621      	mov	r1, r4
 8001980:	1a51      	subs	r1, r2, r1
 8001982:	6139      	str	r1, [r7, #16]
 8001984:	4629      	mov	r1, r5
 8001986:	eb63 0301 	sbc.w	r3, r3, r1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001998:	4659      	mov	r1, fp
 800199a:	018b      	lsls	r3, r1, #6
 800199c:	4651      	mov	r1, sl
 800199e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a2:	4651      	mov	r1, sl
 80019a4:	018a      	lsls	r2, r1, #6
 80019a6:	4651      	mov	r1, sl
 80019a8:	ebb2 0801 	subs.w	r8, r2, r1
 80019ac:	4659      	mov	r1, fp
 80019ae:	eb63 0901 	sbc.w	r9, r3, r1
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c6:	4690      	mov	r8, r2
 80019c8:	4699      	mov	r9, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	eb18 0303 	adds.w	r3, r8, r3
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	462b      	mov	r3, r5
 80019d4:	eb49 0303 	adc.w	r3, r9, r3
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019e6:	4629      	mov	r1, r5
 80019e8:	024b      	lsls	r3, r1, #9
 80019ea:	4621      	mov	r1, r4
 80019ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f0:	4621      	mov	r1, r4
 80019f2:	024a      	lsls	r2, r1, #9
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fa:	2200      	movs	r2, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a04:	f7fe fbe4 	bl	80001d0 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a10:	e058      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	099b      	lsrs	r3, r3, #6
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a2c:	4642      	mov	r2, r8
 8001a2e:	464b      	mov	r3, r9
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	0159      	lsls	r1, r3, #5
 8001a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a3e:	0150      	lsls	r0, r2, #5
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4641      	mov	r1, r8
 8001a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a64:	ebb2 040a 	subs.w	r4, r2, sl
 8001a68:	eb63 050b 	sbc.w	r5, r3, fp
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	00eb      	lsls	r3, r5, #3
 8001a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7a:	00e2      	lsls	r2, r4, #3
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	4643      	mov	r3, r8
 8001a82:	18e3      	adds	r3, r4, r3
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	464b      	mov	r3, r9
 8001a88:	eb45 0303 	adc.w	r3, r5, r3
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	028b      	lsls	r3, r1, #10
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	028a      	lsls	r2, r1, #10
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	61fa      	str	r2, [r7, #28]
 8001ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab8:	f7fe fb8a 	bl	80001d0 <__aeabi_uldivmod>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3750      	adds	r7, #80	; 0x50
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	007a1200 	.word	0x007a1200

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000000 	.word	0x20000000

08001b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0a9b      	lsrs	r3, r3, #10
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4903      	ldr	r1, [pc, #12]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	0800593c 	.word	0x0800593c

08001b40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_RCC_GetClockConfig+0x60>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0207 	and.w	r2, r3, #7
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e041      	b.n	8001c3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f839 	bl	8001c42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3304      	adds	r3, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f000 f9d8 	bl	8001f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e04e      	b.n	8001d0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_TIM_Base_Start_IT+0xc4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d022      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x80>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9a:	d01d      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x80>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d018      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x80>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x80>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00e      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d009      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x80>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d004      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x80>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d111      	bne.n	8001cfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d010      	beq.n	8001d0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfa:	e007      	b.n	8001d0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40000400 	.word	0x40000400
 8001d24:	40000800 	.word	0x40000800
 8001d28:	40000c00 	.word	0x40000c00
 8001d2c:	40010400 	.word	0x40010400
 8001d30:	40014000 	.word	0x40014000
 8001d34:	40001800 	.word	0x40001800

08001d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d122      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d11b      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0202 	mvn.w	r2, #2
 8001d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8ee 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8e0 	bl	8001f48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f8f1 	bl	8001f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d122      	bne.n	8001de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d11b      	bne.n	8001de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0204 	mvn.w	r2, #4
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8c4 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8b6 	bl	8001f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8c7 	bl	8001f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0208 	mvn.w	r2, #8
 8001e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2204      	movs	r2, #4
 8001e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f89a 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f88c 	bl	8001f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f89d 	bl	8001f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0210 	mvn.w	r2, #16
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2208      	movs	r2, #8
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f870 	bl	8001f5c <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f862 	bl	8001f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f873 	bl	8001f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0201 	mvn.w	r2, #1
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7fe ff82 	bl	8000dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec6:	2b80      	cmp	r3, #128	; 0x80
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed4:	2b80      	cmp	r3, #128	; 0x80
 8001ed6:	d107      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f902 	bl	80020ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef2:	2b40      	cmp	r3, #64	; 0x40
 8001ef4:	d10e      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f00:	2b40      	cmp	r3, #64	; 0x40
 8001f02:	d107      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f838 	bl	8001f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	d10e      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d107      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0220 	mvn.w	r2, #32
 8001f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8cc 	bl	80020d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a40      	ldr	r2, [pc, #256]	; (80020ac <TIM_Base_SetConfig+0x114>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d00f      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3d      	ldr	r2, [pc, #244]	; (80020b0 <TIM_Base_SetConfig+0x118>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00b      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3c      	ldr	r2, [pc, #240]	; (80020b4 <TIM_Base_SetConfig+0x11c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3b      	ldr	r2, [pc, #236]	; (80020b8 <TIM_Base_SetConfig+0x120>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3a      	ldr	r2, [pc, #232]	; (80020bc <TIM_Base_SetConfig+0x124>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d108      	bne.n	8001fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <TIM_Base_SetConfig+0x114>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d027      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <TIM_Base_SetConfig+0x118>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d023      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <TIM_Base_SetConfig+0x11c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <TIM_Base_SetConfig+0x120>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a29      	ldr	r2, [pc, #164]	; (80020bc <TIM_Base_SetConfig+0x124>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d017      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <TIM_Base_SetConfig+0x128>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a27      	ldr	r2, [pc, #156]	; (80020c4 <TIM_Base_SetConfig+0x12c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00f      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <TIM_Base_SetConfig+0x130>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a25      	ldr	r2, [pc, #148]	; (80020cc <TIM_Base_SetConfig+0x134>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <TIM_Base_SetConfig+0x138>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d003      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a23      	ldr	r2, [pc, #140]	; (80020d4 <TIM_Base_SetConfig+0x13c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d108      	bne.n	800205c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <TIM_Base_SetConfig+0x114>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d003      	beq.n	8002090 <TIM_Base_SetConfig+0xf8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <TIM_Base_SetConfig+0x124>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d103      	bne.n	8002098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	615a      	str	r2, [r3, #20]
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40000800 	.word	0x40000800
 80020b8:	40000c00 	.word	0x40000c00
 80020bc:	40010400 	.word	0x40010400
 80020c0:	40014000 	.word	0x40014000
 80020c4:	40014400 	.word	0x40014400
 80020c8:	40014800 	.word	0x40014800
 80020cc:	40001800 	.word	0x40001800
 80020d0:	40001c00 	.word	0x40001c00
 80020d4:	40002000 	.word	0x40002000

080020d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800210e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002112:	2b84      	cmp	r3, #132	; 0x84
 8002114:	d005      	beq.n	8002122 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002116:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4413      	add	r3, r2
 800211e:	3303      	adds	r3, #3
 8002120:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002136:	f3ef 8305 	mrs	r3, IPSR
 800213a:	607b      	str	r3, [r7, #4]
  return(result);
 800213c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002158:	f001 fc56 	bl	8003a08 <vTaskStartScheduler>
  
  return osOK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}

08002162 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002164:	b089      	sub	sp, #36	; 0x24
 8002166:	af04      	add	r7, sp, #16
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685c      	ldr	r4, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681d      	ldr	r5, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691e      	ldr	r6, [r3, #16]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ffbe 	bl	8002100 <makeFreeRtosPriority>
 8002184:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800218e:	9202      	str	r2, [sp, #8]
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	9100      	str	r1, [sp, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4632      	mov	r2, r6
 8002198:	4629      	mov	r1, r5
 800219a:	4620      	mov	r0, r4
 800219c:	f001 fab2 	bl	8003704 <xTaskCreateStatic>
 80021a0:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <osDelay+0x16>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	e000      	b.n	80021c4 <osDelay+0x18>
 80021c2:	2301      	movs	r3, #1
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 fbeb 	bl	80039a0 <vTaskDelay>
  
  return osOK;
 80021ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	460b      	mov	r3, r1
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	72fb      	strb	r3, [r7, #11]
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xTimerCreateStatic((const char *)"",
 80021e2:	7afb      	ldrb	r3, [r7, #11]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <osTimerCreate+0x18>
 80021e8:	2101      	movs	r1, #1
 80021ea:	e000      	b.n	80021ee <osTimerCreate+0x1a>
 80021ec:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);  
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	6852      	ldr	r2, [r2, #4]
  return xTimerCreateStatic((const char *)"",
 80021f6:	9201      	str	r2, [sp, #4]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	460a      	mov	r2, r1
 80021fe:	2101      	movs	r1, #1
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <osTimerCreate+0x3c>)
 8002202:	f002 fc93 	bl	8004b2c <xTimerCreateStatic>
 8002206:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	08005910 	.word	0x08005910

08002214 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <osTimerStart+0x20>
    ticks = 1;
 8002230:	2301      	movs	r3, #1
 8002232:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002234:	f7ff ff7c 	bl	8002130 <inHandlerMode>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01a      	beq.n	8002274 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	2200      	movs	r2, #0
 8002244:	9200      	str	r2, [sp, #0]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	2109      	movs	r1, #9
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f002 fce8 	bl	8004c20 <xTimerGenericCommand>
 8002250:	4603      	mov	r3, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	d002      	beq.n	800225c <osTimerStart+0x48>
    {
      result = osErrorOS;
 8002256:	23ff      	movs	r3, #255	; 0xff
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e018      	b.n	800228e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d015      	beq.n	800228e <osTimerStart+0x7a>
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <osTimerStart+0x84>)
 8002264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f3bf 8f4f 	dsb	sy
 800226e:	f3bf 8f6f 	isb	sy
 8002272:	e00c      	b.n	800228e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002274:	2300      	movs	r3, #0
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2300      	movs	r3, #0
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	2104      	movs	r1, #4
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f002 fcce 	bl	8004c20 <xTimerGenericCommand>
 8002284:	4603      	mov	r3, r0
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <osTimerStart+0x7a>
      result = osErrorOS;
 800228a:	23ff      	movs	r3, #255	; 0xff
 800228c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800228e:	697b      	ldr	r3, [r7, #20]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	e000ed04 	.word	0xe000ed04

0800229c <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80022ac:	f7ff ff40 	bl	8002130 <inHandlerMode>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	2200      	movs	r2, #0
 80022bc:	9200      	str	r2, [sp, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	2108      	movs	r1, #8
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f002 fcac 	bl	8004c20 <xTimerGenericCommand>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <osTimerStop+0x36>
      return osErrorOS;
 80022ce:	23ff      	movs	r3, #255	; 0xff
 80022d0:	e019      	b.n	8002306 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <osTimerStop+0x68>
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <osTimerStop+0x74>)
 80022da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	e00c      	b.n	8002304 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 80022ea:	2300      	movs	r3, #0
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	2200      	movs	r2, #0
 80022f2:	2103      	movs	r1, #3
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f002 fc93 	bl	8004c20 <xTimerGenericCommand>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d001      	beq.n	8002304 <osTimerStop+0x68>
      result = osErrorOS;
 8002300:	23ff      	movs	r3, #255	; 0xff
 8002302:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8002304:	68fb      	ldr	r3, [r7, #12]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000ed04 	.word	0xe000ed04

08002314 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af02      	add	r7, sp, #8
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8002326:	f7ff ff03 	bl	8002130 <inHandlerMode>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01c      	beq.n	800236a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	f107 0208 	add.w	r2, r7, #8
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	2201      	movs	r2, #1
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f002 fa61 	bl	8004808 <xTaskGenericNotifyFromISR>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d002      	beq.n	8002352 <osSignalSet+0x3e>
      return 0x80000000;
 800234c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002350:	e019      	b.n	8002386 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d015      	beq.n	8002384 <osSignalSet+0x70>
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <osSignalSet+0x7c>)
 800235a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	e00c      	b.n	8002384 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	2201      	movs	r2, #1
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f002 f98a 	bl	800468c <xTaskGenericNotify>
 8002378:	4603      	mov	r3, r0
 800237a:	2b01      	cmp	r3, #1
 800237c:	d002      	beq.n	8002384 <osSignalSet+0x70>
    return 0x80000000;
 800237e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002382:	e000      	b.n	8002386 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8002384:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000ed04 	.word	0xe000ed04

08002394 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ae:	d103      	bne.n	80023b8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e009      	b.n	80023cc <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <osSignalWait+0x38>
      ticks = 1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80023cc:	f7ff feb0 	bl	8002130 <inHandlerMode>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80023d6:	2382      	movs	r3, #130	; 0x82
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	e01b      	b.n	8002414 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	1d1a      	adds	r2, r3, #4
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2000      	movs	r0, #0
 80023e8:	f002 f8f0 	bl	80045cc <xTaskNotifyWait>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d008      	beq.n	8002404 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <osSignalWait+0x6a>
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	e00a      	b.n	8002414 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80023fe:	2340      	movs	r3, #64	; 0x40
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	e007      	b.n	8002414 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	da02      	bge.n	8002410 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800240a:	2386      	movs	r3, #134	; 0x86
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	e001      	b.n	8002414 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8002410:	2308      	movs	r3, #8
 8002412:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	461c      	mov	r4, r3
 8002418:	f107 0310 	add.w	r3, r7, #16
 800241c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002420:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	3724      	adds	r7, #36	; 0x24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd90      	pop	{r4, r7, pc}

0800242c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af02      	add	r7, sp, #8
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
      return NULL;
#endif    
    }
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 ) // configSUPPORT_DYNAMIC_ALLOCATION == 0
  if(count == 1) {
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d10a      	bne.n	8002452 <osSemaphoreCreate+0x26>
    return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2203      	movs	r2, #3
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	2001      	movs	r0, #1
 800244a:	f000 fa79 	bl	8002940 <xQueueGenericCreateStatic>
 800244e:	4603      	mov	r3, r0
 8002450:	e007      	b.n	8002462 <osSemaphoreCreate+0x36>
  }
  else
  {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8002452:	6838      	ldr	r0, [r7, #0]
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	461a      	mov	r2, r3
 800245c:	f000 fb03 	bl	8002a66 <xQueueCreateCountingSemaphoreStatic>
 8002460:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	e03a      	b.n	80024fa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248e:	d103      	bne.n	8002498 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	e009      	b.n	80024ac <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <osSemaphoreWait+0x40>
      ticks = 1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80024ac:	f7ff fe40 	bl	8002130 <inHandlerMode>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d017      	beq.n	80024e6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	461a      	mov	r2, r3
 80024bc:	2100      	movs	r1, #0
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 ff1a 	bl	80032f8 <xQueueReceiveFromISR>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d001      	beq.n	80024ce <osSemaphoreWait+0x62>
      return osErrorOS;
 80024ca:	23ff      	movs	r3, #255	; 0xff
 80024cc:	e015      	b.n	80024fa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d011      	beq.n	80024f8 <osSemaphoreWait+0x8c>
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <osSemaphoreWait+0x98>)
 80024d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	e008      	b.n	80024f8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80024e6:	68f9      	ldr	r1, [r7, #12]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fdf9 	bl	80030e0 <xQueueSemaphoreTake>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d001      	beq.n	80024f8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80024f4:	23ff      	movs	r3, #255	; 0xff
 80024f6:	e000      	b.n	80024fa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000ed04 	.word	0xe000ed04

08002508 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002518:	f7ff fe0a 	bl	8002130 <inHandlerMode>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fc6c 	bl	8002e06 <xQueueGiveFromISR>
 800252e:	4603      	mov	r3, r0
 8002530:	2b01      	cmp	r3, #1
 8002532:	d001      	beq.n	8002538 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002534:	23ff      	movs	r3, #255	; 0xff
 8002536:	e017      	b.n	8002568 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d013      	beq.n	8002566 <osSemaphoreRelease+0x5e>
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <osSemaphoreRelease+0x68>)
 8002540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	e00a      	b.n	8002566 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002550:	2300      	movs	r3, #0
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fabc 	bl	8002ad4 <xQueueGenericSend>
 800255c:	4603      	mov	r3, r0
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002562:	23ff      	movs	r3, #255	; 0xff
 8002564:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	e000ed04 	.word	0xe000ed04

08002574 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b085      	sub	sp, #20
 8002578:	af02      	add	r7, sp, #8
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2400      	movs	r4, #0
 8002590:	9400      	str	r4, [sp, #0]
 8002592:	f000 f9d5 	bl	8002940 <xQueueGenericCreateStatic>
 8002596:	4603      	mov	r3, r0
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bd90      	pop	{r4, r7, pc}

080025a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <osMessagePut+0x1e>
    ticks = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80025be:	f7ff fdb7 	bl	8002130 <inHandlerMode>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d018      	beq.n	80025fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80025c8:	f107 0210 	add.w	r2, r7, #16
 80025cc:	f107 0108 	add.w	r1, r7, #8
 80025d0:	2300      	movs	r3, #0
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fb7c 	bl	8002cd0 <xQueueGenericSendFromISR>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <osMessagePut+0x42>
      return osErrorOS;
 80025de:	23ff      	movs	r3, #255	; 0xff
 80025e0:	e018      	b.n	8002614 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d014      	beq.n	8002612 <osMessagePut+0x72>
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <osMessagePut+0x7c>)
 80025ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	e00b      	b.n	8002612 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80025fa:	f107 0108 	add.w	r1, r7, #8
 80025fe:	2300      	movs	r3, #0
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fa66 	bl	8002ad4 <xQueueGenericSend>
 8002608:	4603      	mov	r3, r0
 800260a:	2b01      	cmp	r3, #1
 800260c:	d001      	beq.n	8002612 <osMessagePut+0x72>
      return osErrorOS;
 800260e:	23ff      	movs	r3, #255	; 0xff
 8002610:	e000      	b.n	8002614 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	e000ed04 	.word	0xe000ed04

08002620 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b08b      	sub	sp, #44	; 0x2c
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10a      	bne.n	8002650 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	617b      	str	r3, [r7, #20]
    return event;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	461c      	mov	r4, r3
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800264a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800264e:	e054      	b.n	80026fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002650:	2300      	movs	r3, #0
 8002652:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d103      	bne.n	8002668 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	e009      	b.n	800267c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <osMessageGet+0x5c>
      ticks = 1;
 8002678:	2301      	movs	r3, #1
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800267c:	f7ff fd58 	bl	8002130 <inHandlerMode>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01c      	beq.n	80026c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002686:	f107 0220 	add.w	r2, r7, #32
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	3304      	adds	r3, #4
 8002690:	4619      	mov	r1, r3
 8002692:	68b8      	ldr	r0, [r7, #8]
 8002694:	f000 fe30 	bl	80032f8 <xQueueReceiveFromISR>
 8002698:	4603      	mov	r3, r0
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800269e:	2310      	movs	r3, #16
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	e001      	b.n	80026a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01d      	beq.n	80026ea <osMessageGet+0xca>
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <osMessageGet+0xe4>)
 80026b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	e014      	b.n	80026ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	3304      	adds	r3, #4
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	4619      	mov	r1, r3
 80026ca:	68b8      	ldr	r0, [r7, #8]
 80026cc:	f000 fc28 	bl	8002f20 <xQueueReceive>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80026d6:	2310      	movs	r3, #16
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	e006      	b.n	80026ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <osMessageGet+0xc6>
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <osMessageGet+0xc8>
 80026e6:	2340      	movs	r3, #64	; 0x40
 80026e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	461c      	mov	r4, r3
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	372c      	adds	r7, #44	; 0x2c
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	bf00      	nop
 8002704:	e000ed04 	.word	0xe000ed04

08002708 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f103 0208 	add.w	r2, r3, #8
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f103 0208 	add.w	r2, r3, #8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f103 0208 	add.w	r2, r3, #8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	601a      	str	r2, [r3, #0]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d103      	bne.n	80027ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e00c      	b.n	80027e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3308      	adds	r3, #8
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	e002      	b.n	80027d8 <vListInsert+0x2e>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d2f6      	bcs.n	80027d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	601a      	str	r2, [r3, #0]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6892      	ldr	r2, [r2, #8]
 8002832:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6852      	ldr	r2, [r2, #4]
 800283c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	429a      	cmp	r2, r3
 8002846:	d103      	bne.n	8002850 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	1e5a      	subs	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800289a:	f002 fdcb 	bl	8005434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	68f9      	ldr	r1, [r7, #12]
 80028a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	441a      	add	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	3b01      	subs	r3, #1
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	441a      	add	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	22ff      	movs	r2, #255	; 0xff
 80028de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d114      	bne.n	800291a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01a      	beq.n	800292e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3310      	adds	r3, #16
 80028fc:	4618      	mov	r0, r3
 80028fe:	f001 fb07 	bl	8003f10 <xTaskRemoveFromEventList>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d012      	beq.n	800292e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <xQueueGenericReset+0xcc>)
 800290a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	e009      	b.n	800292e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3310      	adds	r3, #16
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fef2 	bl	8002708 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3324      	adds	r3, #36	; 0x24
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff feed 	bl	8002708 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800292e:	f002 fdb1 	bl	8005494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002932:	2301      	movs	r3, #1
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	e000ed04 	.word	0xe000ed04

08002940 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08e      	sub	sp, #56	; 0x38
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002966:	bf00      	nop
 8002968:	e7fe      	b.n	8002968 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002982:	bf00      	nop
 8002984:	e7fe      	b.n	8002984 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <xQueueGenericCreateStatic+0x52>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <xQueueGenericCreateStatic+0x56>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <xQueueGenericCreateStatic+0x58>
 8002996:	2300      	movs	r3, #0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	623b      	str	r3, [r7, #32]
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <xQueueGenericCreateStatic+0x7e>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <xQueueGenericCreateStatic+0x82>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <xQueueGenericCreateStatic+0x84>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	61fb      	str	r3, [r7, #28]
}
 80029da:	bf00      	nop
 80029dc:	e7fe      	b.n	80029dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029de:	2348      	movs	r3, #72	; 0x48
 80029e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b48      	cmp	r3, #72	; 0x48
 80029e6:	d00a      	beq.n	80029fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	61bb      	str	r3, [r7, #24]
}
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f805 	bl	8002a28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3730      	adds	r7, #48	; 0x30
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e002      	b.n	8002a4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a56:	2101      	movs	r1, #1
 8002a58:	69b8      	ldr	r0, [r7, #24]
 8002a5a:	f7ff ff09 	bl	8002870 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b08a      	sub	sp, #40	; 0x28
 8002a6a:	af02      	add	r7, sp, #8
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	61bb      	str	r3, [r7, #24]
}
 8002a8a:	bf00      	nop
 8002a8c:	e7fe      	b.n	8002a8c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d90a      	bls.n	8002aac <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	617b      	str	r3, [r7, #20]
}
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002aac:	2302      	movs	r3, #2
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff ff42 	bl	8002940 <xQueueGenericCreateStatic>
 8002abc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002aca:	69fb      	ldr	r3, [r7, #28]
	}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08e      	sub	sp, #56	; 0x38
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xQueueGenericSend+0x32>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <xQueueGenericSend+0x40>
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <xQueueGenericSend+0x44>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <xQueueGenericSend+0x46>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <xQueueGenericSend+0x60>
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b30:	bf00      	nop
 8002b32:	e7fe      	b.n	8002b32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d103      	bne.n	8002b42 <xQueueGenericSend+0x6e>
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <xQueueGenericSend+0x72>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <xQueueGenericSend+0x74>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <xQueueGenericSend+0x8e>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	623b      	str	r3, [r7, #32]
}
 8002b5e:	bf00      	nop
 8002b60:	e7fe      	b.n	8002b60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b62:	f001 fb6b 	bl	800423c <xTaskGetSchedulerState>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <xQueueGenericSend+0x9e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <xQueueGenericSend+0xa2>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <xQueueGenericSend+0xa4>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <xQueueGenericSend+0xbe>
	__asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	61fb      	str	r3, [r7, #28]
}
 8002b8e:	bf00      	nop
 8002b90:	e7fe      	b.n	8002b90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b92:	f002 fc4f 	bl	8005434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d302      	bcc.n	8002ba8 <xQueueGenericSend+0xd4>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d129      	bne.n	8002bfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bae:	f000 fc3b 	bl	8003428 <prvCopyDataToQueue>
 8002bb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d010      	beq.n	8002bde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	3324      	adds	r3, #36	; 0x24
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 f9a5 	bl	8003f10 <xTaskRemoveFromEventList>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <xQueueGenericSend+0x1f8>)
 8002bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	e00a      	b.n	8002bf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002be4:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <xQueueGenericSend+0x1f8>)
 8002be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bf4:	f002 fc4e 	bl	8005494 <vPortExitCritical>
				return pdPASS;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e063      	b.n	8002cc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c02:	f002 fc47 	bl	8005494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e05c      	b.n	8002cc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d106      	bne.n	8002c1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 f9dd 	bl	8003fd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c1e:	f002 fc39 	bl	8005494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c22:	f000 ff57 	bl	8003ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c26:	f002 fc05 	bl	8005434 <vPortEnterCritical>
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c30:	b25b      	sxtb	r3, r3
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d103      	bne.n	8002c40 <xQueueGenericSend+0x16c>
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d103      	bne.n	8002c56 <xQueueGenericSend+0x182>
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c56:	f002 fc1d 	bl	8005494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c5a:	1d3a      	adds	r2, r7, #4
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f9cc 	bl	8004000 <xTaskCheckForTimeOut>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d124      	bne.n	8002cb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c70:	f000 fcd2 	bl	8003618 <prvIsQueueFull>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d018      	beq.n	8002cac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	3310      	adds	r3, #16
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 f8f4 	bl	8003e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c8a:	f000 fc5d 	bl	8003548 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c8e:	f000 ff2f 	bl	8003af0 <xTaskResumeAll>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f47f af7c 	bne.w	8002b92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <xQueueGenericSend+0x1f8>)
 8002c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	e772      	b.n	8002b92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cae:	f000 fc4b 	bl	8003548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cb2:	f000 ff1d 	bl	8003af0 <xTaskResumeAll>
 8002cb6:	e76c      	b.n	8002b92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cba:	f000 fc45 	bl	8003548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cbe:	f000 ff17 	bl	8003af0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3738      	adds	r7, #56	; 0x38
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	e000ed04 	.word	0xe000ed04

08002cd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b090      	sub	sp, #64	; 0x40
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cfa:	bf00      	nop
 8002cfc:	e7fe      	b.n	8002cfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <xQueueGenericSendFromISR+0x3c>
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <xQueueGenericSendFromISR+0x40>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <xQueueGenericSendFromISR+0x42>
 8002d10:	2300      	movs	r3, #0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d28:	bf00      	nop
 8002d2a:	e7fe      	b.n	8002d2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d103      	bne.n	8002d3a <xQueueGenericSendFromISR+0x6a>
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <xQueueGenericSendFromISR+0x6e>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <xQueueGenericSendFromISR+0x70>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	623b      	str	r3, [r7, #32]
}
 8002d56:	bf00      	nop
 8002d58:	e7fe      	b.n	8002d58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d5a:	f002 fc4d 	bl	80055f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	61fa      	str	r2, [r7, #28]
 8002d74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <xQueueGenericSendFromISR+0xbc>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d12f      	bne.n	8002dec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002da2:	f000 fb41 	bl	8003428 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002da6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d112      	bne.n	8002dd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d016      	beq.n	8002de6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dba:	3324      	adds	r3, #36	; 0x24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f8a7 	bl	8003f10 <xTaskRemoveFromEventList>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	b25a      	sxtb	r2, r3
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002de6:	2301      	movs	r3, #1
 8002de8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002dea:	e001      	b.n	8002df0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3740      	adds	r7, #64	; 0x40
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b08e      	sub	sp, #56	; 0x38
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	623b      	str	r3, [r7, #32]
}
 8002e2c:	bf00      	nop
 8002e2e:	e7fe      	b.n	8002e2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <xQueueGiveFromISR+0x48>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	61fb      	str	r3, [r7, #28]
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <xQueueGiveFromISR+0x58>
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <xQueueGiveFromISR+0x5c>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <xQueueGiveFromISR+0x5e>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <xQueueGiveFromISR+0x78>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	61bb      	str	r3, [r7, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e7e:	f002 fbbb 	bl	80055f8 <vPortValidateInterruptPriority>
	__asm volatile
 8002e82:	f3ef 8211 	mrs	r2, BASEPRI
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	617a      	str	r2, [r7, #20]
 8002e98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002e9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d22b      	bcs.n	8002f06 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d112      	bne.n	8002ef0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	3324      	adds	r3, #36	; 0x24
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 f81a 	bl	8003f10 <xTaskRemoveFromEventList>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00e      	beq.n	8002f00 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e007      	b.n	8002f00 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	b25a      	sxtb	r2, r3
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f00:	2301      	movs	r3, #1
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	e001      	b.n	8002f0a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f383 8811 	msr	BASEPRI, r3
}
 8002f14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3738      	adds	r7, #56	; 0x38
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <xQueueReceive+0x30>
	__asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	623b      	str	r3, [r7, #32]
}
 8002f4c:	bf00      	nop
 8002f4e:	e7fe      	b.n	8002f4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <xQueueReceive+0x3e>
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <xQueueReceive+0x42>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueReceive+0x44>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <xQueueReceive+0x5e>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	61fb      	str	r3, [r7, #28]
}
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f7e:	f001 f95d 	bl	800423c <xTaskGetSchedulerState>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <xQueueReceive+0x6e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <xQueueReceive+0x72>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <xQueueReceive+0x74>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <xQueueReceive+0x8e>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	61bb      	str	r3, [r7, #24]
}
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fae:	f002 fa41 	bl	8005434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01f      	beq.n	8002ffe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fc2:	f000 fa9b 	bl	80034fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	1e5a      	subs	r2, r3, #1
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00f      	beq.n	8002ff6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	3310      	adds	r3, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 ff98 	bl	8003f10 <xTaskRemoveFromEventList>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <xQueueReceive+0x1bc>)
 8002fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ff6:	f002 fa4d 	bl	8005494 <vPortExitCritical>
				return pdPASS;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e069      	b.n	80030d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003004:	f002 fa46 	bl	8005494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003008:	2300      	movs	r3, #0
 800300a:	e062      	b.n	80030d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003012:	f107 0310 	add.w	r3, r7, #16
 8003016:	4618      	mov	r0, r3
 8003018:	f000 ffdc 	bl	8003fd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800301c:	2301      	movs	r3, #1
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003020:	f002 fa38 	bl	8005494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003024:	f000 fd56 	bl	8003ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003028:	f002 fa04 	bl	8005434 <vPortEnterCritical>
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003032:	b25b      	sxtb	r3, r3
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d103      	bne.n	8003042 <xQueueReceive+0x122>
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003048:	b25b      	sxtb	r3, r3
 800304a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304e:	d103      	bne.n	8003058 <xQueueReceive+0x138>
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003058:	f002 fa1c 	bl	8005494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800305c:	1d3a      	adds	r2, r7, #4
 800305e:	f107 0310 	add.w	r3, r7, #16
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f000 ffcb 	bl	8004000 <xTaskCheckForTimeOut>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d123      	bne.n	80030b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003072:	f000 fabb 	bl	80035ec <prvIsQueueEmpty>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d017      	beq.n	80030ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	3324      	adds	r3, #36	; 0x24
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fef3 	bl	8003e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800308a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308c:	f000 fa5c 	bl	8003548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003090:	f000 fd2e 	bl	8003af0 <xTaskResumeAll>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d189      	bne.n	8002fae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <xQueueReceive+0x1bc>)
 800309c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	e780      	b.n	8002fae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ae:	f000 fa4b 	bl	8003548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030b2:	f000 fd1d 	bl	8003af0 <xTaskResumeAll>
 80030b6:	e77a      	b.n	8002fae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ba:	f000 fa45 	bl	8003548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030be:	f000 fd17 	bl	8003af0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030c4:	f000 fa92 	bl	80035ec <prvIsQueueEmpty>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f43f af6f 	beq.w	8002fae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3730      	adds	r7, #48	; 0x30
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08e      	sub	sp, #56	; 0x38
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	623b      	str	r3, [r7, #32]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	61fb      	str	r3, [r7, #28]
}
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003130:	f001 f884 	bl	800423c <xTaskGetSchedulerState>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <xQueueSemaphoreTake+0x60>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <xQueueSemaphoreTake+0x64>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <xQueueSemaphoreTake+0x66>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	61bb      	str	r3, [r7, #24]
}
 800315c:	bf00      	nop
 800315e:	e7fe      	b.n	800315e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003160:	f002 f968 	bl	8005434 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	2b00      	cmp	r3, #0
 800316e:	d024      	beq.n	80031ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	1e5a      	subs	r2, r3, #1
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003180:	f001 fa0e 	bl	80045a0 <pvTaskIncrementMutexHeldCount>
 8003184:	4602      	mov	r2, r0
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00f      	beq.n	80031b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003194:	3310      	adds	r3, #16
 8003196:	4618      	mov	r0, r3
 8003198:	f000 feba 	bl	8003f10 <xTaskRemoveFromEventList>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031a2:	4b54      	ldr	r3, [pc, #336]	; (80032f4 <xQueueSemaphoreTake+0x214>)
 80031a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031b2:	f002 f96f 	bl	8005494 <vPortExitCritical>
				return pdPASS;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e097      	b.n	80032ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d111      	bne.n	80031e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	617b      	str	r3, [r7, #20]
}
 80031d8:	bf00      	nop
 80031da:	e7fe      	b.n	80031da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031dc:	f002 f95a 	bl	8005494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e082      	b.n	80032ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fef0 	bl	8003fd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031f8:	f002 f94c 	bl	8005494 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031fc:	f000 fc6a 	bl	8003ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003200:	f002 f918 	bl	8005434 <vPortEnterCritical>
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800320a:	b25b      	sxtb	r3, r3
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d103      	bne.n	800321a <xQueueSemaphoreTake+0x13a>
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003220:	b25b      	sxtb	r3, r3
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d103      	bne.n	8003230 <xQueueSemaphoreTake+0x150>
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003230:	f002 f930 	bl	8005494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003234:	463a      	mov	r2, r7
 8003236:	f107 030c 	add.w	r3, r7, #12
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fedf 	bl	8004000 <xTaskCheckForTimeOut>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d132      	bne.n	80032ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800324a:	f000 f9cf 	bl	80035ec <prvIsQueueEmpty>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d026      	beq.n	80032a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800325c:	f002 f8ea 	bl	8005434 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4618      	mov	r0, r3
 8003266:	f001 f807 	bl	8004278 <xTaskPriorityInherit>
 800326a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800326c:	f002 f912 	bl	8005494 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	3324      	adds	r3, #36	; 0x24
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fdf9 	bl	8003e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800327e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003280:	f000 f962 	bl	8003548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003284:	f000 fc34 	bl	8003af0 <xTaskResumeAll>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	f47f af68 	bne.w	8003160 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <xQueueSemaphoreTake+0x214>)
 8003292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	e75e      	b.n	8003160 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80032a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032a4:	f000 f950 	bl	8003548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032a8:	f000 fc22 	bl	8003af0 <xTaskResumeAll>
 80032ac:	e758      	b.n	8003160 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80032ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032b0:	f000 f94a 	bl	8003548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032b4:	f000 fc1c 	bl	8003af0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032ba:	f000 f997 	bl	80035ec <prvIsQueueEmpty>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f43f af4d 	beq.w	8003160 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80032cc:	f002 f8b2 	bl	8005434 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032d2:	f000 f891 	bl	80033f8 <prvGetDisinheritPriorityAfterTimeout>
 80032d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 f8cc 	bl	800447c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80032e4:	f002 f8d6 	bl	8005494 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3738      	adds	r7, #56	; 0x38
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	623b      	str	r3, [r7, #32]
}
 8003320:	bf00      	nop
 8003322:	e7fe      	b.n	8003322 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <xQueueReceiveFromISR+0x3a>
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <xQueueReceiveFromISR+0x3e>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <xQueueReceiveFromISR+0x40>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	61fb      	str	r3, [r7, #28]
}
 800334e:	bf00      	nop
 8003350:	e7fe      	b.n	8003350 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003352:	f002 f951 	bl	80055f8 <vPortValidateInterruptPriority>
	__asm volatile
 8003356:	f3ef 8211 	mrs	r2, BASEPRI
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	61ba      	str	r2, [r7, #24]
 800336c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800336e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d02f      	beq.n	80033de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800338c:	f000 f8b6 	bl	80034fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	1e5a      	subs	r2, r3, #1
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d112      	bne.n	80033c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	3310      	adds	r3, #16
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fdae 	bl	8003f10 <xTaskRemoveFromEventList>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e007      	b.n	80033d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80033c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033cc:	3301      	adds	r3, #1
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	b25a      	sxtb	r2, r3
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80033d8:	2301      	movs	r3, #1
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
 80033dc:	e001      	b.n	80033e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80033de:	2300      	movs	r3, #0
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f383 8811 	msr	BASEPRI, r3
}
 80033ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3738      	adds	r7, #56	; 0x38
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2b00      	cmp	r3, #0
 8003406:	d006      	beq.n	8003416 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1c3 0307 	rsb	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e001      	b.n	800341a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800341a:	68fb      	ldr	r3, [r7, #12]
	}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10d      	bne.n	8003462 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d14d      	bne.n	80034ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 ff86 	bl	8004364 <xTaskPriorityDisinherit>
 8003458:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	e043      	b.n	80034ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d119      	bne.n	800349c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6858      	ldr	r0, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	461a      	mov	r2, r3
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	f002 f924 	bl	80056c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	441a      	add	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d32b      	bcc.n	80034ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	e026      	b.n	80034ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68d8      	ldr	r0, [r3, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	461a      	mov	r2, r3
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	f002 f90a 	bl	80056c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	425b      	negs	r3, r3
 80034b6:	441a      	add	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d207      	bcs.n	80034d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	425b      	negs	r3, r3
 80034d2:	441a      	add	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d105      	bne.n	80034ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034f2:	697b      	ldr	r3, [r7, #20]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	441a      	add	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	429a      	cmp	r2, r3
 8003526:	d303      	bcc.n	8003530 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68d9      	ldr	r1, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	461a      	mov	r2, r3
 800353a:	6838      	ldr	r0, [r7, #0]
 800353c:	f002 f8c0 	bl	80056c0 <memcpy>
	}
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003550:	f001 ff70 	bl	8005434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800355a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800355c:	e011      	b.n	8003582 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d012      	beq.n	800358c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3324      	adds	r3, #36	; 0x24
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fcd0 	bl	8003f10 <xTaskRemoveFromEventList>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003576:	f000 fda5 	bl	80040c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	3b01      	subs	r3, #1
 800357e:	b2db      	uxtb	r3, r3
 8003580:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	dce9      	bgt.n	800355e <prvUnlockQueue+0x16>
 800358a:	e000      	b.n	800358e <prvUnlockQueue+0x46>
					break;
 800358c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	22ff      	movs	r2, #255	; 0xff
 8003592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003596:	f001 ff7d 	bl	8005494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800359a:	f001 ff4b 	bl	8005434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035a6:	e011      	b.n	80035cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d012      	beq.n	80035d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3310      	adds	r3, #16
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fcab 	bl	8003f10 <xTaskRemoveFromEventList>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035c0:	f000 fd80 	bl	80040c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035c4:	7bbb      	ldrb	r3, [r7, #14]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	dce9      	bgt.n	80035a8 <prvUnlockQueue+0x60>
 80035d4:	e000      	b.n	80035d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	22ff      	movs	r2, #255	; 0xff
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035e0:	f001 ff58 	bl	8005494 <vPortExitCritical>
}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035f4:	f001 ff1e 	bl	8005434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e001      	b.n	800360a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800360a:	f001 ff43 	bl	8005494 <vPortExitCritical>

	return xReturn;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003620:	f001 ff08 	bl	8005434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	429a      	cmp	r2, r3
 800362e:	d102      	bne.n	8003636 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003630:	2301      	movs	r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	e001      	b.n	800363a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800363a:	f001 ff2b 	bl	8005494 <vPortExitCritical>

	return xReturn;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e014      	b.n	8003682 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003658:	4a0f      	ldr	r2, [pc, #60]	; (8003698 <vQueueAddToRegistry+0x50>)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003664:	490c      	ldr	r1, [pc, #48]	; (8003698 <vQueueAddToRegistry+0x50>)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <vQueueAddToRegistry+0x50>)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800367a:	e006      	b.n	800368a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3301      	adds	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b07      	cmp	r3, #7
 8003686:	d9e7      	bls.n	8003658 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	2000363c 	.word	0x2000363c

0800369c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036ac:	f001 fec2 	bl	8005434 <vPortEnterCritical>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036b6:	b25b      	sxtb	r3, r3
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d103      	bne.n	80036c6 <vQueueWaitForMessageRestricted+0x2a>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036cc:	b25b      	sxtb	r3, r3
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d103      	bne.n	80036dc <vQueueWaitForMessageRestricted+0x40>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036dc:	f001 feda 	bl	8005494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3324      	adds	r3, #36	; 0x24
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fbe1 	bl	8003eb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f7ff ff26 	bl	8003548 <prvUnlockQueue>
	}
 80036fc:	bf00      	nop
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08e      	sub	sp, #56	; 0x38
 8003708:	af04      	add	r7, sp, #16
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	623b      	str	r3, [r7, #32]
}
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <xTaskCreateStatic+0x46>
	__asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	61fb      	str	r3, [r7, #28]
}
 8003746:	bf00      	nop
 8003748:	e7fe      	b.n	8003748 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800374a:	23a8      	movs	r3, #168	; 0xa8
 800374c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2ba8      	cmp	r3, #168	; 0xa8
 8003752:	d00a      	beq.n	800376a <xTaskCreateStatic+0x66>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	61bb      	str	r3, [r7, #24]
}
 8003766:	bf00      	nop
 8003768:	e7fe      	b.n	8003768 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800376a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800376c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01a      	beq.n	80037a8 <xTaskCreateStatic+0xa4>
 8003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003774:	2b00      	cmp	r3, #0
 8003776:	d017      	beq.n	80037a8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003782:	2300      	movs	r3, #0
 8003784:	9303      	str	r3, [sp, #12]
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	9302      	str	r3, [sp, #8]
 800378a:	f107 0314 	add.w	r3, r7, #20
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f80b 	bl	80037b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037a2:	f000 f893 	bl	80038cc <prvAddNewTaskToReadyList>
 80037a6:	e001      	b.n	80037ac <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037ac:	697b      	ldr	r3, [r7, #20]
	}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3728      	adds	r7, #40	; 0x28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b088      	sub	sp, #32
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037ce:	3b01      	subs	r3, #1
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f023 0307 	bic.w	r3, r3, #7
 80037dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <prvInitialiseNewTask+0x48>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	617b      	str	r3, [r7, #20]
}
 80037fa:	bf00      	nop
 80037fc:	e7fe      	b.n	80037fc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01f      	beq.n	8003844 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003804:	2300      	movs	r3, #0
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	e012      	b.n	8003830 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	7819      	ldrb	r1, [r3, #0]
 8003812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	3334      	adds	r3, #52	; 0x34
 800381a:	460a      	mov	r2, r1
 800381c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3301      	adds	r3, #1
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b63      	cmp	r3, #99	; 0x63
 8003834:	d9e9      	bls.n	800380a <prvInitialiseNewTask+0x54>
 8003836:	e000      	b.n	800383a <prvInitialiseNewTask+0x84>
			{
				break;
 8003838:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8003842:	e003      	b.n	800384c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	2b06      	cmp	r3, #6
 8003850:	d901      	bls.n	8003856 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003852:	2306      	movs	r3, #6
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800385a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003860:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->uxMutexesHeld = 0;
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	2200      	movs	r2, #0
 8003868:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	3304      	adds	r3, #4
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe ff69 	bl	8002748 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	3318      	adds	r3, #24
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe ff64 	bl	8002748 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003884:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	f1c3 0207 	rsb	r2, r3, #7
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	2200      	movs	r2, #0
 800389a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	68f9      	ldr	r1, [r7, #12]
 80038aa:	69b8      	ldr	r0, [r7, #24]
 80038ac:	f001 fc98 	bl	80051e0 <pxPortInitialiseStack>
 80038b0:	4602      	mov	r2, r0
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038c2:	bf00      	nop
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038d4:	f001 fdae 	bl	8005434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038d8:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <prvAddNewTaskToReadyList+0xb8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	4a29      	ldr	r2, [pc, #164]	; (8003984 <prvAddNewTaskToReadyList+0xb8>)
 80038e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <prvAddNewTaskToReadyList+0xbc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038ea:	4a27      	ldr	r2, [pc, #156]	; (8003988 <prvAddNewTaskToReadyList+0xbc>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038f0:	4b24      	ldr	r3, [pc, #144]	; (8003984 <prvAddNewTaskToReadyList+0xb8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d110      	bne.n	800391a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038f8:	f000 fc08 	bl	800410c <prvInitialiseTaskLists>
 80038fc:	e00d      	b.n	800391a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038fe:	4b23      	ldr	r3, [pc, #140]	; (800398c <prvAddNewTaskToReadyList+0xc0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003906:	4b20      	ldr	r3, [pc, #128]	; (8003988 <prvAddNewTaskToReadyList+0xbc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	429a      	cmp	r2, r3
 8003912:	d802      	bhi.n	800391a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003914:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <prvAddNewTaskToReadyList+0xbc>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <prvAddNewTaskToReadyList+0xc4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <prvAddNewTaskToReadyList+0xc4>)
 8003922:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	2201      	movs	r2, #1
 800392a:	409a      	lsls	r2, r3
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <prvAddNewTaskToReadyList+0xc8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4313      	orrs	r3, r2
 8003932:	4a18      	ldr	r2, [pc, #96]	; (8003994 <prvAddNewTaskToReadyList+0xc8>)
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4a15      	ldr	r2, [pc, #84]	; (8003998 <prvAddNewTaskToReadyList+0xcc>)
 8003944:	441a      	add	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	4619      	mov	r1, r3
 800394c:	4610      	mov	r0, r2
 800394e:	f7fe ff08 	bl	8002762 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003952:	f001 fd9f 	bl	8005494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <prvAddNewTaskToReadyList+0xc0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00e      	beq.n	800397c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <prvAddNewTaskToReadyList+0xbc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	429a      	cmp	r2, r3
 800396a:	d207      	bcs.n	800397c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <prvAddNewTaskToReadyList+0xd0>)
 800396e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	2000377c 	.word	0x2000377c
 8003988:	2000367c 	.word	0x2000367c
 800398c:	20003788 	.word	0x20003788
 8003990:	20003798 	.word	0x20003798
 8003994:	20003784 	.word	0x20003784
 8003998:	20003680 	.word	0x20003680
 800399c:	e000ed04 	.word	0xe000ed04

080039a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d017      	beq.n	80039e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <vTaskDelay+0x60>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <vTaskDelay+0x30>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	60bb      	str	r3, [r7, #8]
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039d0:	f000 f880 	bl	8003ad4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039d4:	2100      	movs	r1, #0
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fffa 	bl	80049d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039dc:	f000 f888 	bl	8003af0 <xTaskResumeAll>
 80039e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <vTaskDelay+0x64>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	200037a4 	.word	0x200037a4
 8003a04:	e000ed04 	.word	0xe000ed04

08003a08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a16:	463a      	mov	r2, r7
 8003a18:	1d39      	adds	r1, r7, #4
 8003a1a:	f107 0308 	add.w	r3, r7, #8
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fc fd58 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a24:	6839      	ldr	r1, [r7, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	9202      	str	r2, [sp, #8]
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2300      	movs	r3, #0
 8003a34:	460a      	mov	r2, r1
 8003a36:	4921      	ldr	r1, [pc, #132]	; (8003abc <vTaskStartScheduler+0xb4>)
 8003a38:	4821      	ldr	r0, [pc, #132]	; (8003ac0 <vTaskStartScheduler+0xb8>)
 8003a3a:	f7ff fe63 	bl	8003704 <xTaskCreateStatic>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <vTaskStartScheduler+0xbc>)
 8003a42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <vTaskStartScheduler+0xbc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e001      	b.n	8003a56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d102      	bne.n	8003a62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a5c:	f001 f81e 	bl	8004a9c <xTimerCreateTimerTask>
 8003a60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d116      	bne.n	8003a96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	613b      	str	r3, [r7, #16]
}
 8003a7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <vTaskStartScheduler+0xc0>)
 8003a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a84:	4b11      	ldr	r3, [pc, #68]	; (8003acc <vTaskStartScheduler+0xc4>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <vTaskStartScheduler+0xc8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a90:	f001 fc2e 	bl	80052f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a94:	e00e      	b.n	8003ab4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d10a      	bne.n	8003ab4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	60fb      	str	r3, [r7, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <vTaskStartScheduler+0xaa>
}
 8003ab4:	bf00      	nop
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	08005914 	.word	0x08005914
 8003ac0:	080040dd 	.word	0x080040dd
 8003ac4:	200037a0 	.word	0x200037a0
 8003ac8:	2000379c 	.word	0x2000379c
 8003acc:	20003788 	.word	0x20003788
 8003ad0:	20003780 	.word	0x20003780

08003ad4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <vTaskSuspendAll+0x18>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	4a03      	ldr	r2, [pc, #12]	; (8003aec <vTaskSuspendAll+0x18>)
 8003ae0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	200037a4 	.word	0x200037a4

08003af0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003afe:	4b41      	ldr	r3, [pc, #260]	; (8003c04 <xTaskResumeAll+0x114>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <xTaskResumeAll+0x2c>
	__asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	603b      	str	r3, [r7, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b1c:	f001 fc8a 	bl	8005434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b20:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <xTaskResumeAll+0x114>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	4a37      	ldr	r2, [pc, #220]	; (8003c04 <xTaskResumeAll+0x114>)
 8003b28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <xTaskResumeAll+0x114>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d161      	bne.n	8003bf6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b32:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <xTaskResumeAll+0x118>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d05d      	beq.n	8003bf6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b3a:	e02e      	b.n	8003b9a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3c:	4b33      	ldr	r3, [pc, #204]	; (8003c0c <xTaskResumeAll+0x11c>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3318      	adds	r3, #24
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe fe67 	bl	800281c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fe62 	bl	800281c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <xTaskResumeAll+0x120>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	4a2a      	ldr	r2, [pc, #168]	; (8003c10 <xTaskResumeAll+0x120>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <xTaskResumeAll+0x124>)
 8003b78:	441a      	add	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4610      	mov	r0, r2
 8003b82:	f7fe fdee 	bl	8002762 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <xTaskResumeAll+0x128>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <xTaskResumeAll+0x12c>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <xTaskResumeAll+0x11c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1cc      	bne.n	8003b3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ba8:	f000 fb28 	bl	80041fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bac:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <xTaskResumeAll+0x130>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d010      	beq.n	8003bda <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bb8:	f000 f846 	bl	8003c48 <xTaskIncrementTick>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <xTaskResumeAll+0x12c>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f1      	bne.n	8003bb8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <xTaskResumeAll+0x130>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <xTaskResumeAll+0x12c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003be2:	2301      	movs	r3, #1
 8003be4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <xTaskResumeAll+0x134>)
 8003be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bf6:	f001 fc4d 	bl	8005494 <vPortExitCritical>

	return xAlreadyYielded;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	200037a4 	.word	0x200037a4
 8003c08:	2000377c 	.word	0x2000377c
 8003c0c:	2000373c 	.word	0x2000373c
 8003c10:	20003784 	.word	0x20003784
 8003c14:	20003680 	.word	0x20003680
 8003c18:	2000367c 	.word	0x2000367c
 8003c1c:	20003790 	.word	0x20003790
 8003c20:	2000378c 	.word	0x2000378c
 8003c24:	e000ed04 	.word	0xe000ed04

08003c28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <xTaskGetTickCount+0x1c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c34:	687b      	ldr	r3, [r7, #4]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20003780 	.word	0x20003780

08003c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c52:	4b4e      	ldr	r3, [pc, #312]	; (8003d8c <xTaskIncrementTick+0x144>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 808e 	bne.w	8003d78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c5c:	4b4c      	ldr	r3, [pc, #304]	; (8003d90 <xTaskIncrementTick+0x148>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c64:	4a4a      	ldr	r2, [pc, #296]	; (8003d90 <xTaskIncrementTick+0x148>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d120      	bne.n	8003cb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c70:	4b48      	ldr	r3, [pc, #288]	; (8003d94 <xTaskIncrementTick+0x14c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	603b      	str	r3, [r7, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	e7fe      	b.n	8003c8e <xTaskIncrementTick+0x46>
 8003c90:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <xTaskIncrementTick+0x14c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	4b40      	ldr	r3, [pc, #256]	; (8003d98 <xTaskIncrementTick+0x150>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3e      	ldr	r2, [pc, #248]	; (8003d94 <xTaskIncrementTick+0x14c>)
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4a3e      	ldr	r2, [pc, #248]	; (8003d98 <xTaskIncrementTick+0x150>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b3d      	ldr	r3, [pc, #244]	; (8003d9c <xTaskIncrementTick+0x154>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	4a3c      	ldr	r2, [pc, #240]	; (8003d9c <xTaskIncrementTick+0x154>)
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	f000 faa5 	bl	80041fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cb2:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <xTaskIncrementTick+0x158>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d348      	bcc.n	8003d4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cbc:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <xTaskIncrementTick+0x14c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc6:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <xTaskIncrementTick+0x158>)
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	601a      	str	r2, [r3, #0]
					break;
 8003cce:	e03e      	b.n	8003d4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd0:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <xTaskIncrementTick+0x14c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d203      	bcs.n	8003cf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ce8:	4a2d      	ldr	r2, [pc, #180]	; (8003da0 <xTaskIncrementTick+0x158>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cee:	e02e      	b.n	8003d4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fd91 	bl	800281c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3318      	adds	r3, #24
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fd88 	bl	800281c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	2201      	movs	r2, #1
 8003d12:	409a      	lsls	r2, r3
 8003d14:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <xTaskIncrementTick+0x15c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <xTaskIncrementTick+0x15c>)
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <xTaskIncrementTick+0x160>)
 8003d2c:	441a      	add	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f7fe fd14 	bl	8002762 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <xTaskIncrementTick+0x164>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d3b9      	bcc.n	8003cbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d4c:	e7b6      	b.n	8003cbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d4e:	4b17      	ldr	r3, [pc, #92]	; (8003dac <xTaskIncrementTick+0x164>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4914      	ldr	r1, [pc, #80]	; (8003da8 <xTaskIncrementTick+0x160>)
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d901      	bls.n	8003d6a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003d66:	2301      	movs	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <xTaskIncrementTick+0x168>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d72:	2301      	movs	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	e004      	b.n	8003d82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <xTaskIncrementTick+0x16c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <xTaskIncrementTick+0x16c>)
 8003d80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d82:	697b      	ldr	r3, [r7, #20]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	200037a4 	.word	0x200037a4
 8003d90:	20003780 	.word	0x20003780
 8003d94:	20003734 	.word	0x20003734
 8003d98:	20003738 	.word	0x20003738
 8003d9c:	20003794 	.word	0x20003794
 8003da0:	2000379c 	.word	0x2000379c
 8003da4:	20003784 	.word	0x20003784
 8003da8:	20003680 	.word	0x20003680
 8003dac:	2000367c 	.word	0x2000367c
 8003db0:	20003790 	.word	0x20003790
 8003db4:	2000378c 	.word	0x2000378c

08003db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dbe:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <vTaskSwitchContext+0xa4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <vTaskSwitchContext+0xa8>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dcc:	e03f      	b.n	8003e4e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <vTaskSwitchContext+0xa8>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd4:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <vTaskSwitchContext+0xac>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	fab3 f383 	clz	r3, r3
 8003de0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003de2:	7afb      	ldrb	r3, [r7, #11]
 8003de4:	f1c3 031f 	rsb	r3, r3, #31
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	491f      	ldr	r1, [pc, #124]	; (8003e68 <vTaskSwitchContext+0xb0>)
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	607b      	str	r3, [r7, #4]
}
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <vTaskSwitchContext+0x5a>
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <vTaskSwitchContext+0xb0>)
 8003e20:	4413      	add	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	3308      	adds	r3, #8
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d104      	bne.n	8003e44 <vTaskSwitchContext+0x8c>
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	4a08      	ldr	r2, [pc, #32]	; (8003e6c <vTaskSwitchContext+0xb4>)
 8003e4c:	6013      	str	r3, [r2, #0]
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	200037a4 	.word	0x200037a4
 8003e60:	20003790 	.word	0x20003790
 8003e64:	20003784 	.word	0x20003784
 8003e68:	20003680 	.word	0x20003680
 8003e6c:	2000367c 	.word	0x2000367c

08003e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	60fb      	str	r3, [r7, #12]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <vTaskPlaceOnEventList+0x44>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe fc83 	bl	80027aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	6838      	ldr	r0, [r7, #0]
 8003ea8:	f000 fd92 	bl	80049d0 <prvAddCurrentTaskToDelayedList>
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	2000367c 	.word	0x2000367c

08003eb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	617b      	str	r3, [r7, #20]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <vTaskPlaceOnEventListRestricted+0x54>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3318      	adds	r3, #24
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7fe fc3a 	bl	8002762 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	68b8      	ldr	r0, [r7, #8]
 8003efe:	f000 fd67 	bl	80049d0 <prvAddCurrentTaskToDelayedList>
	}
 8003f02:	bf00      	nop
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000367c 	.word	0x2000367c

08003f10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60fb      	str	r3, [r7, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	3318      	adds	r3, #24
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe fc6b 	bl	800281c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f46:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <xTaskRemoveFromEventList+0xac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11c      	bne.n	8003f88 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fc62 	bl	800281c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <xTaskRemoveFromEventList+0xb0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <xTaskRemoveFromEventList+0xb0>)
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <xTaskRemoveFromEventList+0xb4>)
 8003f78:	441a      	add	r2, r3
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f7fe fbee 	bl	8002762 <vListInsertEnd>
 8003f86:	e005      	b.n	8003f94 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	3318      	adds	r3, #24
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	480e      	ldr	r0, [pc, #56]	; (8003fc8 <xTaskRemoveFromEventList+0xb8>)
 8003f90:	f7fe fbe7 	bl	8002762 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <xTaskRemoveFromEventList+0xbc>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d905      	bls.n	8003fae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <xTaskRemoveFromEventList+0xc0>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e001      	b.n	8003fb2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fb2:	697b      	ldr	r3, [r7, #20]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	200037a4 	.word	0x200037a4
 8003fc0:	20003784 	.word	0x20003784
 8003fc4:	20003680 	.word	0x20003680
 8003fc8:	2000373c 	.word	0x2000373c
 8003fcc:	2000367c 	.word	0x2000367c
 8003fd0:	20003790 	.word	0x20003790

08003fd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <vTaskInternalSetTimeOutState+0x24>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <vTaskInternalSetTimeOutState+0x28>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	605a      	str	r2, [r3, #4]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	20003794 	.word	0x20003794
 8003ffc:	20003780 	.word	0x20003780

08004000 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	613b      	str	r3, [r7, #16]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	60fb      	str	r3, [r7, #12]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004042:	f001 f9f7 	bl	8005434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <xTaskCheckForTimeOut+0xbc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405e:	d102      	bne.n	8004066 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	e023      	b.n	80040ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <xTaskCheckForTimeOut+0xc0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d007      	beq.n	8004082 <xTaskCheckForTimeOut+0x82>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	429a      	cmp	r2, r3
 800407a:	d302      	bcc.n	8004082 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800407c:	2301      	movs	r3, #1
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	e015      	b.n	80040ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	429a      	cmp	r2, r3
 800408a:	d20b      	bcs.n	80040a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	1ad2      	subs	r2, r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff9b 	bl	8003fd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e004      	b.n	80040ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040aa:	2301      	movs	r3, #1
 80040ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040ae:	f001 f9f1 	bl	8005494 <vPortExitCritical>

	return xReturn;
 80040b2:	69fb      	ldr	r3, [r7, #28]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3720      	adds	r7, #32
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20003780 	.word	0x20003780
 80040c0:	20003794 	.word	0x20003794

080040c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <vTaskMissedYield+0x14>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	20003790 	.word	0x20003790

080040dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040e4:	f000 f852 	bl	800418c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040e8:	4b06      	ldr	r3, [pc, #24]	; (8004104 <prvIdleTask+0x28>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d9f9      	bls.n	80040e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <prvIdleTask+0x2c>)
 80040f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004100:	e7f0      	b.n	80040e4 <prvIdleTask+0x8>
 8004102:	bf00      	nop
 8004104:	20003680 	.word	0x20003680
 8004108:	e000ed04 	.word	0xe000ed04

0800410c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004112:	2300      	movs	r3, #0
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	e00c      	b.n	8004132 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4a12      	ldr	r2, [pc, #72]	; (800416c <prvInitialiseTaskLists+0x60>)
 8004124:	4413      	add	r3, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe faee 	bl	8002708 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3301      	adds	r3, #1
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b06      	cmp	r3, #6
 8004136:	d9ef      	bls.n	8004118 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004138:	480d      	ldr	r0, [pc, #52]	; (8004170 <prvInitialiseTaskLists+0x64>)
 800413a:	f7fe fae5 	bl	8002708 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800413e:	480d      	ldr	r0, [pc, #52]	; (8004174 <prvInitialiseTaskLists+0x68>)
 8004140:	f7fe fae2 	bl	8002708 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004144:	480c      	ldr	r0, [pc, #48]	; (8004178 <prvInitialiseTaskLists+0x6c>)
 8004146:	f7fe fadf 	bl	8002708 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800414a:	480c      	ldr	r0, [pc, #48]	; (800417c <prvInitialiseTaskLists+0x70>)
 800414c:	f7fe fadc 	bl	8002708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004150:	480b      	ldr	r0, [pc, #44]	; (8004180 <prvInitialiseTaskLists+0x74>)
 8004152:	f7fe fad9 	bl	8002708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <prvInitialiseTaskLists+0x78>)
 8004158:	4a05      	ldr	r2, [pc, #20]	; (8004170 <prvInitialiseTaskLists+0x64>)
 800415a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <prvInitialiseTaskLists+0x7c>)
 800415e:	4a05      	ldr	r2, [pc, #20]	; (8004174 <prvInitialiseTaskLists+0x68>)
 8004160:	601a      	str	r2, [r3, #0]
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20003680 	.word	0x20003680
 8004170:	2000370c 	.word	0x2000370c
 8004174:	20003720 	.word	0x20003720
 8004178:	2000373c 	.word	0x2000373c
 800417c:	20003750 	.word	0x20003750
 8004180:	20003768 	.word	0x20003768
 8004184:	20003734 	.word	0x20003734
 8004188:	20003738 	.word	0x20003738

0800418c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004192:	e019      	b.n	80041c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004194:	f001 f94e 	bl	8005434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <prvCheckTasksWaitingTermination+0x50>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe fb39 	bl	800281c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041aa:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <prvCheckTasksWaitingTermination+0x54>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <prvCheckTasksWaitingTermination+0x54>)
 80041b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <prvCheckTasksWaitingTermination+0x58>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <prvCheckTasksWaitingTermination+0x58>)
 80041bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041be:	f001 f969 	bl	8005494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f810 	bl	80041e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <prvCheckTasksWaitingTermination+0x58>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e1      	bne.n	8004194 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20003750 	.word	0x20003750
 80041e0:	2000377c 	.word	0x2000377c
 80041e4:	20003764 	.word	0x20003764

080041e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004202:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 800420e:	f04f 32ff 	mov.w	r2, #4294967295
 8004212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004214:	e008      	b.n	8004228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004216:	4b07      	ldr	r3, [pc, #28]	; (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20003734 	.word	0x20003734
 8004238:	2000379c 	.word	0x2000379c

0800423c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <xTaskGetSchedulerState+0x34>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800424a:	2301      	movs	r3, #1
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	e008      	b.n	8004262 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004250:	4b08      	ldr	r3, [pc, #32]	; (8004274 <xTaskGetSchedulerState+0x38>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004258:	2302      	movs	r3, #2
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	e001      	b.n	8004262 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004262:	687b      	ldr	r3, [r7, #4]
	}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	20003788 	.word	0x20003788
 8004274:	200037a4 	.word	0x200037a4

08004278 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d05f      	beq.n	800434e <xTaskPriorityInherit+0xd6>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	4b31      	ldr	r3, [pc, #196]	; (8004358 <xTaskPriorityInherit+0xe0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	429a      	cmp	r2, r3
 800429a:	d24e      	bcs.n	800433a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	db06      	blt.n	80042b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a4:	4b2c      	ldr	r3, [pc, #176]	; (8004358 <xTaskPriorityInherit+0xe0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	f1c3 0207 	rsb	r2, r3, #7
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6959      	ldr	r1, [r3, #20]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4a26      	ldr	r2, [pc, #152]	; (800435c <xTaskPriorityInherit+0xe4>)
 80042c4:	4413      	add	r3, r2
 80042c6:	4299      	cmp	r1, r3
 80042c8:	d12f      	bne.n	800432a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe faa4 	bl	800281c <uxListRemove>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	2201      	movs	r2, #1
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43da      	mvns	r2, r3
 80042e6:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <xTaskPriorityInherit+0xe8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4013      	ands	r3, r2
 80042ec:	4a1c      	ldr	r2, [pc, #112]	; (8004360 <xTaskPriorityInherit+0xe8>)
 80042ee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042f0:	4b19      	ldr	r3, [pc, #100]	; (8004358 <xTaskPriorityInherit+0xe0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	2201      	movs	r2, #1
 8004300:	409a      	lsls	r2, r3
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <xTaskPriorityInherit+0xe8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	4a15      	ldr	r2, [pc, #84]	; (8004360 <xTaskPriorityInherit+0xe8>)
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4a10      	ldr	r2, [pc, #64]	; (800435c <xTaskPriorityInherit+0xe4>)
 800431a:	441a      	add	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f7fe fa1d 	bl	8002762 <vListInsertEnd>
 8004328:	e004      	b.n	8004334 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <xTaskPriorityInherit+0xe0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004334:	2301      	movs	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e009      	b.n	800434e <xTaskPriorityInherit+0xd6>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <xTaskPriorityInherit+0xe0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	429a      	cmp	r2, r3
 8004348:	d201      	bcs.n	800434e <xTaskPriorityInherit+0xd6>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800434a:	2301      	movs	r3, #1
 800434c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800434e:	68fb      	ldr	r3, [r7, #12]
	}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	2000367c 	.word	0x2000367c
 800435c:	20003680 	.word	0x20003680
 8004360:	20003784 	.word	0x20003784

08004364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d074      	beq.n	8004464 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800437a:	4b3d      	ldr	r3, [pc, #244]	; (8004470 <xTaskPriorityDisinherit+0x10c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	d00a      	beq.n	800439a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <xTaskPriorityDisinherit+0x56>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	60bb      	str	r3, [r7, #8]
}
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043c0:	1e5a      	subs	r2, r3, #1
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d046      	beq.n	8004464 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d141      	bne.n	8004464 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe fa19 	bl	800281c <uxListRemove>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d115      	bne.n	800441c <xTaskPriorityDisinherit+0xb8>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	491f      	ldr	r1, [pc, #124]	; (8004474 <xTaskPriorityDisinherit+0x110>)
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <xTaskPriorityDisinherit+0xb8>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	2201      	movs	r2, #1
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43da      	mvns	r2, r3
 8004412:	4b19      	ldr	r3, [pc, #100]	; (8004478 <xTaskPriorityDisinherit+0x114>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4013      	ands	r3, r2
 8004418:	4a17      	ldr	r2, [pc, #92]	; (8004478 <xTaskPriorityDisinherit+0x114>)
 800441a:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	f1c3 0207 	rsb	r2, r3, #7
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	2201      	movs	r2, #1
 8004438:	409a      	lsls	r2, r3
 800443a:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <xTaskPriorityDisinherit+0x114>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <xTaskPriorityDisinherit+0x114>)
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4a08      	ldr	r2, [pc, #32]	; (8004474 <xTaskPriorityDisinherit+0x110>)
 8004452:	441a      	add	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7fe f981 	bl	8002762 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004464:	697b      	ldr	r3, [r7, #20]
	}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	2000367c 	.word	0x2000367c
 8004474:	20003680 	.word	0x20003680
 8004478:	20003784 	.word	0x20003784

0800447c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d07b      	beq.n	800458c <vTaskPriorityDisinheritAfterTimeout+0x110>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60fb      	str	r3, [r7, #12]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d902      	bls.n	80044c6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	e003      	b.n	80044ce <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044cc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d059      	beq.n	800458c <vTaskPriorityDisinheritAfterTimeout+0x110>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d153      	bne.n	800458c <vTaskPriorityDisinheritAfterTimeout+0x110>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044e4:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10a      	bne.n	8004504 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	60bb      	str	r3, [r7, #8]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	db04      	blt.n	8004522 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f1c3 0207 	rsb	r2, r3, #7
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	6959      	ldr	r1, [r3, #20]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4a19      	ldr	r2, [pc, #100]	; (8004598 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004532:	4413      	add	r3, r2
 8004534:	4299      	cmp	r1, r3
 8004536:	d129      	bne.n	800458c <vTaskPriorityDisinheritAfterTimeout+0x110>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	3304      	adds	r3, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f7fe f96d 	bl	800281c <uxListRemove>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <vTaskPriorityDisinheritAfterTimeout+0xe2>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	2201      	movs	r2, #1
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43da      	mvns	r2, r3
 8004554:	4b11      	ldr	r3, [pc, #68]	; (800459c <vTaskPriorityDisinheritAfterTimeout+0x120>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4013      	ands	r3, r2
 800455a:	4a10      	ldr	r2, [pc, #64]	; (800459c <vTaskPriorityDisinheritAfterTimeout+0x120>)
 800455c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	2201      	movs	r2, #1
 8004564:	409a      	lsls	r2, r3
 8004566:	4b0d      	ldr	r3, [pc, #52]	; (800459c <vTaskPriorityDisinheritAfterTimeout+0x120>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4313      	orrs	r3, r2
 800456c:	4a0b      	ldr	r2, [pc, #44]	; (800459c <vTaskPriorityDisinheritAfterTimeout+0x120>)
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4a06      	ldr	r2, [pc, #24]	; (8004598 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800457e:	441a      	add	r2, r3
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7fe f8eb 	bl	8002762 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800458c:	bf00      	nop
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	2000367c 	.word	0x2000367c
 8004598:	20003680 	.word	0x20003680
 800459c:	20003784 	.word	0x20003784

080045a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80045a4:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <pvTaskIncrementMutexHeldCount+0x28>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d006      	beq.n	80045ba <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <pvTaskIncrementMutexHeldCount+0x28>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80045b4:	3201      	adds	r2, #1
 80045b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		}

		return pxCurrentTCB;
 80045ba:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <pvTaskIncrementMutexHeldCount+0x28>)
 80045bc:	681b      	ldr	r3, [r3, #0]
	}
 80045be:	4618      	mov	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	2000367c 	.word	0x2000367c

080045cc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80045da:	f000 ff2b 	bl	8005434 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80045de:	4b29      	ldr	r3, [pc, #164]	; (8004684 <xTaskNotifyWait+0xb8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d01c      	beq.n	8004626 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80045ec:	4b25      	ldr	r3, [pc, #148]	; (8004684 <xTaskNotifyWait+0xb8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	43d2      	mvns	r2, r2
 80045f8:	400a      	ands	r2, r1
 80045fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80045fe:	4b21      	ldr	r3, [pc, #132]	; (8004684 <xTaskNotifyWait+0xb8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800460e:	2101      	movs	r1, #1
 8004610:	6838      	ldr	r0, [r7, #0]
 8004612:	f000 f9dd 	bl	80049d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004616:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <xTaskNotifyWait+0xbc>)
 8004618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004626:	f000 ff35 	bl	8005494 <vPortExitCritical>

		taskENTER_CRITICAL();
 800462a:	f000 ff03 	bl	8005434 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004634:	4b13      	ldr	r3, [pc, #76]	; (8004684 <xTaskNotifyWait+0xb8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <xTaskNotifyWait+0xb8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d002      	beq.n	8004654 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e00a      	b.n	800466a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <xTaskNotifyWait+0xb8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	43d2      	mvns	r2, r2
 8004660:	400a      	ands	r2, r1
 8004662:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <xTaskNotifyWait+0xb8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 8004674:	f000 ff0e 	bl	8005494 <vPortExitCritical>

		return xReturn;
 8004678:	697b      	ldr	r3, [r7, #20]
	}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	2000367c 	.word	0x2000367c
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800469c:	2301      	movs	r3, #1
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <xTaskGenericNotify+0x30>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	61bb      	str	r3, [r7, #24]
}
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80046c0:	f000 feb8 	bl	8005434 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80046da:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d82d      	bhi.n	8004746 <xTaskGenericNotify+0xba>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <xTaskGenericNotify+0x64>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004769 	.word	0x08004769
 80046f4:	08004705 	.word	0x08004705
 80046f8:	08004717 	.word	0x08004717
 80046fc:	08004727 	.word	0x08004727
 8004700:	08004731 	.word	0x08004731
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	431a      	orrs	r2, r3
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8004714:	e02b      	b.n	800476e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8004724:	e023      	b.n	800476e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800472e:	e01e      	b.n	800476e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004730:	7ffb      	ldrb	r3, [r7, #31]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d004      	beq.n	8004740 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800473e:	e016      	b.n	800476e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8004740:	2300      	movs	r3, #0
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004744:	e013      	b.n	800476e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d00c      	beq.n	800476c <xTaskGenericNotify+0xe0>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	617b      	str	r3, [r7, #20]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <xTaskGenericNotify+0xda>
					break;
 8004768:	bf00      	nop
 800476a:	e000      	b.n	800476e <xTaskGenericNotify+0xe2>

					break;
 800476c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800476e:	7ffb      	ldrb	r3, [r7, #31]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d139      	bne.n	80047e8 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	3304      	adds	r3, #4
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe f84f 	bl	800281c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	2201      	movs	r2, #1
 8004784:	409a      	lsls	r2, r3
 8004786:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <xTaskGenericNotify+0x16c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <xTaskGenericNotify+0x16c>)
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4a17      	ldr	r2, [pc, #92]	; (80047fc <xTaskGenericNotify+0x170>)
 800479e:	441a      	add	r2, r3
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f7fd ffdb 	bl	8002762 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <xTaskGenericNotify+0x13e>
	__asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	613b      	str	r3, [r7, #16]
}
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <xTaskGenericNotify+0x174>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d907      	bls.n	80047e8 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <xTaskGenericNotify+0x178>)
 80047da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80047e8:	f000 fe54 	bl	8005494 <vPortExitCritical>

		return xReturn;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3728      	adds	r7, #40	; 0x28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20003784 	.word	0x20003784
 80047fc:	20003680 	.word	0x20003680
 8004800:	2000367c 	.word	0x2000367c
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08e      	sub	sp, #56	; 0x38
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004818:	2301      	movs	r3, #1
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004838:	f000 fede 	bl	80055f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004840:	f3ef 8211 	mrs	r2, BASEPRI
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	623a      	str	r2, [r7, #32]
 8004856:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004858:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	2202      	movs	r2, #2
 800487a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d82f      	bhi.n	80048e4 <xTaskGenericNotifyFromISR+0xdc>
 8004884:	a201      	add	r2, pc, #4	; (adr r2, 800488c <xTaskGenericNotifyFromISR+0x84>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	08004907 	.word	0x08004907
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048b3 	.word	0x080048b3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048cd 	.word	0x080048cd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80048b0:	e02c      	b.n	800490c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80048c0:	e024      	b.n	800490c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 80048ca:	e01f      	b.n	800490c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80048cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d004      	beq.n	80048de <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80048dc:	e016      	b.n	800490c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80048de:	2300      	movs	r3, #0
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80048e2:	e013      	b.n	800490c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d00c      	beq.n	800490a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	61bb      	str	r3, [r7, #24]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8004906:	bf00      	nop
 8004908:	e000      	b.n	800490c <xTaskGenericNotifyFromISR+0x104>
					break;
 800490a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800490c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004910:	2b01      	cmp	r3, #1
 8004912:	d145      	bne.n	80049a0 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	617b      	str	r3, [r7, #20]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004932:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <xTaskGenericNotifyFromISR+0x1b0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11c      	bne.n	8004974 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	3304      	adds	r3, #4
 800493e:	4618      	mov	r0, r3
 8004940:	f7fd ff6c 	bl	800281c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	2201      	movs	r2, #1
 800494a:	409a      	lsls	r2, r3
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <xTaskGenericNotifyFromISR+0x1b4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4313      	orrs	r3, r2
 8004952:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <xTaskGenericNotifyFromISR+0x1b4>)
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <xTaskGenericNotifyFromISR+0x1b8>)
 8004964:	441a      	add	r2, r3
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	3304      	adds	r3, #4
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f7fd fef8 	bl	8002762 <vListInsertEnd>
 8004972:	e005      	b.n	8004980 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	3318      	adds	r3, #24
 8004978:	4619      	mov	r1, r3
 800497a:	4812      	ldr	r0, [pc, #72]	; (80049c4 <xTaskGenericNotifyFromISR+0x1bc>)
 800497c:	f7fd fef1 	bl	8002762 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004984:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <xTaskGenericNotifyFromISR+0x1c0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	429a      	cmp	r2, r3
 800498c:	d908      	bls.n	80049a0 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800498e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <xTaskGenericNotifyFromISR+0x1c4>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f383 8811 	msr	BASEPRI, r3
}
 80049aa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3738      	adds	r7, #56	; 0x38
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200037a4 	.word	0x200037a4
 80049bc:	20003784 	.word	0x20003784
 80049c0:	20003680 	.word	0x20003680
 80049c4:	2000373c 	.word	0x2000373c
 80049c8:	2000367c 	.word	0x2000367c
 80049cc:	20003790 	.word	0x20003790

080049d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049da:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <prvAddCurrentTaskToDelayedList+0xb0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049e0:	4b28      	ldr	r3, [pc, #160]	; (8004a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd ff18 	bl	800281c <uxListRemove>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80049f2:	4b24      	ldr	r3, [pc, #144]	; (8004a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	2201      	movs	r2, #1
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43da      	mvns	r2, r3
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4013      	ands	r3, r2
 8004a06:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d10a      	bne.n	8004a28 <prvAddCurrentTaskToDelayedList+0x58>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d007      	beq.n	8004a28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a18:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	481a      	ldr	r0, [pc, #104]	; (8004a8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a22:	f7fd fe9e 	bl	8002762 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a26:	e026      	b.n	8004a76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a30:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d209      	bcs.n	8004a54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f7fd feac 	bl	80027aa <vListInsert>
}
 8004a52:	e010      	b.n	8004a76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a54:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f7fd fea2 	bl	80027aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d202      	bcs.n	8004a76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a70:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6013      	str	r3, [r2, #0]
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20003780 	.word	0x20003780
 8004a84:	2000367c 	.word	0x2000367c
 8004a88:	20003784 	.word	0x20003784
 8004a8c:	20003768 	.word	0x20003768
 8004a90:	20003738 	.word	0x20003738
 8004a94:	20003734 	.word	0x20003734
 8004a98:	2000379c 	.word	0x2000379c

08004a9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	; 0x28
 8004aa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004aa6:	f000 fb5b 	bl	8005160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004aaa:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <xTimerCreateTimerTask+0x80>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d021      	beq.n	8004af6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004aba:	1d3a      	adds	r2, r7, #4
 8004abc:	f107 0108 	add.w	r1, r7, #8
 8004ac0:	f107 030c 	add.w	r3, r7, #12
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fb fd1f 	bl	8000508 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	9202      	str	r2, [sp, #8]
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	460a      	mov	r2, r1
 8004adc:	4910      	ldr	r1, [pc, #64]	; (8004b20 <xTimerCreateTimerTask+0x84>)
 8004ade:	4811      	ldr	r0, [pc, #68]	; (8004b24 <xTimerCreateTimerTask+0x88>)
 8004ae0:	f7fe fe10 	bl	8003704 <xTaskCreateStatic>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <xTimerCreateTimerTask+0x8c>)
 8004ae8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004aea:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <xTimerCreateTimerTask+0x8c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004af2:	2301      	movs	r3, #1
 8004af4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	613b      	str	r3, [r7, #16]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b12:	697b      	ldr	r3, [r7, #20]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	200037d8 	.word	0x200037d8
 8004b20:	0800591c 	.word	0x0800591c
 8004b24:	08004d55 	.word	0x08004d55
 8004b28:	200037dc 	.word	0x200037dc

08004b2c <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004b3a:	2328      	movs	r3, #40	; 0x28
 8004b3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b28      	cmp	r3, #40	; 0x28
 8004b42:	d00a      	beq.n	8004b5a <xTimerCreateStatic+0x2e>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	61bb      	str	r3, [r7, #24]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <xTimerCreateStatic+0x4c>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	617b      	str	r3, [r7, #20]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00d      	beq.n	8004b9e <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f805 	bl	8004ba8 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
	}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3720      	adds	r7, #32
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	617b      	str	r3, [r7, #20]
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01e      	beq.n	8004c16 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004bd8:	f000 fac2 	bl	8005160 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fd fda5 	bl	8002748 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c0a:	f043 0304 	orr.w	r3, r3, #4
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004c16:	bf00      	nop
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	; 0x28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	623b      	str	r3, [r7, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c4e:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <xTimerGenericCommand+0x98>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d02a      	beq.n	8004cac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b05      	cmp	r3, #5
 8004c66:	dc18      	bgt.n	8004c9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c68:	f7ff fae8 	bl	800423c <xTaskGetSchedulerState>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d109      	bne.n	8004c86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c72:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <xTimerGenericCommand+0x98>)
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	f107 0114 	add.w	r1, r7, #20
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7e:	f7fd ff29 	bl	8002ad4 <xQueueGenericSend>
 8004c82:	6278      	str	r0, [r7, #36]	; 0x24
 8004c84:	e012      	b.n	8004cac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <xTimerGenericCommand+0x98>)
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	f107 0114 	add.w	r1, r7, #20
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2200      	movs	r2, #0
 8004c92:	f7fd ff1f 	bl	8002ad4 <xQueueGenericSend>
 8004c96:	6278      	str	r0, [r7, #36]	; 0x24
 8004c98:	e008      	b.n	8004cac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <xTimerGenericCommand+0x98>)
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	f107 0114 	add.w	r1, r7, #20
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	f7fe f813 	bl	8002cd0 <xQueueGenericSendFromISR>
 8004caa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200037d8 	.word	0x200037d8

08004cbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc6:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <prvProcessExpiredTimer+0x94>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fd fda1 	bl	800281c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d022      	beq.n	8004d2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	18d1      	adds	r1, r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	6978      	ldr	r0, [r7, #20]
 8004cf6:	f000 f8d1 	bl	8004e9c <prvInsertTimerInActiveList>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01f      	beq.n	8004d40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d00:	2300      	movs	r3, #0
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2300      	movs	r3, #0
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	2100      	movs	r1, #0
 8004d0a:	6978      	ldr	r0, [r7, #20]
 8004d0c:	f7ff ff88 	bl	8004c20 <xTimerGenericCommand>
 8004d10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d113      	bne.n	8004d40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	60fb      	str	r3, [r7, #12]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	6978      	ldr	r0, [r7, #20]
 8004d46:	4798      	blx	r3
}
 8004d48:	bf00      	nop
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	200037d0 	.word	0x200037d0

08004d54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d5c:	f107 0308 	add.w	r3, r7, #8
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 f857 	bl	8004e14 <prvGetNextExpireTime>
 8004d66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f803 	bl	8004d78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d72:	f000 f8d5 	bl	8004f20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d76:	e7f1      	b.n	8004d5c <prvTimerTask+0x8>

08004d78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d82:	f7fe fea7 	bl	8003ad4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d86:	f107 0308 	add.w	r3, r7, #8
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f866 	bl	8004e5c <prvSampleTimeNow>
 8004d90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d130      	bne.n	8004dfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <prvProcessTimerOrBlockTask+0x3c>
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d806      	bhi.n	8004db4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004da6:	f7fe fea3 	bl	8003af0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004daa:	68f9      	ldr	r1, [r7, #12]
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff85 	bl	8004cbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004db2:	e024      	b.n	8004dfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dba:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <prvProcessTimerOrBlockTask+0x90>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <prvProcessTimerOrBlockTask+0x50>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <prvProcessTimerOrBlockTask+0x52>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <prvProcessTimerOrBlockTask+0x94>)
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f7fe fc5f 	bl	800369c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004dde:	f7fe fe87 	bl	8003af0 <xTaskResumeAll>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <prvProcessTimerOrBlockTask+0x98>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
}
 8004df8:	e001      	b.n	8004dfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dfa:	f7fe fe79 	bl	8003af0 <xTaskResumeAll>
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200037d4 	.word	0x200037d4
 8004e0c:	200037d8 	.word	0x200037d8
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e1c:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <prvGetNextExpireTime+0x44>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <prvGetNextExpireTime+0x16>
 8004e26:	2201      	movs	r2, #1
 8004e28:	e000      	b.n	8004e2c <prvGetNextExpireTime+0x18>
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <prvGetNextExpireTime+0x44>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e001      	b.n	8004e48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e48:	68fb      	ldr	r3, [r7, #12]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	200037d0 	.word	0x200037d0

08004e5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e64:	f7fe fee0 	bl	8003c28 <xTaskGetTickCount>
 8004e68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <prvSampleTimeNow+0x3c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d205      	bcs.n	8004e80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e74:	f000 f910 	bl	8005098 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e002      	b.n	8004e86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e86:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <prvSampleTimeNow+0x3c>)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	200037e0 	.word	0x200037e0

08004e9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d812      	bhi.n	8004ee8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	1ad2      	subs	r2, r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e01b      	b.n	8004f0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ed6:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <prvInsertTimerInActiveList+0x7c>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f7fd fc62 	bl	80027aa <vListInsert>
 8004ee6:	e012      	b.n	8004f0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d206      	bcs.n	8004efe <prvInsertTimerInActiveList+0x62>
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d302      	bcc.n	8004efe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e007      	b.n	8004f0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <prvInsertTimerInActiveList+0x80>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f7fd fc4e 	bl	80027aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f0e:	697b      	ldr	r3, [r7, #20]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	200037d4 	.word	0x200037d4
 8004f1c:	200037d0 	.word	0x200037d0

08004f20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	; 0x30
 8004f24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f26:	e0a3      	b.n	8005070 <prvProcessReceivedCommands+0x150>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f2c0 809f 	blt.w	800506e <prvProcessReceivedCommands+0x14e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d004      	beq.n	8004f46 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fd fc6b 	bl	800281c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ff87 	bl	8004e5c <prvSampleTimeNow>
 8004f4e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b09      	cmp	r3, #9
 8004f54:	f200 808c 	bhi.w	8005070 <prvProcessReceivedCommands+0x150>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <prvProcessReceivedCommands+0x40>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f89 	.word	0x08004f89
 8004f64:	08004f89 	.word	0x08004f89
 8004f68:	08004f89 	.word	0x08004f89
 8004f6c:	08004ffd 	.word	0x08004ffd
 8004f70:	08005011 	.word	0x08005011
 8004f74:	0800505b 	.word	0x0800505b
 8004f78:	08004f89 	.word	0x08004f89
 8004f7c:	08004f89 	.word	0x08004f89
 8004f80:	08004ffd 	.word	0x08004ffd
 8004f84:	08005011 	.word	0x08005011
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	18d1      	adds	r1, r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a3a      	ldr	r2, [r7, #32]
 8004fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fa8:	f7ff ff78 	bl	8004e9c <prvInsertTimerInActiveList>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d05e      	beq.n	8005070 <prvProcessReceivedCommands+0x150>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d053      	beq.n	8005070 <prvProcessReceivedCommands+0x150>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	441a      	add	r2, r3
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fda:	f7ff fe21 	bl	8004c20 <xTimerGenericCommand>
 8004fde:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d144      	bne.n	8005070 <prvProcessReceivedCommands+0x150>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	61bb      	str	r3, [r7, #24]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800500e:	e02f      	b.n	8005070 <prvProcessReceivedCommands+0x150>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	617b      	str	r3, [r7, #20]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	18d1      	adds	r1, r2, r3
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	6a3a      	ldr	r2, [r7, #32]
 8005052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005054:	f7ff ff22 	bl	8004e9c <prvInsertTimerInActiveList>
					break;
 8005058:	e00a      	b.n	8005070 <prvProcessReceivedCommands+0x150>
					{
						/* If dynamic allocation is not enabled, the memory
						could not have been dynamically allocated. So there is
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	b2da      	uxtb	r2, r3
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800506c:	e000      	b.n	8005070 <prvProcessReceivedCommands+0x150>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800506e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005070:	4b08      	ldr	r3, [pc, #32]	; (8005094 <prvProcessReceivedCommands+0x174>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f107 0108 	add.w	r1, r7, #8
 8005078:	2200      	movs	r2, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f7fd ff50 	bl	8002f20 <xQueueReceive>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	f47f af50 	bne.w	8004f28 <prvProcessReceivedCommands+0x8>
	}
}
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	3728      	adds	r7, #40	; 0x28
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	200037d8 	.word	0x200037d8

08005098 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800509e:	e048      	b.n	8005132 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050a0:	4b2d      	ldr	r3, [pc, #180]	; (8005158 <prvSwitchTimerLists+0xc0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050aa:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <prvSwitchTimerLists+0xc0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fd fbaf 	bl	800281c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02e      	beq.n	8005132 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4413      	add	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d90e      	bls.n	8005104 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050f2:	4b19      	ldr	r3, [pc, #100]	; (8005158 <prvSwitchTimerLists+0xc0>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fd fb54 	bl	80027aa <vListInsert>
 8005102:	e016      	b.n	8005132 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005104:	2300      	movs	r3, #0
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	2100      	movs	r1, #0
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fd86 	bl	8004c20 <xTimerGenericCommand>
 8005114:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	603b      	str	r3, [r7, #0]
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <prvSwitchTimerLists+0xc0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1b1      	bne.n	80050a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <prvSwitchTimerLists+0xc0>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <prvSwitchTimerLists+0xc4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a04      	ldr	r2, [pc, #16]	; (8005158 <prvSwitchTimerLists+0xc0>)
 8005148:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800514a:	4a04      	ldr	r2, [pc, #16]	; (800515c <prvSwitchTimerLists+0xc4>)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	6013      	str	r3, [r2, #0]
}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	200037d0 	.word	0x200037d0
 800515c:	200037d4 	.word	0x200037d4

08005160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005166:	f000 f965 	bl	8005434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d120      	bne.n	80051b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005172:	4814      	ldr	r0, [pc, #80]	; (80051c4 <prvCheckForValidListAndQueue+0x64>)
 8005174:	f7fd fac8 	bl	8002708 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005178:	4813      	ldr	r0, [pc, #76]	; (80051c8 <prvCheckForValidListAndQueue+0x68>)
 800517a:	f7fd fac5 	bl	8002708 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <prvCheckForValidListAndQueue+0x6c>)
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <prvCheckForValidListAndQueue+0x64>)
 8005182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <prvCheckForValidListAndQueue+0x70>)
 8005186:	4a10      	ldr	r2, [pc, #64]	; (80051c8 <prvCheckForValidListAndQueue+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800518a:	2300      	movs	r3, #0
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <prvCheckForValidListAndQueue+0x74>)
 8005190:	4a11      	ldr	r2, [pc, #68]	; (80051d8 <prvCheckForValidListAndQueue+0x78>)
 8005192:	210c      	movs	r1, #12
 8005194:	200a      	movs	r0, #10
 8005196:	f7fd fbd3 	bl	8002940 <xQueueGenericCreateStatic>
 800519a:	4603      	mov	r3, r0
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 800519e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	490b      	ldr	r1, [pc, #44]	; (80051dc <prvCheckForValidListAndQueue+0x7c>)
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe fa4a 	bl	8003648 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051b4:	f000 f96e 	bl	8005494 <vPortExitCritical>
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	200037d8 	.word	0x200037d8
 80051c4:	200037a8 	.word	0x200037a8
 80051c8:	200037bc 	.word	0x200037bc
 80051cc:	200037d0 	.word	0x200037d0
 80051d0:	200037d4 	.word	0x200037d4
 80051d4:	2000385c 	.word	0x2000385c
 80051d8:	200037e4 	.word	0x200037e4
 80051dc:	08005924 	.word	0x08005924

080051e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b04      	subs	r3, #4
 80051f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3b04      	subs	r3, #4
 80051fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b04      	subs	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005210:	4a0c      	ldr	r2, [pc, #48]	; (8005244 <pxPortInitialiseStack+0x64>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b14      	subs	r3, #20
 800521a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b04      	subs	r3, #4
 8005226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f06f 0202 	mvn.w	r2, #2
 800522e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3b20      	subs	r3, #32
 8005234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	08005249 	.word	0x08005249

08005248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800524e:	2300      	movs	r3, #0
 8005250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <prvTaskExitError+0x54>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525a:	d00a      	beq.n	8005272 <prvTaskExitError+0x2a>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60fb      	str	r3, [r7, #12]
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <prvTaskExitError+0x28>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	60bb      	str	r3, [r7, #8]
}
 8005284:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005286:	bf00      	nop
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0fc      	beq.n	8005288 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	2000000c 	.word	0x2000000c

080052a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <pxCurrentTCBConst2>)
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	6808      	ldr	r0, [r1, #0]
 80052a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052aa:	f380 8809 	msr	PSP, r0
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f380 8811 	msr	BASEPRI, r0
 80052ba:	4770      	bx	lr
 80052bc:	f3af 8000 	nop.w

080052c0 <pxCurrentTCBConst2>:
 80052c0:	2000367c 	.word	0x2000367c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop

080052c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052c8:	4808      	ldr	r0, [pc, #32]	; (80052ec <prvPortStartFirstTask+0x24>)
 80052ca:	6800      	ldr	r0, [r0, #0]
 80052cc:	6800      	ldr	r0, [r0, #0]
 80052ce:	f380 8808 	msr	MSP, r0
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8814 	msr	CONTROL, r0
 80052da:	b662      	cpsie	i
 80052dc:	b661      	cpsie	f
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	df00      	svc	0
 80052e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ea:	bf00      	nop
 80052ec:	e000ed08 	.word	0xe000ed08

080052f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052f6:	4b46      	ldr	r3, [pc, #280]	; (8005410 <xPortStartScheduler+0x120>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a46      	ldr	r2, [pc, #280]	; (8005414 <xPortStartScheduler+0x124>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10a      	bne.n	8005316 <xPortStartScheduler+0x26>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	613b      	str	r3, [r7, #16]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005316:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <xPortStartScheduler+0x120>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a3f      	ldr	r2, [pc, #252]	; (8005418 <xPortStartScheduler+0x128>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10a      	bne.n	8005336 <xPortStartScheduler+0x46>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005336:	4b39      	ldr	r3, [pc, #228]	; (800541c <xPortStartScheduler+0x12c>)
 8005338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	22ff      	movs	r2, #255	; 0xff
 8005346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005358:	b2da      	uxtb	r2, r3
 800535a:	4b31      	ldr	r3, [pc, #196]	; (8005420 <xPortStartScheduler+0x130>)
 800535c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800535e:	4b31      	ldr	r3, [pc, #196]	; (8005424 <xPortStartScheduler+0x134>)
 8005360:	2207      	movs	r2, #7
 8005362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005364:	e009      	b.n	800537a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005366:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <xPortStartScheduler+0x134>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3b01      	subs	r3, #1
 800536c:	4a2d      	ldr	r2, [pc, #180]	; (8005424 <xPortStartScheduler+0x134>)
 800536e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800537a:	78fb      	ldrb	r3, [r7, #3]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d0ef      	beq.n	8005366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005386:	4b27      	ldr	r3, [pc, #156]	; (8005424 <xPortStartScheduler+0x134>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1c3 0307 	rsb	r3, r3, #7
 800538e:	2b04      	cmp	r3, #4
 8005390:	d00a      	beq.n	80053a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	60bb      	str	r3, [r7, #8]
}
 80053a4:	bf00      	nop
 80053a6:	e7fe      	b.n	80053a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053a8:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <xPortStartScheduler+0x134>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <xPortStartScheduler+0x134>)
 80053b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053b2:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <xPortStartScheduler+0x134>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053ba:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <xPortStartScheduler+0x134>)
 80053bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <xPortStartScheduler+0x138>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <xPortStartScheduler+0x138>)
 80053cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <xPortStartScheduler+0x138>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a14      	ldr	r2, [pc, #80]	; (8005428 <xPortStartScheduler+0x138>)
 80053d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053de:	f000 f8dd 	bl	800559c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <xPortStartScheduler+0x13c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053e8:	f000 f8fc 	bl	80055e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053ec:	4b10      	ldr	r3, [pc, #64]	; (8005430 <xPortStartScheduler+0x140>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0f      	ldr	r2, [pc, #60]	; (8005430 <xPortStartScheduler+0x140>)
 80053f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053f8:	f7ff ff66 	bl	80052c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053fc:	f7fe fcdc 	bl	8003db8 <vTaskSwitchContext>
	prvTaskExitError();
 8005400:	f7ff ff22 	bl	8005248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	e000ed00 	.word	0xe000ed00
 8005414:	410fc271 	.word	0x410fc271
 8005418:	410fc270 	.word	0x410fc270
 800541c:	e000e400 	.word	0xe000e400
 8005420:	200038a4 	.word	0x200038a4
 8005424:	200038a8 	.word	0x200038a8
 8005428:	e000ed20 	.word	0xe000ed20
 800542c:	2000000c 	.word	0x2000000c
 8005430:	e000ef34 	.word	0xe000ef34

08005434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	607b      	str	r3, [r7, #4]
}
 800544c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800544e:	4b0f      	ldr	r3, [pc, #60]	; (800548c <vPortEnterCritical+0x58>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	4a0d      	ldr	r2, [pc, #52]	; (800548c <vPortEnterCritical+0x58>)
 8005456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <vPortEnterCritical+0x58>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10f      	bne.n	8005480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <vPortEnterCritical+0x5c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <vPortEnterCritical+0x4c>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	603b      	str	r3, [r7, #0]
}
 800547c:	bf00      	nop
 800547e:	e7fe      	b.n	800547e <vPortEnterCritical+0x4a>
	}
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	2000000c 	.word	0x2000000c
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800549a:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <vPortExitCritical+0x50>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <vPortExitCritical+0x24>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	607b      	str	r3, [r7, #4]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <vPortExitCritical+0x50>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3b01      	subs	r3, #1
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <vPortExitCritical+0x50>)
 80054c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054c2:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <vPortExitCritical+0x50>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d105      	bne.n	80054d6 <vPortExitCritical+0x42>
 80054ca:	2300      	movs	r3, #0
 80054cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	f383 8811 	msr	BASEPRI, r3
}
 80054d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	2000000c 	.word	0x2000000c
	...

080054f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054f0:	f3ef 8009 	mrs	r0, PSP
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	4b15      	ldr	r3, [pc, #84]	; (8005550 <pxCurrentTCBConst>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	f01e 0f10 	tst.w	lr, #16
 8005500:	bf08      	it	eq
 8005502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550a:	6010      	str	r0, [r2, #0]
 800550c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005514:	f380 8811 	msr	BASEPRI, r0
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f7fe fc4a 	bl	8003db8 <vTaskSwitchContext>
 8005524:	f04f 0000 	mov.w	r0, #0
 8005528:	f380 8811 	msr	BASEPRI, r0
 800552c:	bc09      	pop	{r0, r3}
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	6808      	ldr	r0, [r1, #0]
 8005532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005536:	f01e 0f10 	tst.w	lr, #16
 800553a:	bf08      	it	eq
 800553c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005540:	f380 8809 	msr	PSP, r0
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	f3af 8000 	nop.w

08005550 <pxCurrentTCBConst>:
 8005550:	2000367c 	.word	0x2000367c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop

08005558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
}
 8005570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005572:	f7fe fb69 	bl	8003c48 <xTaskIncrementTick>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <SysTick_Handler+0x40>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	2300      	movs	r3, #0
 8005586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	f383 8811 	msr	BASEPRI, r3
}
 800558e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <vPortSetupTimerInterrupt+0x34>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <vPortSetupTimerInterrupt+0x38>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <vPortSetupTimerInterrupt+0x3c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <vPortSetupTimerInterrupt+0x40>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	099b      	lsrs	r3, r3, #6
 80055b8:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <vPortSetupTimerInterrupt+0x44>)
 80055ba:	3b01      	subs	r3, #1
 80055bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055be:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <vPortSetupTimerInterrupt+0x34>)
 80055c0:	2207      	movs	r2, #7
 80055c2:	601a      	str	r2, [r3, #0]
}
 80055c4:	bf00      	nop
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	e000e010 	.word	0xe000e010
 80055d4:	e000e018 	.word	0xe000e018
 80055d8:	20000000 	.word	0x20000000
 80055dc:	10624dd3 	.word	0x10624dd3
 80055e0:	e000e014 	.word	0xe000e014

080055e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055f4 <vPortEnableVFP+0x10>
 80055e8:	6801      	ldr	r1, [r0, #0]
 80055ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055ee:	6001      	str	r1, [r0, #0]
 80055f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055f2:	bf00      	nop
 80055f4:	e000ed88 	.word	0xe000ed88

080055f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055fe:	f3ef 8305 	mrs	r3, IPSR
 8005602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b0f      	cmp	r3, #15
 8005608:	d914      	bls.n	8005634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800560a:	4a17      	ldr	r2, [pc, #92]	; (8005668 <vPortValidateInterruptPriority+0x70>)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005614:	4b15      	ldr	r3, [pc, #84]	; (800566c <vPortValidateInterruptPriority+0x74>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	7afa      	ldrb	r2, [r7, #11]
 800561a:	429a      	cmp	r2, r3
 800561c:	d20a      	bcs.n	8005634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005634:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <vPortValidateInterruptPriority+0x78>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800563c:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <vPortValidateInterruptPriority+0x7c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d90a      	bls.n	800565a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	603b      	str	r3, [r7, #0]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <vPortValidateInterruptPriority+0x60>
	}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	e000e3f0 	.word	0xe000e3f0
 800566c:	200038a4 	.word	0x200038a4
 8005670:	e000ed0c 	.word	0xe000ed0c
 8005674:	200038a8 	.word	0x200038a8

08005678 <__libc_init_array>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4d0d      	ldr	r5, [pc, #52]	; (80056b0 <__libc_init_array+0x38>)
 800567c:	4c0d      	ldr	r4, [pc, #52]	; (80056b4 <__libc_init_array+0x3c>)
 800567e:	1b64      	subs	r4, r4, r5
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	2600      	movs	r6, #0
 8005684:	42a6      	cmp	r6, r4
 8005686:	d109      	bne.n	800569c <__libc_init_array+0x24>
 8005688:	4d0b      	ldr	r5, [pc, #44]	; (80056b8 <__libc_init_array+0x40>)
 800568a:	4c0c      	ldr	r4, [pc, #48]	; (80056bc <__libc_init_array+0x44>)
 800568c:	f000 f82e 	bl	80056ec <_init>
 8005690:	1b64      	subs	r4, r4, r5
 8005692:	10a4      	asrs	r4, r4, #2
 8005694:	2600      	movs	r6, #0
 8005696:	42a6      	cmp	r6, r4
 8005698:	d105      	bne.n	80056a6 <__libc_init_array+0x2e>
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a0:	4798      	blx	r3
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7ee      	b.n	8005684 <__libc_init_array+0xc>
 80056a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056aa:	4798      	blx	r3
 80056ac:	3601      	adds	r6, #1
 80056ae:	e7f2      	b.n	8005696 <__libc_init_array+0x1e>
 80056b0:	0800594c 	.word	0x0800594c
 80056b4:	0800594c 	.word	0x0800594c
 80056b8:	0800594c 	.word	0x0800594c
 80056bc:	08005950 	.word	0x08005950

080056c0 <memcpy>:
 80056c0:	440a      	add	r2, r1
 80056c2:	4291      	cmp	r1, r2
 80056c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c8:	d100      	bne.n	80056cc <memcpy+0xc>
 80056ca:	4770      	bx	lr
 80056cc:	b510      	push	{r4, lr}
 80056ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d6:	4291      	cmp	r1, r2
 80056d8:	d1f9      	bne.n	80056ce <memcpy+0xe>
 80056da:	bd10      	pop	{r4, pc}

080056dc <memset>:
 80056dc:	4402      	add	r2, r0
 80056de:	4603      	mov	r3, r0
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d100      	bne.n	80056e6 <memset+0xa>
 80056e4:	4770      	bx	lr
 80056e6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ea:	e7f9      	b.n	80056e0 <memset+0x4>

080056ec <_init>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	bf00      	nop
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr

080056f8 <_fini>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	bf00      	nop
 80056fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fe:	bc08      	pop	{r3}
 8005700:	469e      	mov	lr, r3
 8005702:	4770      	bx	lr
