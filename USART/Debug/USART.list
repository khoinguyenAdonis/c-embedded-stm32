
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003570  08003570  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003578  08003578  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800357c  0800357c  0001357c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000015c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006f43  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a4a  00000000  00000000  00026fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  00028a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e8  00000000  00000000  00029200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222a4  00000000  00000000  000298e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000083e6  00000000  00000000  0004bb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca5a6  00000000  00000000  00053f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e518  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002210  00000000  00000000  0011e568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080034f8 	.word	0x080034f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080034f8 	.word	0x080034f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <__NVIC_GetPriorityGrouping+0x18>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	f003 0307 	and.w	r3, r3, #7
}
 8000592:	4618      	mov	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	db0b      	blt.n	80005ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 021f 	and.w	r2, r3, #31
 80005b8:	4907      	ldr	r1, [pc, #28]	; (80005d8 <__NVIC_EnableIRQ+0x38>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	2001      	movs	r0, #1
 80005c2:	fa00 f202 	lsl.w	r2, r0, r2
 80005c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000e100 	.word	0xe000e100

080005dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db0a      	blt.n	8000606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	490c      	ldr	r1, [pc, #48]	; (8000628 <__NVIC_SetPriority+0x4c>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	0112      	lsls	r2, r2, #4
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	440b      	add	r3, r1
 8000600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000604:	e00a      	b.n	800061c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4908      	ldr	r1, [pc, #32]	; (800062c <__NVIC_SetPriority+0x50>)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	3b04      	subs	r3, #4
 8000614:	0112      	lsls	r2, r2, #4
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	440b      	add	r3, r1
 800061a:	761a      	strb	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000630:	b480      	push	{r7}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	f1c3 0307 	rsb	r3, r3, #7
 800064a:	2b04      	cmp	r3, #4
 800064c:	bf28      	it	cs
 800064e:	2304      	movcs	r3, #4
 8000650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3304      	adds	r3, #4
 8000656:	2b06      	cmp	r3, #6
 8000658:	d902      	bls.n	8000660 <NVIC_EncodePriority+0x30>
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3b03      	subs	r3, #3
 800065e:	e000      	b.n	8000662 <NVIC_EncodePriority+0x32>
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	f04f 32ff 	mov.w	r2, #4294967295
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	43da      	mvns	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	401a      	ands	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000678:	f04f 31ff 	mov.w	r1, #4294967295
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	43d9      	mvns	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	4313      	orrs	r3, r2
         );
}
 800068a:	4618      	mov	r0, r3
 800068c:	3724      	adds	r7, #36	; 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_DMA_Init+0x6c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <MX_DMA_Init+0x6c>)
 80006a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_DMA_Init+0x6c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80006ba:	f7ff ff63 	bl	8000584 <__NVIC_GetPriorityGrouping>
 80006be:	4603      	mov	r3, r0
 80006c0:	2200      	movs	r2, #0
 80006c2:	2101      	movs	r1, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ffb3 	bl	8000630 <NVIC_EncodePriority>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4619      	mov	r1, r3
 80006ce:	2010      	movs	r0, #16
 80006d0:	f7ff ff84 	bl	80005dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006d4:	2010      	movs	r0, #16
 80006d6:	f7ff ff63 	bl	80005a0 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80006da:	f7ff ff53 	bl	8000584 <__NVIC_GetPriorityGrouping>
 80006de:	4603      	mov	r3, r0
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffa3 	bl	8000630 <NVIC_EncodePriority>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4619      	mov	r1, r3
 80006ee:	2011      	movs	r0, #17
 80006f0:	f7ff ff74 	bl	80005dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006f4:	2011      	movs	r0, #17
 80006f6:	f7ff ff53 	bl	80005a0 <__NVIC_EnableIRQ>

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_GPIO_Init+0x4c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_GPIO_Init+0x4c>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_GPIO_Init+0x4c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_GPIO_Init+0x4c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <MX_GPIO_Init+0x4c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_GPIO_Init+0x4c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fed7 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f821 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f7ff ffcf 	bl	8000708 <MX_GPIO_Init>
  MX_DMA_Init();
 800076a:	f7ff ff95 	bl	8000698 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800076e:	f000 fd71 	bl	8001254 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  config_UART();
 8000772:	f000 fe3f 	bl	80013f4 <config_UART>
  uint32_t counter=0;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	memset(str_buf,24,0x00);
    sprintf(str_buf,Len,counter++);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	461a      	mov	r2, r3
 8000782:	4907      	ldr	r1, [pc, #28]	; (80007a0 <main+0x48>)
 8000784:	4807      	ldr	r0, [pc, #28]	; (80007a4 <main+0x4c>)
 8000786:	f002 fa49 	bl	8002c1c <siprintf>
    send_data(str_buf,(uint32_t)strlen(str_buf));
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <main+0x4c>)
 800078c:	f7ff fd20 	bl	80001d0 <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	4619      	mov	r1, r3
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <main+0x4c>)
 8000796:	f000 fe5b 	bl	8001450 <send_data>
    UART_RX_Data();
 800079a:	f000 fe83 	bl	80014a4 <UART_RX_Data>
  {
 800079e:	e7ec      	b.n	800077a <main+0x22>
 80007a0:	08003510 	.word	0x08003510
 80007a4:	2000008c 	.word	0x2000008c

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2230      	movs	r2, #48	; 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fa28 	bl	8002c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	4b27      	ldr	r3, [pc, #156]	; (8000870 <SystemClock_Config+0xc8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a26      	ldr	r2, [pc, #152]	; (8000870 <SystemClock_Config+0xc8>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <SystemClock_Config+0xc8>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <SystemClock_Config+0xcc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a20      	ldr	r2, [pc, #128]	; (8000874 <SystemClock_Config+0xcc>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <SystemClock_Config+0xcc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800081c:	2332      	movs	r3, #50	; 0x32
 800081e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000824:	2304      	movs	r3, #4
 8000826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f000 ffc7 	bl	80017c0 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000838:	f000 f81e 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2101      	movs	r1, #1
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fa29 	bl	8001cb0 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000864:	f000 f808 	bl	8000878 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3750      	adds	r7, #80	; 0x50
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f003 0320 	and.w	r3, r3, #32
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	bf0c      	ite	eq
 80008e8:	2301      	moveq	r3, #1
 80008ea:	2300      	movne	r3, #0
 80008ec:	b2db      	uxtb	r3, r3
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090a:	2b40      	cmp	r3, #64	; 0x40
 800090c:	bf0c      	ite	eq
 800090e:	2301      	moveq	r3, #1
 8000910:	2300      	movne	r3, #0
 8000912:	b2db      	uxtb	r3, r3
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000930:	2b80      	cmp	r3, #128	; 0x80
 8000932:	bf0c      	ite	eq
 8000934:	2301      	moveq	r3, #1
 8000936:	2300      	movne	r3, #0
 8000938:	b2db      	uxtb	r3, r3
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f06f 0220 	mvn.w	r2, #32
 8000970:	601a      	str	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800097e:	b480      	push	{r7}
 8000980:	b089      	sub	sp, #36	; 0x24
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	330c      	adds	r3, #12
 800098a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	e853 3f00 	ldrex	r3, [r3]
 8000992:	60bb      	str	r3, [r7, #8]
   return(result);
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	330c      	adds	r3, #12
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	61ba      	str	r2, [r7, #24]
 80009a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80009a6:	6979      	ldr	r1, [r7, #20]
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	e841 2300 	strex	r3, r2, [r1]
 80009ae:	613b      	str	r3, [r7, #16]
   return(result);
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1e7      	bne.n	8000986 <LL_USART_DisableIT_TXE+0x8>
}
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	3724      	adds	r7, #36	; 0x24
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_USART_ReceiveData9>:
  * @rmtoll DR           DR            LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009d6:	b29b      	uxth	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80009f0:	78fa      	ldrb	r2, [r7, #3]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	605a      	str	r2, [r3, #4]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <NMI_Handler+0x4>

08000a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <HardFault_Handler+0x4>

08000a0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <MemManage_Handler+0x4>

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <BusFault_Handler+0x4>

08000a1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <UsageFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4e:	f000 fdb1 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_TC(USART2))
 8000a78:	4826      	ldr	r0, [pc, #152]	; (8000b14 <USART2_IRQHandler+0xa0>)
 8000a7a:	f7ff ff3e 	bl	80008fa <LL_USART_IsActiveFlag_TC>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <USART2_IRQHandler+0x16>
  {
    LL_USART_ClearFlag_TC(USART2);
 8000a84:	4823      	ldr	r0, [pc, #140]	; (8000b14 <USART2_IRQHandler+0xa0>)
 8000a86:	f7ff ff5e 	bl	8000946 <LL_USART_ClearFlag_TC>
  }
  if (LL_USART_IsActiveFlag_RXNE(USART2))
 8000a8a:	4822      	ldr	r0, [pc, #136]	; (8000b14 <USART2_IRQHandler+0xa0>)
 8000a8c:	f7ff ff22 	bl	80008d4 <LL_USART_IsActiveFlag_RXNE>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d016      	beq.n	8000ac4 <USART2_IRQHandler+0x50>
  {
	LL_USART_ClearFlag_RXNE(USART2);
 8000a96:	481f      	ldr	r0, [pc, #124]	; (8000b14 <USART2_IRQHandler+0xa0>)
 8000a98:	f7ff ff63 	bl	8000962 <LL_USART_ClearFlag_RXNE>
    //asm("nop");
    if (RX_ptr >= 128U)
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <USART2_IRQHandler+0xa4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8000aa2:	d902      	bls.n	8000aaa <USART2_IRQHandler+0x36>
    {
      RX_ptr = 0;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <USART2_IRQHandler+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
    }
    RXbuffer[RX_ptr++]=LL_USART_ReceiveData9(USART2);
 8000aaa:	481a      	ldr	r0, [pc, #104]	; (8000b14 <USART2_IRQHandler+0xa0>)
 8000aac:	f7ff ff8a 	bl	80009c4 <LL_USART_ReceiveData9>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <USART2_IRQHandler+0xa4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	4917      	ldr	r1, [pc, #92]	; (8000b18 <USART2_IRQHandler+0xa4>)
 8000abc:	600a      	str	r2, [r1, #0]
 8000abe:	b2c1      	uxtb	r1, r0
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <USART2_IRQHandler+0xa8>)
 8000ac2:	54d1      	strb	r1, [r2, r3]
  }
   if (LL_USART_IsActiveFlag_TXE(USART2))
 8000ac4:	4813      	ldr	r0, [pc, #76]	; (8000b14 <USART2_IRQHandler+0xa0>)
 8000ac6:	f7ff ff2b 	bl	8000920 <LL_USART_IsActiveFlag_TXE>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d01f      	beq.n	8000b10 <USART2_IRQHandler+0x9c>
  {
    if (write_ptr >= 128U)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <USART2_IRQHandler+0xac>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ad6:	d902      	bls.n	8000ade <USART2_IRQHandler+0x6a>
    {
      write_ptr = 0;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <USART2_IRQHandler+0xac>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
    }
    if (write_ptr < buf_ptr)
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <USART2_IRQHandler+0xac>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <USART2_IRQHandler+0xb0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d20f      	bcs.n	8000b0a <USART2_IRQHandler+0x96>
    {
      c = Databuffer[write_ptr++];
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <USART2_IRQHandler+0xac>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	490b      	ldr	r1, [pc, #44]	; (8000b20 <USART2_IRQHandler+0xac>)
 8000af2:	600a      	str	r2, [r1, #0]
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <USART2_IRQHandler+0xb4>)
 8000af6:	5cd2      	ldrb	r2, [r2, r3]
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <USART2_IRQHandler+0xb8>)
 8000afa:	701a      	strb	r2, [r3, #0]
      LL_USART_TransmitData8(USART2,c);
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <USART2_IRQHandler+0xb8>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <USART2_IRQHandler+0xa0>)
 8000b04:	f7ff ff6e 	bl	80009e4 <LL_USART_TransmitData8>
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b08:	e002      	b.n	8000b10 <USART2_IRQHandler+0x9c>
    LL_USART_DisableIT_TXE(USART2);
 8000b0a:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USART2_IRQHandler+0xa0>)
 8000b0c:	f7ff ff37 	bl	800097e <LL_USART_DisableIT_TXE>
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40004400 	.word	0x40004400
 8000b18:	2000012c 	.word	0x2000012c
 8000b1c:	200000ac 	.word	0x200000ac
 8000b20:	200000a4 	.word	0x200000a4
 8000b24:	200001b4 	.word	0x200001b4
 8000b28:	20000134 	.word	0x20000134
 8000b2c:	200000a8 	.word	0x200000a8

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f002 f82a 	bl	8002bb8 <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20020000 	.word	0x20020000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	20000130 	.word	0x20000130
 8000b98:	200001d0 	.word	0x200001d0

08000b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_USART_Enable>:
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60da      	str	r2, [r3, #12]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_USART_EnableDirectionRx>:
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b089      	sub	sp, #36	; 0x24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	e853 3f00 	ldrex	r3, [r3]
 8000d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	61fb      	str	r3, [r7, #28]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	330c      	adds	r3, #12
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	61ba      	str	r2, [r7, #24]
 8000d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d1a:	6979      	ldr	r1, [r7, #20]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	e841 2300 	strex	r3, r2, [r1]
 8000d22:	613b      	str	r3, [r7, #16]
   return(result);
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1e7      	bne.n	8000cfa <LL_USART_EnableDirectionRx+0x8>
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3724      	adds	r7, #36	; 0x24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_USART_EnableDirectionTx>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	330c      	adds	r3, #12
 8000d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	e853 3f00 	ldrex	r3, [r3]
 8000d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	330c      	adds	r3, #12
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	61ba      	str	r2, [r7, #24]
 8000d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d60:	6979      	ldr	r1, [r7, #20]
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	e841 2300 	strex	r3, r2, [r1]
 8000d68:	613b      	str	r3, [r7, #16]
   return(result);
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e7      	bne.n	8000d40 <LL_USART_EnableDirectionTx+0x8>
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <LL_USART_ConfigAsyncMode>:
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	615a      	str	r2, [r3, #20]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <LL_USART_IsActiveFlag_TC>:
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dba:	2b40      	cmp	r3, #64	; 0x40
 8000dbc:	bf0c      	ite	eq
 8000dbe:	2301      	moveq	r3, #1
 8000dc0:	2300      	movne	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <LL_USART_EnableIT_RXNE>:
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	330c      	adds	r3, #12
 8000ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	e853 3f00 	ldrex	r3, [r3]
 8000de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	f043 0320 	orr.w	r3, r3, #32
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	330c      	adds	r3, #12
 8000df2:	69fa      	ldr	r2, [r7, #28]
 8000df4:	61ba      	str	r2, [r7, #24]
 8000df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	e841 2300 	strex	r3, r2, [r1]
 8000e00:	613b      	str	r3, [r7, #16]
   return(result);
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e7      	bne.n	8000dd8 <LL_USART_EnableIT_RXNE+0x8>
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_USART_EnableIT_TXE>:
{
 8000e16:	b480      	push	{r7}
 8000e18:	b089      	sub	sp, #36	; 0x24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	330c      	adds	r3, #12
 8000e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	e853 3f00 	ldrex	r3, [r3]
 8000e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	330c      	adds	r3, #12
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	61ba      	str	r2, [r7, #24]
 8000e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000e3e:	6979      	ldr	r1, [r7, #20]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	e841 2300 	strex	r3, r2, [r1]
 8000e46:	613b      	str	r3, [r7, #16]
   return(result);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1e7      	bne.n	8000e1e <LL_USART_EnableIT_TXE+0x8>
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	3724      	adds	r7, #36	; 0x24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4013      	ands	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40023800 	.word	0x40023800

08000e8c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40023800 	.word	0x40023800

08000ebc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LL_DMA_SetDataTransferDirection+0x44>)
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000edc:	4908      	ldr	r1, [pc, #32]	; (8000f00 <LL_DMA_SetDataTransferDirection+0x44>)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	440b      	add	r3, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	440b      	add	r3, r1
 8000eea:	4619      	mov	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	08003534 	.word	0x08003534

08000f04 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LL_DMA_SetMode+0x44>)
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000f24:	4908      	ldr	r1, [pc, #32]	; (8000f48 <LL_DMA_SetMode+0x44>)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	440b      	add	r3, r1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	440b      	add	r3, r1
 8000f32:	4619      	mov	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	08003534 	.word	0x08003534

08000f4c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LL_DMA_SetPeriphIncMode+0x44>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f6c:	4908      	ldr	r1, [pc, #32]	; (8000f90 <LL_DMA_SetPeriphIncMode+0x44>)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	440b      	add	r3, r1
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	440b      	add	r3, r1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	08003534 	.word	0x08003534

08000f94 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <LL_DMA_SetMemoryIncMode+0x44>)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000fb4:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <LL_DMA_SetMemoryIncMode+0x44>)
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	440b      	add	r3, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	08003534 	.word	0x08003534

08000fdc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <LL_DMA_SetPeriphSize+0x44>)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000ffc:	4908      	ldr	r1, [pc, #32]	; (8001020 <LL_DMA_SetPeriphSize+0x44>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	440b      	add	r3, r1
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	440b      	add	r3, r1
 800100a:	4619      	mov	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	08003534 	.word	0x08003534

08001024 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <LL_DMA_SetMemorySize+0x44>)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001044:	4908      	ldr	r1, [pc, #32]	; (8001068 <LL_DMA_SetMemorySize+0x44>)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	440b      	add	r3, r1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	440b      	add	r3, r1
 8001052:	4619      	mov	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	08003534 	.word	0x08003534

0800106c <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800108c:	4908      	ldr	r1, [pc, #32]	; (80010b0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	440b      	add	r3, r1
 800109a:	4619      	mov	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	08003534 	.word	0x08003534

080010b4 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <LL_DMA_SetChannelSelection+0x44>)
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80010d4:	4908      	ldr	r1, [pc, #32]	; (80010f8 <LL_DMA_SetChannelSelection+0x44>)
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	440b      	add	r3, r1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	440b      	add	r3, r1
 80010e2:	4619      	mov	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	08003534 	.word	0x08003534

080010fc <LL_DMA_SetMemoryBurstxfer>:
  *         @arg @ref LL_DMA_MBURST_INC8
  *         @arg @ref LL_DMA_MBURST_INC16
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mburst)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <LL_DMA_SetMemoryBurstxfer+0x44>)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 800111c:	4908      	ldr	r1, [pc, #32]	; (8001140 <LL_DMA_SetMemoryBurstxfer+0x44>)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	440b      	add	r3, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	440b      	add	r3, r1
 800112a:	4619      	mov	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	08003534 	.word	0x08003534

08001144 <LL_DMA_SetPeriphBurstxfer>:
  *         @arg @ref LL_DMA_PBURST_INC8
  *         @arg @ref LL_DMA_PBURST_INC16
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Pburst)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <LL_DMA_SetPeriphBurstxfer+0x44>)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8001164:	4908      	ldr	r1, [pc, #32]	; (8001188 <LL_DMA_SetPeriphBurstxfer+0x44>)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	440b      	add	r3, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	440b      	add	r3, r1
 8001172:	4619      	mov	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	08003534 	.word	0x08003534

0800118c <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001196:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <LL_DMA_DisableFifoMode+0x3c>)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <LL_DMA_DisableFifoMode+0x3c>)
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	440a      	add	r2, r1
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	4611      	mov	r1, r2
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	440a      	add	r2, r1
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6153      	str	r3, [r2, #20]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	08003534 	.word	0x08003534

080011cc <LL_DMA_EnableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80011d6:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <LL_DMA_EnableFifoMode+0x3c>)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <LL_DMA_EnableFifoMode+0x3c>)
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	440a      	add	r2, r1
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	4611      	mov	r1, r2
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	440a      	add	r2, r1
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6153      	str	r3, [r2, #20]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	08003534 	.word	0x08003534

0800120c <LL_DMA_SetFIFOThreshold>:
  *         @arg @ref LL_DMA_FIFOTHRESHOLD_3_4
  *         @arg @ref LL_DMA_FIFOTHRESHOLD_FULL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetFIFOThreshold(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Threshold)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH, Threshold);
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <LL_DMA_SetFIFOThreshold+0x44>)
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4413      	add	r3, r2
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f023 0203 	bic.w	r2, r3, #3
 800122c:	4908      	ldr	r1, [pc, #32]	; (8001250 <LL_DMA_SetFIFOThreshold+0x44>)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	440b      	add	r3, r1
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	440b      	add	r3, r1
 800123a:	4619      	mov	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4313      	orrs	r3, r2
 8001240:	614b      	str	r3, [r1, #20]
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	08003534 	.word	0x08003534

08001254 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800127e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001282:	f7ff fe03 	bl	8000e8c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff fde8 	bl	8000e5c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800128c:	230c      	movs	r3, #12
 800128e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001290:	2302      	movs	r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80012a0:	2307      	movs	r3, #7
 80012a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	484f      	ldr	r0, [pc, #316]	; (80013e8 <MX_USART2_UART_Init+0x194>)
 80012aa:	f000 fff2 	bl	8002292 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 80012ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012b2:	2106      	movs	r1, #6
 80012b4:	484d      	ldr	r0, [pc, #308]	; (80013ec <MX_USART2_UART_Init+0x198>)
 80012b6:	f7ff fefd 	bl	80010b4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80012ba:	2240      	movs	r2, #64	; 0x40
 80012bc:	2106      	movs	r1, #6
 80012be:	484b      	ldr	r0, [pc, #300]	; (80013ec <MX_USART2_UART_Init+0x198>)
 80012c0:	f7ff fdfc 	bl	8000ebc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_MEDIUM);
 80012c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012c8:	2106      	movs	r1, #6
 80012ca:	4848      	ldr	r0, [pc, #288]	; (80013ec <MX_USART2_UART_Init+0x198>)
 80012cc:	f7ff fece 	bl	800106c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2106      	movs	r1, #6
 80012d4:	4845      	ldr	r0, [pc, #276]	; (80013ec <MX_USART2_UART_Init+0x198>)
 80012d6:	f7ff fe15 	bl	8000f04 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 80012da:	2200      	movs	r2, #0
 80012dc:	2106      	movs	r1, #6
 80012de:	4843      	ldr	r0, [pc, #268]	; (80013ec <MX_USART2_UART_Init+0x198>)
 80012e0:	f7ff fe34 	bl	8000f4c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 80012e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e8:	2106      	movs	r1, #6
 80012ea:	4840      	ldr	r0, [pc, #256]	; (80013ec <MX_USART2_UART_Init+0x198>)
 80012ec:	f7ff fe52 	bl	8000f94 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2106      	movs	r1, #6
 80012f4:	483d      	ldr	r0, [pc, #244]	; (80013ec <MX_USART2_UART_Init+0x198>)
 80012f6:	f7ff fe71 	bl	8000fdc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2106      	movs	r1, #6
 80012fe:	483b      	ldr	r0, [pc, #236]	; (80013ec <MX_USART2_UART_Init+0x198>)
 8001300:	f7ff fe90 	bl	8001024 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8001304:	2106      	movs	r1, #6
 8001306:	4839      	ldr	r0, [pc, #228]	; (80013ec <MX_USART2_UART_Init+0x198>)
 8001308:	f7ff ff40 	bl	800118c <LL_DMA_DisableFifoMode>

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 800130c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001310:	2105      	movs	r1, #5
 8001312:	4836      	ldr	r0, [pc, #216]	; (80013ec <MX_USART2_UART_Init+0x198>)
 8001314:	f7ff fece 	bl	80010b4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001318:	2200      	movs	r2, #0
 800131a:	2105      	movs	r1, #5
 800131c:	4833      	ldr	r0, [pc, #204]	; (80013ec <MX_USART2_UART_Init+0x198>)
 800131e:	f7ff fdcd 	bl	8000ebc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_MEDIUM);
 8001322:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001326:	2105      	movs	r1, #5
 8001328:	4830      	ldr	r0, [pc, #192]	; (80013ec <MX_USART2_UART_Init+0x198>)
 800132a:	f7ff fe9f 	bl	800106c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 800132e:	2200      	movs	r2, #0
 8001330:	2105      	movs	r1, #5
 8001332:	482e      	ldr	r0, [pc, #184]	; (80013ec <MX_USART2_UART_Init+0x198>)
 8001334:	f7ff fde6 	bl	8000f04 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8001338:	2200      	movs	r2, #0
 800133a:	2105      	movs	r1, #5
 800133c:	482b      	ldr	r0, [pc, #172]	; (80013ec <MX_USART2_UART_Init+0x198>)
 800133e:	f7ff fe05 	bl	8000f4c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8001342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001346:	2105      	movs	r1, #5
 8001348:	4828      	ldr	r0, [pc, #160]	; (80013ec <MX_USART2_UART_Init+0x198>)
 800134a:	f7ff fe23 	bl	8000f94 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 800134e:	2200      	movs	r2, #0
 8001350:	2105      	movs	r1, #5
 8001352:	4826      	ldr	r0, [pc, #152]	; (80013ec <MX_USART2_UART_Init+0x198>)
 8001354:	f7ff fe42 	bl	8000fdc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8001358:	2200      	movs	r2, #0
 800135a:	2105      	movs	r1, #5
 800135c:	4823      	ldr	r0, [pc, #140]	; (80013ec <MX_USART2_UART_Init+0x198>)
 800135e:	f7ff fe61 	bl	8001024 <LL_DMA_SetMemorySize>

  LL_DMA_EnableFifoMode(DMA1, LL_DMA_STREAM_5);
 8001362:	2105      	movs	r1, #5
 8001364:	4821      	ldr	r0, [pc, #132]	; (80013ec <MX_USART2_UART_Init+0x198>)
 8001366:	f7ff ff31 	bl	80011cc <LL_DMA_EnableFifoMode>

  LL_DMA_SetFIFOThreshold(DMA1, LL_DMA_STREAM_5, LL_DMA_FIFOTHRESHOLD_1_4);
 800136a:	2200      	movs	r2, #0
 800136c:	2105      	movs	r1, #5
 800136e:	481f      	ldr	r0, [pc, #124]	; (80013ec <MX_USART2_UART_Init+0x198>)
 8001370:	f7ff ff4c 	bl	800120c <LL_DMA_SetFIFOThreshold>

  LL_DMA_SetMemoryBurstxfer(DMA1, LL_DMA_STREAM_5, LL_DMA_MBURST_SINGLE);
 8001374:	2200      	movs	r2, #0
 8001376:	2105      	movs	r1, #5
 8001378:	481c      	ldr	r0, [pc, #112]	; (80013ec <MX_USART2_UART_Init+0x198>)
 800137a:	f7ff febf 	bl	80010fc <LL_DMA_SetMemoryBurstxfer>

  LL_DMA_SetPeriphBurstxfer(DMA1, LL_DMA_STREAM_5, LL_DMA_PBURST_SINGLE);
 800137e:	2200      	movs	r2, #0
 8001380:	2105      	movs	r1, #5
 8001382:	481a      	ldr	r0, [pc, #104]	; (80013ec <MX_USART2_UART_Init+0x198>)
 8001384:	f7ff fede 	bl	8001144 <LL_DMA_SetPeriphBurstxfer>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8001388:	f7ff fc1a 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 800138c:	4603      	mov	r3, r0
 800138e:	2200      	movs	r2, #0
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fc6a 	bl	8000c6c <NVIC_EncodePriority>
 8001398:	4603      	mov	r3, r0
 800139a:	4619      	mov	r1, r3
 800139c:	2026      	movs	r0, #38	; 0x26
 800139e:	f7ff fc3b 	bl	8000c18 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80013a2:	2026      	movs	r0, #38	; 0x26
 80013a4:	f7ff fc1a 	bl	8000bdc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80013a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80013ac:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80013ba:	230c      	movs	r3, #12
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013be:	2300      	movs	r3, #0
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 80013c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <MX_USART2_UART_Init+0x19c>)
 80013d0:	f001 fb72 	bl	8002ab8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <MX_USART2_UART_Init+0x19c>)
 80013d6:	f7ff fcd2 	bl	8000d7e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART2_UART_Init+0x19c>)
 80013dc:	f7ff fc79 	bl	8000cd2 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3738      	adds	r7, #56	; 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40026000 	.word	0x40026000
 80013f0:	40004400 	.word	0x40004400

080013f4 <config_UART>:
/* USER CODE BEGIN 1 */

   
extern uint8_t RXbuffer[128U];
void config_UART(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Enable the USART by writing the UE bit in USART_CR1 register to 1.*/
  LL_USART_Enable(USART2);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <config_UART+0x10>)
 80013fa:	f7ff fc6a 	bl	8000cd2 <LL_USART_Enable>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004400 	.word	0x40004400

08001408 <_USART_Put_Char>:
uint8_t Databuffer[128U] = {0};
volatile uint32_t buf_ptr = 0;
static void inline _USART_Put_Char(uint8_t c)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if (buf_ptr>128U){
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <_USART_Put_Char+0x40>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b80      	cmp	r3, #128	; 0x80
 8001418:	d902      	bls.n	8001420 <_USART_Put_Char+0x18>
    buf_ptr = 0U;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <_USART_Put_Char+0x40>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
  }
  Databuffer[buf_ptr] = c;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <_USART_Put_Char+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4909      	ldr	r1, [pc, #36]	; (800144c <_USART_Put_Char+0x44>)
 8001426:	79fa      	ldrb	r2, [r7, #7]
 8001428:	54ca      	strb	r2, [r1, r3]
  __ASM volatile ("cpsid i" : : : "memory");
 800142a:	b672      	cpsid	i
}
 800142c:	bf00      	nop
  __disable_irq();
  buf_ptr +=1;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <_USART_Put_Char+0x40>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <_USART_Put_Char+0x40>)
 8001436:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001438:	b662      	cpsie	i
}
 800143a:	bf00      	nop
  __enable_irq();
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	200001b4 	.word	0x200001b4
 800144c:	20000134 	.word	0x20000134

08001450 <send_data>:
void send_data(const char* str, uint32_t len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  if (str == 0 ){return ;}; // 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01a      	beq.n	8001496 <send_data+0x46>
  while (!LL_USART_IsActiveFlag_TC(USART2)){};
 8001460:	bf00      	nop
 8001462:	480f      	ldr	r0, [pc, #60]	; (80014a0 <send_data+0x50>)
 8001464:	f7ff fca1 	bl	8000daa <LL_USART_IsActiveFlag_TC>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f9      	beq.n	8001462 <send_data+0x12>
  while(len--) // check null
 800146e:	e006      	b.n	800147e <send_data+0x2e>
  {
    _USART_Put_Char(*str++);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ffc5 	bl	8001408 <_USART_Put_Char>
  while(len--) // check null
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	603a      	str	r2, [r7, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f3      	bne.n	8001470 <send_data+0x20>
   
  }
  /*===========================TX==configure====================*/
    LL_USART_EnableDirectionTx(USART2);
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <send_data+0x50>)
 800148a:	f7ff fc55 	bl	8000d38 <LL_USART_EnableDirectionTx>
  #if CONFIG_UART_USE_IT
    LL_USART_EnableIT_TXE(USART2);
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <send_data+0x50>)
 8001490:	f7ff fcc1 	bl	8000e16 <LL_USART_EnableIT_TXE>
 8001494:	e000      	b.n	8001498 <send_data+0x48>
  if (str == 0 ){return ;}; // 
 8001496:	bf00      	nop
  #endif

}
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40004400 	.word	0x40004400

080014a4 <UART_RX_Data>:
void UART_RX_Data(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /*===========================RX==configure====================*/
  /* Set bit RE USART_>CR1*/
  LL_USART_EnableDirectionRx(USART2);
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <UART_RX_Data+0x14>)
 80014aa:	f7ff fc22 	bl	8000cf2 <LL_USART_EnableDirectionRx>
  /* Use Interrup*/
  #if CONFIG_UART_USE_IT
    LL_USART_EnableIT_RXNE(USART2);
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <UART_RX_Data+0x14>)
 80014b0:	f7ff fc8e 	bl	8000dd0 <LL_USART_EnableIT_RXNE>
  #endif
}  
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40004400 	.word	0x40004400

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014c2:	490e      	ldr	r1, [pc, #56]	; (80014fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c4:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d8:	4c0b      	ldr	r4, [pc, #44]	; (8001508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e6:	f7ff fb59 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f001 fb6b 	bl	8002bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7ff f933 	bl	8000758 <main>
  bx  lr    
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001500:	08003580 	.word	0x08003580
  ldr r2, =_sbss
 8001504:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001508:	200001cc 	.word	0x200001cc

0800150c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_Init+0x40>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_Init+0x40>)
 8001526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_Init+0x40>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f90d 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	200f      	movs	r0, #15
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff f99e 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f917 	bl	80017a6 <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 f8ed 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	200001b8 	.word	0x200001b8

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200001b8 	.word	0x200001b8

080015f4 <__NVIC_SetPriorityGrouping>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_SetPriority>:
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff47 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff5c 	bl	800163c <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff8e 	bl	80016ac <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5d 	bl	8001658 <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffb0 	bl	8001714 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e267      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d075      	beq.n	80018ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017de:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d00c      	beq.n	8001804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ea:	4b85      	ldr	r3, [pc, #532]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d112      	bne.n	800181c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f6:	4b82      	ldr	r3, [pc, #520]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001802:	d10b      	bne.n	800181c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	4b7e      	ldr	r3, [pc, #504]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d05b      	beq.n	80018c8 <HAL_RCC_OscConfig+0x108>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d157      	bne.n	80018c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e242      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0x74>
 8001826:	4b76      	ldr	r3, [pc, #472]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a75      	ldr	r2, [pc, #468]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0xb0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x98>
 800183e:	4b70      	ldr	r3, [pc, #448]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6f      	ldr	r2, [pc, #444]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a6c      	ldr	r2, [pc, #432]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xb0>
 8001858:	4b69      	ldr	r3, [pc, #420]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a68      	ldr	r2, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b66      	ldr	r3, [pc, #408]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a65      	ldr	r2, [pc, #404]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff feb0 	bl	80015dc <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff feac 	bl	80015dc <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e207      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0xc0>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fe9c 	bl	80015dc <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fe98 	bl	80015dc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1f3      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	4b51      	ldr	r3, [pc, #324]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0xe8>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d063      	beq.n	800199e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018d6:	4b4a      	ldr	r3, [pc, #296]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e2:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d11c      	bne.n	8001928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ee:	4b44      	ldr	r3, [pc, #272]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d116      	bne.n	8001928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x152>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e1c7      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001926:	e03a      	b.n	800199e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001930:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <HAL_RCC_OscConfig+0x244>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff fe51 	bl	80015dc <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193e:	f7ff fe4d 	bl	80015dc <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e1a8      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4925      	ldr	r1, [pc, #148]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]
 8001970:	e015      	b.n	800199e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_RCC_OscConfig+0x244>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff fe30 	bl	80015dc <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001980:	f7ff fe2c 	bl	80015dc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e187      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d036      	beq.n	8001a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d016      	beq.n	80019e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_RCC_OscConfig+0x248>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff fe10 	bl	80015dc <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff fe0c 	bl	80015dc <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e167      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_OscConfig+0x240>)
 80019d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x200>
 80019de:	e01b      	b.n	8001a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_OscConfig+0x248>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fdf9 	bl	80015dc <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	e00e      	b.n	8001a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ee:	f7ff fdf5 	bl	80015dc <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d907      	bls.n	8001a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e150      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
 8001a00:	40023800 	.word	0x40023800
 8001a04:	42470000 	.word	0x42470000
 8001a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	4b88      	ldr	r3, [pc, #544]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ea      	bne.n	80019ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8097 	beq.w	8001b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b81      	ldr	r3, [pc, #516]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b7d      	ldr	r3, [pc, #500]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a7c      	ldr	r2, [pc, #496]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a52:	2301      	movs	r3, #1
 8001a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b77      	ldr	r3, [pc, #476]	; (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d118      	bne.n	8001a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a62:	4b74      	ldr	r3, [pc, #464]	; (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a73      	ldr	r2, [pc, #460]	; (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fdb5 	bl	80015dc <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a76:	f7ff fdb1 	bl	80015dc <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e10c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	4b6a      	ldr	r3, [pc, #424]	; (8001c34 <HAL_RCC_OscConfig+0x474>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2ea>
 8001a9c:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa0:	4a63      	ldr	r2, [pc, #396]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa8:	e01c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x324>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b05      	cmp	r3, #5
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0x30c>
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a5e      	ldr	r2, [pc, #376]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
 8001abe:	4b5c      	ldr	r3, [pc, #368]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	4a5b      	ldr	r2, [pc, #364]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0x324>
 8001acc:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad8:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001adc:	4a54      	ldr	r2, [pc, #336]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001ade:	f023 0304 	bic.w	r3, r3, #4
 8001ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d015      	beq.n	8001b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff fd76 	bl	80015dc <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff fd72 	bl	80015dc <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0cb      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0a:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0ee      	beq.n	8001af4 <HAL_RCC_OscConfig+0x334>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b18:	f7ff fd60 	bl	80015dc <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7ff fd5c 	bl	80015dc <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e0b5      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b36:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1ee      	bne.n	8001b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a1 	beq.w	8001ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b5e:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d05c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d141      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_RCC_OscConfig+0x478>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fd30 	bl	80015dc <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b80:	f7ff fd2c 	bl	80015dc <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e087      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69da      	ldr	r2, [r3, #28]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	019b      	lsls	r3, r3, #6
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	041b      	lsls	r3, r3, #16
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	061b      	lsls	r3, r3, #24
 8001bc2:	491b      	ldr	r1, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x478>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff fd05 	bl	80015dc <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff fd01 	bl	80015dc <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e05c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x416>
 8001bf4:	e054      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_RCC_OscConfig+0x478>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fcee 	bl	80015dc <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff fcea 	bl	80015dc <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e045      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_OscConfig+0x470>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x444>
 8001c22:	e03d      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e038      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000
 8001c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x4ec>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d028      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d121      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d11a      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d111      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	3b01      	subs	r3, #1
 8001c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800

08001cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0cc      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d90c      	bls.n	8001cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d04:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	494d      	ldr	r1, [pc, #308]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d044      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d119      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e06f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e067      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4934      	ldr	r1, [pc, #208]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7ff fc1c 	bl	80015dc <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7ff fc18 	bl	80015dc <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e04f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d20c      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4916      	ldr	r1, [pc, #88]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e36:	f000 f821 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	490a      	ldr	r1, [pc, #40]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	5ccb      	ldrb	r3, [r1, r3]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1c8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fb7c 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	0800351c 	.word	0x0800351c
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e80:	b094      	sub	sp, #80	; 0x50
 8001e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	647b      	str	r3, [r7, #68]	; 0x44
 8001e88:	2300      	movs	r3, #0
 8001e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e94:	4b79      	ldr	r3, [pc, #484]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d00d      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x40>
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	f200 80e1 	bhi.w	8002068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d003      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eae:	e0db      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb0:	4b73      	ldr	r3, [pc, #460]	; (8002080 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001eb4:	e0db      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eb6:	4b73      	ldr	r3, [pc, #460]	; (8002084 <HAL_RCC_GetSysClockFreq+0x208>)
 8001eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eba:	e0d8      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ebc:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec6:	4b6d      	ldr	r3, [pc, #436]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d063      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed2:	4b6a      	ldr	r3, [pc, #424]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	099b      	lsrs	r3, r3, #6
 8001ed8:	2200      	movs	r2, #0
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8001edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001eee:	4622      	mov	r2, r4
 8001ef0:	462b      	mov	r3, r5
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	0159      	lsls	r1, r3, #5
 8001efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f00:	0150      	lsls	r0, r2, #5
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4621      	mov	r1, r4
 8001f08:	1a51      	subs	r1, r2, r1
 8001f0a:	6139      	str	r1, [r7, #16]
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f20:	4659      	mov	r1, fp
 8001f22:	018b      	lsls	r3, r1, #6
 8001f24:	4651      	mov	r1, sl
 8001f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f2a:	4651      	mov	r1, sl
 8001f2c:	018a      	lsls	r2, r1, #6
 8001f2e:	4651      	mov	r1, sl
 8001f30:	ebb2 0801 	subs.w	r8, r2, r1
 8001f34:	4659      	mov	r1, fp
 8001f36:	eb63 0901 	sbc.w	r9, r3, r1
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f4e:	4690      	mov	r8, r2
 8001f50:	4699      	mov	r9, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	eb18 0303 	adds.w	r3, r8, r3
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	eb49 0303 	adc.w	r3, r9, r3
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	024b      	lsls	r3, r1, #9
 8001f72:	4621      	mov	r1, r4
 8001f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f78:	4621      	mov	r1, r4
 8001f7a:	024a      	lsls	r2, r1, #9
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f82:	2200      	movs	r2, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f8c:	f7fe f978 	bl	8000280 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4613      	mov	r3, r2
 8001f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f98:	e058      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9a:	4b38      	ldr	r3, [pc, #224]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fb4:	4642      	mov	r2, r8
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	f04f 0000 	mov.w	r0, #0
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	0159      	lsls	r1, r3, #5
 8001fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc6:	0150      	lsls	r0, r2, #5
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4641      	mov	r1, r8
 8001fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fec:	ebb2 040a 	subs.w	r4, r2, sl
 8001ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	00eb      	lsls	r3, r5, #3
 8001ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002002:	00e2      	lsls	r2, r4, #3
 8002004:	4614      	mov	r4, r2
 8002006:	461d      	mov	r5, r3
 8002008:	4643      	mov	r3, r8
 800200a:	18e3      	adds	r3, r4, r3
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	464b      	mov	r3, r9
 8002010:	eb45 0303 	adc.w	r3, r5, r3
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002022:	4629      	mov	r1, r5
 8002024:	028b      	lsls	r3, r1, #10
 8002026:	4621      	mov	r1, r4
 8002028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800202c:	4621      	mov	r1, r4
 800202e:	028a      	lsls	r2, r1, #10
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002036:	2200      	movs	r2, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	61fa      	str	r2, [r7, #28]
 800203c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002040:	f7fe f91e 	bl	8000280 <__aeabi_uldivmod>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4613      	mov	r3, r2
 800204a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	3301      	adds	r3, #1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800205c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800205e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetSysClockFreq+0x204>)
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002070:	4618      	mov	r0, r3
 8002072:	3750      	adds	r7, #80	; 0x50
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	613b      	str	r3, [r7, #16]
  return result;
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2103      	movs	r1, #3
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	401a      	ands	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	61bb      	str	r3, [r7, #24]
  return result;
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	431a      	orrs	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	401a      	ands	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	431a      	orrs	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	605a      	str	r2, [r3, #4]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002116:	b480      	push	{r7}
 8002118:	b089      	sub	sp, #36	; 0x24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	613b      	str	r3, [r7, #16]
  return result;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2103      	movs	r1, #3
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	401a      	ands	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	61bb      	str	r3, [r7, #24]
  return result;
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	431a      	orrs	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002168:	bf00      	nop
 800216a:	3724      	adds	r7, #36	; 0x24
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	613b      	str	r3, [r7, #16]
  return result;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2103      	movs	r1, #3
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	61bb      	str	r3, [r7, #24]
  return result;
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	431a      	orrs	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	60da      	str	r2, [r3, #12]
}
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b089      	sub	sp, #36	; 0x24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a1a      	ldr	r2, [r3, #32]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	613b      	str	r3, [r7, #16]
  return result;
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	210f      	movs	r1, #15
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	401a      	ands	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	61bb      	str	r3, [r7, #24]
  return result;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	431a      	orrs	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002224:	bf00      	nop
 8002226:	3724      	adds	r7, #36	; 0x24
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	613b      	str	r3, [r7, #16]
  return result;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	210f      	movs	r1, #15
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	401a      	ands	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	61bb      	str	r3, [r7, #24]
  return result;
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	431a      	orrs	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002286:	bf00      	nop
 8002288:	3724      	adds	r7, #36	; 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b088      	sub	sp, #32
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	613b      	str	r3, [r7, #16]
  return result;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80022bc:	e050      	b.n	8002360 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2101      	movs	r1, #1
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d042      	beq.n	800235a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d003      	beq.n	80022e4 <LL_GPIO_Init+0x52>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d10d      	bne.n	8002300 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	461a      	mov	r2, r3
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff12 	bl	8002116 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	461a      	mov	r2, r3
 80022f8:	69b9      	ldr	r1, [r7, #24]
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fef3 	bl	80020e6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	461a      	mov	r2, r3
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff33 	bl	8002174 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d11a      	bne.n	800234c <LL_GPIO_Init+0xba>
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	60bb      	str	r3, [r7, #8]
  return result;
 8002322:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b07      	cmp	r3, #7
 800232c:	d807      	bhi.n	800233e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	461a      	mov	r2, r3
 8002334:	69b9      	ldr	r1, [r7, #24]
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ff4b 	bl	80021d2 <LL_GPIO_SetAFPin_0_7>
 800233c:	e006      	b.n	800234c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	461a      	mov	r2, r3
 8002344:	69b9      	ldr	r1, [r7, #24]
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ff72 	bl	8002230 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	461a      	mov	r2, r3
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff fe97 	bl	8002088 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3301      	adds	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1a7      	bne.n	80022be <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <LL_RCC_GetSysClkSource+0x18>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030c 	and.w	r3, r3, #12
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800

08002394 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <LL_RCC_GetAHBPrescaler+0x18>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800

080023cc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800

080023e8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <LL_RCC_PLL_GetMainSource+0x18>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800

08002404 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <LL_RCC_PLL_GetN+0x18>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40023800 	.word	0x40023800

08002420 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <LL_RCC_PLL_GetP+0x18>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800

0800243c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <LL_RCC_PLL_GetDivider+0x18>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800

08002458 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002460:	f000 f820 	bl	80024a4 <RCC_GetSystemClockFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f840 	bl	80024f4 <RCC_GetHCLKClockFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f84e 	bl	8002520 <RCC_GetPCLK1ClockFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f85a 	bl	8002548 <RCC_GetPCLK2ClockFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60da      	str	r2, [r3, #12]
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80024ae:	f7ff ff63 	bl	8002378 <LL_RCC_GetSysClkSource>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d00c      	beq.n	80024d2 <RCC_GetSystemClockFreq+0x2e>
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d80f      	bhi.n	80024dc <RCC_GetSystemClockFreq+0x38>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <RCC_GetSystemClockFreq+0x22>
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d003      	beq.n	80024cc <RCC_GetSystemClockFreq+0x28>
 80024c4:	e00a      	b.n	80024dc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <RCC_GetSystemClockFreq+0x48>)
 80024c8:	607b      	str	r3, [r7, #4]
      break;
 80024ca:	e00a      	b.n	80024e2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <RCC_GetSystemClockFreq+0x4c>)
 80024ce:	607b      	str	r3, [r7, #4]
      break;
 80024d0:	e007      	b.n	80024e2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80024d2:	2008      	movs	r0, #8
 80024d4:	f000 f84c 	bl	8002570 <RCC_PLL_GetFreqDomain_SYS>
 80024d8:	6078      	str	r0, [r7, #4]
      break;
 80024da:	e002      	b.n	80024e2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <RCC_GetSystemClockFreq+0x48>)
 80024de:	607b      	str	r3, [r7, #4]
      break;
 80024e0:	bf00      	nop
  }

  return frequency;
 80024e2:	687b      	ldr	r3, [r7, #4]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	007a1200 	.word	0x007a1200

080024f4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80024fc:	f7ff ff4a 	bl	8002394 <LL_RCC_GetAHBPrescaler>
 8002500:	4603      	mov	r3, r0
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <RCC_GetHCLKClockFreq+0x28>)
 800250a:	5cd3      	ldrb	r3, [r2, r3]
 800250c:	461a      	mov	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	40d3      	lsrs	r3, r2
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	0800351c 	.word	0x0800351c

08002520 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002528:	f7ff ff42 	bl	80023b0 <LL_RCC_GetAPB1Prescaler>
 800252c:	4603      	mov	r3, r0
 800252e:	0a9b      	lsrs	r3, r3, #10
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <RCC_GetPCLK1ClockFreq+0x24>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	461a      	mov	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	40d3      	lsrs	r3, r2
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	0800352c 	.word	0x0800352c

08002548 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002550:	f7ff ff3c 	bl	80023cc <LL_RCC_GetAPB2Prescaler>
 8002554:	4603      	mov	r3, r0
 8002556:	0b5b      	lsrs	r3, r3, #13
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <RCC_GetPCLK2ClockFreq+0x24>)
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	40d3      	lsrs	r3, r2
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	0800352c 	.word	0x0800352c

08002570 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002584:	f7ff ff30 	bl	80023e8 <LL_RCC_PLL_GetMainSource>
 8002588:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002596:	d003      	beq.n	80025a0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002598:	e005      	b.n	80025a6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800259c:	617b      	str	r3, [r7, #20]
      break;
 800259e:	e005      	b.n	80025ac <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80025a2:	617b      	str	r3, [r7, #20]
      break;
 80025a4:	e002      	b.n	80025ac <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80025a8:	617b      	str	r3, [r7, #20]
      break;
 80025aa:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d113      	bne.n	80025da <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80025b2:	f7ff ff43 	bl	800243c <LL_RCC_PLL_GetDivider>
 80025b6:	4602      	mov	r2, r0
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fbb3 f4f2 	udiv	r4, r3, r2
 80025be:	f7ff ff21 	bl	8002404 <LL_RCC_PLL_GetN>
 80025c2:	4603      	mov	r3, r0
 80025c4:	fb03 f404 	mul.w	r4, r3, r4
 80025c8:	f7ff ff2a 	bl	8002420 <LL_RCC_PLL_GetP>
 80025cc:	4603      	mov	r3, r0
 80025ce:	0c1b      	lsrs	r3, r3, #16
 80025d0:	3301      	adds	r3, #1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fbb4 f3f3 	udiv	r3, r4, r3
 80025d8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80025da:	693b      	ldr	r3, [r7, #16]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd90      	pop	{r4, r7, pc}
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	007a1200 	.word	0x007a1200

080025ec <LL_USART_IsEnabled>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_USART_SetStopBitsLength>:
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	611a      	str	r2, [r3, #16]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_USART_SetHWFlowCtrl>:
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	615a      	str	r2, [r3, #20]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_USART_SetBaudRate>:
{
 8002660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002664:	b0c0      	sub	sp, #256	; 0x100
 8002666:	af00      	add	r7, sp, #0
 8002668:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800266c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002670:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002674:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002680:	f040 810c 	bne.w	800289c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002684:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002688:	2200      	movs	r2, #0
 800268a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800268e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	1891      	adds	r1, r2, r2
 800269c:	6639      	str	r1, [r7, #96]	; 0x60
 800269e:	415b      	adcs	r3, r3
 80026a0:	667b      	str	r3, [r7, #100]	; 0x64
 80026a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80026a6:	4621      	mov	r1, r4
 80026a8:	eb12 0801 	adds.w	r8, r2, r1
 80026ac:	4629      	mov	r1, r5
 80026ae:	eb43 0901 	adc.w	r9, r3, r1
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026c6:	4690      	mov	r8, r2
 80026c8:	4699      	mov	r9, r3
 80026ca:	4623      	mov	r3, r4
 80026cc:	eb18 0303 	adds.w	r3, r8, r3
 80026d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026d4:	462b      	mov	r3, r5
 80026d6:	eb49 0303 	adc.w	r3, r9, r3
 80026da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80026e2:	2200      	movs	r2, #0
 80026e4:	469a      	mov	sl, r3
 80026e6:	4693      	mov	fp, r2
 80026e8:	eb1a 030a 	adds.w	r3, sl, sl
 80026ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80026ee:	eb4b 030b 	adc.w	r3, fp, fp
 80026f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026fc:	f7fd fdc0 	bl	8000280 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4b64      	ldr	r3, [pc, #400]	; (8002898 <LL_USART_SetBaudRate+0x238>)
 8002706:	fba3 2302 	umull	r2, r3, r3, r2
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	b29b      	uxth	r3, r3
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	b29c      	uxth	r4, r3
 8002712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002716:	2200      	movs	r2, #0
 8002718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800271c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002720:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002724:	4642      	mov	r2, r8
 8002726:	464b      	mov	r3, r9
 8002728:	1891      	adds	r1, r2, r2
 800272a:	6539      	str	r1, [r7, #80]	; 0x50
 800272c:	415b      	adcs	r3, r3
 800272e:	657b      	str	r3, [r7, #84]	; 0x54
 8002730:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002734:	4641      	mov	r1, r8
 8002736:	1851      	adds	r1, r2, r1
 8002738:	64b9      	str	r1, [r7, #72]	; 0x48
 800273a:	4649      	mov	r1, r9
 800273c:	414b      	adcs	r3, r1
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800274c:	4659      	mov	r1, fp
 800274e:	00cb      	lsls	r3, r1, #3
 8002750:	4651      	mov	r1, sl
 8002752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002756:	4651      	mov	r1, sl
 8002758:	00ca      	lsls	r2, r1, #3
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	4603      	mov	r3, r0
 8002760:	4642      	mov	r2, r8
 8002762:	189b      	adds	r3, r3, r2
 8002764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002768:	464b      	mov	r3, r9
 800276a:	460a      	mov	r2, r1
 800276c:	eb42 0303 	adc.w	r3, r2, r3
 8002770:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002774:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002778:	2200      	movs	r2, #0
 800277a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800277e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002782:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002786:	460b      	mov	r3, r1
 8002788:	18db      	adds	r3, r3, r3
 800278a:	643b      	str	r3, [r7, #64]	; 0x40
 800278c:	4613      	mov	r3, r2
 800278e:	eb42 0303 	adc.w	r3, r2, r3
 8002792:	647b      	str	r3, [r7, #68]	; 0x44
 8002794:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002798:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800279c:	f7fd fd70 	bl	8000280 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4611      	mov	r1, r2
 80027a6:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <LL_USART_SetBaudRate+0x238>)
 80027a8:	fba3 2301 	umull	r2, r3, r3, r1
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	2264      	movs	r2, #100	; 0x64
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	1acb      	subs	r3, r1, r3
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027bc:	4b36      	ldr	r3, [pc, #216]	; (8002898 <LL_USART_SetBaudRate+0x238>)
 80027be:	fba3 2302 	umull	r2, r3, r3, r2
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4423      	add	r3, r4
 80027d2:	b29c      	uxth	r4, r3
 80027d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027de:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027e2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80027e6:	4642      	mov	r2, r8
 80027e8:	464b      	mov	r3, r9
 80027ea:	1891      	adds	r1, r2, r2
 80027ec:	63b9      	str	r1, [r7, #56]	; 0x38
 80027ee:	415b      	adcs	r3, r3
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027f6:	4641      	mov	r1, r8
 80027f8:	1851      	adds	r1, r2, r1
 80027fa:	6339      	str	r1, [r7, #48]	; 0x30
 80027fc:	4649      	mov	r1, r9
 80027fe:	414b      	adcs	r3, r1
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800280e:	4659      	mov	r1, fp
 8002810:	00cb      	lsls	r3, r1, #3
 8002812:	4651      	mov	r1, sl
 8002814:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002818:	4651      	mov	r1, sl
 800281a:	00ca      	lsls	r2, r1, #3
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	4603      	mov	r3, r0
 8002822:	4642      	mov	r2, r8
 8002824:	189b      	adds	r3, r3, r2
 8002826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800282a:	464b      	mov	r3, r9
 800282c:	460a      	mov	r2, r1
 800282e:	eb42 0303 	adc.w	r3, r2, r3
 8002832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002836:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002840:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002844:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002848:	460b      	mov	r3, r1
 800284a:	18db      	adds	r3, r3, r3
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
 800284e:	4613      	mov	r3, r2
 8002850:	eb42 0303 	adc.w	r3, r2, r3
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800285a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800285e:	f7fd fd0f 	bl	8000280 <__aeabi_uldivmod>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <LL_USART_SetBaudRate+0x238>)
 8002868:	fba3 1302 	umull	r1, r3, r3, r2
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	2164      	movs	r1, #100	; 0x64
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	3332      	adds	r3, #50	; 0x32
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <LL_USART_SetBaudRate+0x238>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	b29b      	uxth	r3, r3
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	b29b      	uxth	r3, r3
 800288a:	4423      	add	r3, r4
 800288c:	b29b      	uxth	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002894:	609a      	str	r2, [r3, #8]
}
 8002896:	e107      	b.n	8002aa8 <LL_USART_SetBaudRate+0x448>
 8002898:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800289c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028a0:	2200      	movs	r2, #0
 80028a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028a6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028aa:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80028ae:	4642      	mov	r2, r8
 80028b0:	464b      	mov	r3, r9
 80028b2:	1891      	adds	r1, r2, r2
 80028b4:	6239      	str	r1, [r7, #32]
 80028b6:	415b      	adcs	r3, r3
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028be:	4641      	mov	r1, r8
 80028c0:	1854      	adds	r4, r2, r1
 80028c2:	4649      	mov	r1, r9
 80028c4:	eb43 0501 	adc.w	r5, r3, r1
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	00eb      	lsls	r3, r5, #3
 80028d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028d6:	00e2      	lsls	r2, r4, #3
 80028d8:	4614      	mov	r4, r2
 80028da:	461d      	mov	r5, r3
 80028dc:	4643      	mov	r3, r8
 80028de:	18e3      	adds	r3, r4, r3
 80028e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028e4:	464b      	mov	r3, r9
 80028e6:	eb45 0303 	adc.w	r3, r5, r3
 80028ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80028ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80028f2:	2200      	movs	r2, #0
 80028f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002908:	4629      	mov	r1, r5
 800290a:	008b      	lsls	r3, r1, #2
 800290c:	4621      	mov	r1, r4
 800290e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002912:	4621      	mov	r1, r4
 8002914:	008a      	lsls	r2, r1, #2
 8002916:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800291a:	f7fd fcb1 	bl	8000280 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4b64      	ldr	r3, [pc, #400]	; (8002ab4 <LL_USART_SetBaudRate+0x454>)
 8002924:	fba3 2302 	umull	r2, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	b29b      	uxth	r3, r3
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	b29c      	uxth	r4, r3
 8002930:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800293a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800293e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002942:	4642      	mov	r2, r8
 8002944:	464b      	mov	r3, r9
 8002946:	1891      	adds	r1, r2, r2
 8002948:	61b9      	str	r1, [r7, #24]
 800294a:	415b      	adcs	r3, r3
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002952:	4641      	mov	r1, r8
 8002954:	1851      	adds	r1, r2, r1
 8002956:	6139      	str	r1, [r7, #16]
 8002958:	4649      	mov	r1, r9
 800295a:	414b      	adcs	r3, r1
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800296a:	4659      	mov	r1, fp
 800296c:	00cb      	lsls	r3, r1, #3
 800296e:	4651      	mov	r1, sl
 8002970:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002974:	4651      	mov	r1, sl
 8002976:	00ca      	lsls	r2, r1, #3
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	4603      	mov	r3, r0
 800297e:	4642      	mov	r2, r8
 8002980:	189b      	adds	r3, r3, r2
 8002982:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002986:	464b      	mov	r3, r9
 8002988:	460a      	mov	r2, r1
 800298a:	eb42 0303 	adc.w	r3, r2, r3
 800298e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002992:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002996:	2200      	movs	r2, #0
 8002998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800299c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80029ac:	4649      	mov	r1, r9
 80029ae:	008b      	lsls	r3, r1, #2
 80029b0:	4641      	mov	r1, r8
 80029b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029b6:	4641      	mov	r1, r8
 80029b8:	008a      	lsls	r2, r1, #2
 80029ba:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80029be:	f7fd fc5f 	bl	8000280 <__aeabi_uldivmod>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <LL_USART_SetBaudRate+0x454>)
 80029c8:	fba3 1302 	umull	r1, r3, r3, r2
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	2164      	movs	r1, #100	; 0x64
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	3332      	adds	r3, #50	; 0x32
 80029da:	4a36      	ldr	r2, [pc, #216]	; (8002ab4 <LL_USART_SetBaudRate+0x454>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	4423      	add	r3, r4
 80029ec:	b29c      	uxth	r4, r3
 80029ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029f2:	2200      	movs	r2, #0
 80029f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80029f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029fc:	4642      	mov	r2, r8
 80029fe:	464b      	mov	r3, r9
 8002a00:	1891      	adds	r1, r2, r2
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	415b      	adcs	r3, r3
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	1851      	adds	r1, r2, r1
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	4649      	mov	r1, r9
 8002a14:	414b      	adcs	r3, r1
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a24:	4659      	mov	r1, fp
 8002a26:	00cb      	lsls	r3, r1, #3
 8002a28:	4651      	mov	r1, sl
 8002a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a2e:	4651      	mov	r1, sl
 8002a30:	00ca      	lsls	r2, r1, #3
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	4642      	mov	r2, r8
 8002a3a:	189b      	adds	r3, r3, r2
 8002a3c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a3e:	464b      	mov	r3, r9
 8002a40:	460a      	mov	r2, r1
 8002a42:	eb42 0303 	adc.w	r3, r2, r3
 8002a46:	677b      	str	r3, [r7, #116]	; 0x74
 8002a48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002a5e:	4649      	mov	r1, r9
 8002a60:	008b      	lsls	r3, r1, #2
 8002a62:	4641      	mov	r1, r8
 8002a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a68:	4641      	mov	r1, r8
 8002a6a:	008a      	lsls	r2, r1, #2
 8002a6c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002a70:	f7fd fc06 	bl	8000280 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <LL_USART_SetBaudRate+0x454>)
 8002a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	2164      	movs	r1, #100	; 0x64
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	3332      	adds	r3, #50	; 0x32
 8002a8c:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <LL_USART_SetBaudRate+0x454>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4423      	add	r3, r4
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa6:	609a      	str	r2, [r3, #8]
}
 8002aa8:	bf00      	nop
 8002aaa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab4:	51eb851f 	.word	0x51eb851f

08002ab8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fd8e 	bl	80025ec <LL_USART_IsEnabled>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d15e      	bne.n	8002b94 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ade:	f023 030c 	bic.w	r3, r3, #12
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	6851      	ldr	r1, [r2, #4]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	4311      	orrs	r1, r2
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	6912      	ldr	r2, [r2, #16]
 8002af0:	4311      	orrs	r1, r2
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	6992      	ldr	r2, [r2, #24]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fd85 	bl	8002614 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff fd92 	bl	800263a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002b16:	f107 0308 	add.w	r3, r7, #8
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fc9c 	bl	8002458 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <LL_USART_Init+0xe8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d102      	bne.n	8002b2e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	e021      	b.n	8002b72 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <LL_USART_Init+0xec>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d102      	bne.n	8002b3c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	e01a      	b.n	8002b72 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <LL_USART_Init+0xf0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d102      	bne.n	8002b4a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	e013      	b.n	8002b72 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a17      	ldr	r2, [pc, #92]	; (8002bac <LL_USART_Init+0xf4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d102      	bne.n	8002b58 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	e00c      	b.n	8002b72 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <LL_USART_Init+0xf8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d102      	bne.n	8002b66 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e005      	b.n	8002b72 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <LL_USART_Init+0xfc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00d      	beq.n	8002b94 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d009      	beq.n	8002b94 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002b80:	2300      	movs	r3, #0
 8002b82:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69b9      	ldr	r1, [r7, #24]
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fd66 	bl	8002660 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002b94:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40011000 	.word	0x40011000
 8002ba4:	40004400 	.word	0x40004400
 8002ba8:	40004800 	.word	0x40004800
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	40004c00 	.word	0x40004c00
 8002bb4:	40005000 	.word	0x40005000

08002bb8 <__errno>:
 8002bb8:	4b01      	ldr	r3, [pc, #4]	; (8002bc0 <__errno+0x8>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	2000000c 	.word	0x2000000c

08002bc4 <__libc_init_array>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4d0d      	ldr	r5, [pc, #52]	; (8002bfc <__libc_init_array+0x38>)
 8002bc8:	4c0d      	ldr	r4, [pc, #52]	; (8002c00 <__libc_init_array+0x3c>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	2600      	movs	r6, #0
 8002bd0:	42a6      	cmp	r6, r4
 8002bd2:	d109      	bne.n	8002be8 <__libc_init_array+0x24>
 8002bd4:	4d0b      	ldr	r5, [pc, #44]	; (8002c04 <__libc_init_array+0x40>)
 8002bd6:	4c0c      	ldr	r4, [pc, #48]	; (8002c08 <__libc_init_array+0x44>)
 8002bd8:	f000 fc8e 	bl	80034f8 <_init>
 8002bdc:	1b64      	subs	r4, r4, r5
 8002bde:	10a4      	asrs	r4, r4, #2
 8002be0:	2600      	movs	r6, #0
 8002be2:	42a6      	cmp	r6, r4
 8002be4:	d105      	bne.n	8002bf2 <__libc_init_array+0x2e>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bec:	4798      	blx	r3
 8002bee:	3601      	adds	r6, #1
 8002bf0:	e7ee      	b.n	8002bd0 <__libc_init_array+0xc>
 8002bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf6:	4798      	blx	r3
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	e7f2      	b.n	8002be2 <__libc_init_array+0x1e>
 8002bfc:	08003578 	.word	0x08003578
 8002c00:	08003578 	.word	0x08003578
 8002c04:	08003578 	.word	0x08003578
 8002c08:	0800357c 	.word	0x0800357c

08002c0c <memset>:
 8002c0c:	4402      	add	r2, r0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d100      	bne.n	8002c16 <memset+0xa>
 8002c14:	4770      	bx	lr
 8002c16:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1a:	e7f9      	b.n	8002c10 <memset+0x4>

08002c1c <siprintf>:
 8002c1c:	b40e      	push	{r1, r2, r3}
 8002c1e:	b500      	push	{lr}
 8002c20:	b09c      	sub	sp, #112	; 0x70
 8002c22:	ab1d      	add	r3, sp, #116	; 0x74
 8002c24:	9002      	str	r0, [sp, #8]
 8002c26:	9006      	str	r0, [sp, #24]
 8002c28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c2c:	4809      	ldr	r0, [pc, #36]	; (8002c54 <siprintf+0x38>)
 8002c2e:	9107      	str	r1, [sp, #28]
 8002c30:	9104      	str	r1, [sp, #16]
 8002c32:	4909      	ldr	r1, [pc, #36]	; (8002c58 <siprintf+0x3c>)
 8002c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c38:	9105      	str	r1, [sp, #20]
 8002c3a:	6800      	ldr	r0, [r0, #0]
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	a902      	add	r1, sp, #8
 8002c40:	f000 f868 	bl	8002d14 <_svfiprintf_r>
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	b01c      	add	sp, #112	; 0x70
 8002c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c50:	b003      	add	sp, #12
 8002c52:	4770      	bx	lr
 8002c54:	2000000c 	.word	0x2000000c
 8002c58:	ffff0208 	.word	0xffff0208

08002c5c <__ssputs_r>:
 8002c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c60:	688e      	ldr	r6, [r1, #8]
 8002c62:	429e      	cmp	r6, r3
 8002c64:	4682      	mov	sl, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	4690      	mov	r8, r2
 8002c6a:	461f      	mov	r7, r3
 8002c6c:	d838      	bhi.n	8002ce0 <__ssputs_r+0x84>
 8002c6e:	898a      	ldrh	r2, [r1, #12]
 8002c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c74:	d032      	beq.n	8002cdc <__ssputs_r+0x80>
 8002c76:	6825      	ldr	r5, [r4, #0]
 8002c78:	6909      	ldr	r1, [r1, #16]
 8002c7a:	eba5 0901 	sub.w	r9, r5, r1
 8002c7e:	6965      	ldr	r5, [r4, #20]
 8002c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c88:	3301      	adds	r3, #1
 8002c8a:	444b      	add	r3, r9
 8002c8c:	106d      	asrs	r5, r5, #1
 8002c8e:	429d      	cmp	r5, r3
 8002c90:	bf38      	it	cc
 8002c92:	461d      	movcc	r5, r3
 8002c94:	0553      	lsls	r3, r2, #21
 8002c96:	d531      	bpl.n	8002cfc <__ssputs_r+0xa0>
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f000 fb63 	bl	8003364 <_malloc_r>
 8002c9e:	4606      	mov	r6, r0
 8002ca0:	b950      	cbnz	r0, 8002cb8 <__ssputs_r+0x5c>
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	f8ca 3000 	str.w	r3, [sl]
 8002ca8:	89a3      	ldrh	r3, [r4, #12]
 8002caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cae:	81a3      	strh	r3, [r4, #12]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb8:	6921      	ldr	r1, [r4, #16]
 8002cba:	464a      	mov	r2, r9
 8002cbc:	f000 fabe 	bl	800323c <memcpy>
 8002cc0:	89a3      	ldrh	r3, [r4, #12]
 8002cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cca:	81a3      	strh	r3, [r4, #12]
 8002ccc:	6126      	str	r6, [r4, #16]
 8002cce:	6165      	str	r5, [r4, #20]
 8002cd0:	444e      	add	r6, r9
 8002cd2:	eba5 0509 	sub.w	r5, r5, r9
 8002cd6:	6026      	str	r6, [r4, #0]
 8002cd8:	60a5      	str	r5, [r4, #8]
 8002cda:	463e      	mov	r6, r7
 8002cdc:	42be      	cmp	r6, r7
 8002cde:	d900      	bls.n	8002ce2 <__ssputs_r+0x86>
 8002ce0:	463e      	mov	r6, r7
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	4632      	mov	r2, r6
 8002ce6:	4641      	mov	r1, r8
 8002ce8:	f000 fab6 	bl	8003258 <memmove>
 8002cec:	68a3      	ldr	r3, [r4, #8]
 8002cee:	1b9b      	subs	r3, r3, r6
 8002cf0:	60a3      	str	r3, [r4, #8]
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	4433      	add	r3, r6
 8002cf6:	6023      	str	r3, [r4, #0]
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e7db      	b.n	8002cb4 <__ssputs_r+0x58>
 8002cfc:	462a      	mov	r2, r5
 8002cfe:	f000 fba5 	bl	800344c <_realloc_r>
 8002d02:	4606      	mov	r6, r0
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d1e1      	bne.n	8002ccc <__ssputs_r+0x70>
 8002d08:	6921      	ldr	r1, [r4, #16]
 8002d0a:	4650      	mov	r0, sl
 8002d0c:	f000 fabe 	bl	800328c <_free_r>
 8002d10:	e7c7      	b.n	8002ca2 <__ssputs_r+0x46>
	...

08002d14 <_svfiprintf_r>:
 8002d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d18:	4698      	mov	r8, r3
 8002d1a:	898b      	ldrh	r3, [r1, #12]
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	b09d      	sub	sp, #116	; 0x74
 8002d20:	4607      	mov	r7, r0
 8002d22:	460d      	mov	r5, r1
 8002d24:	4614      	mov	r4, r2
 8002d26:	d50e      	bpl.n	8002d46 <_svfiprintf_r+0x32>
 8002d28:	690b      	ldr	r3, [r1, #16]
 8002d2a:	b963      	cbnz	r3, 8002d46 <_svfiprintf_r+0x32>
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	f000 fb19 	bl	8003364 <_malloc_r>
 8002d32:	6028      	str	r0, [r5, #0]
 8002d34:	6128      	str	r0, [r5, #16]
 8002d36:	b920      	cbnz	r0, 8002d42 <_svfiprintf_r+0x2e>
 8002d38:	230c      	movs	r3, #12
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	e0d1      	b.n	8002ee6 <_svfiprintf_r+0x1d2>
 8002d42:	2340      	movs	r3, #64	; 0x40
 8002d44:	616b      	str	r3, [r5, #20]
 8002d46:	2300      	movs	r3, #0
 8002d48:	9309      	str	r3, [sp, #36]	; 0x24
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d54:	2330      	movs	r3, #48	; 0x30
 8002d56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002f00 <_svfiprintf_r+0x1ec>
 8002d5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d5e:	f04f 0901 	mov.w	r9, #1
 8002d62:	4623      	mov	r3, r4
 8002d64:	469a      	mov	sl, r3
 8002d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d6a:	b10a      	cbz	r2, 8002d70 <_svfiprintf_r+0x5c>
 8002d6c:	2a25      	cmp	r2, #37	; 0x25
 8002d6e:	d1f9      	bne.n	8002d64 <_svfiprintf_r+0x50>
 8002d70:	ebba 0b04 	subs.w	fp, sl, r4
 8002d74:	d00b      	beq.n	8002d8e <_svfiprintf_r+0x7a>
 8002d76:	465b      	mov	r3, fp
 8002d78:	4622      	mov	r2, r4
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	4638      	mov	r0, r7
 8002d7e:	f7ff ff6d 	bl	8002c5c <__ssputs_r>
 8002d82:	3001      	adds	r0, #1
 8002d84:	f000 80aa 	beq.w	8002edc <_svfiprintf_r+0x1c8>
 8002d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d8a:	445a      	add	r2, fp
 8002d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80a2 	beq.w	8002edc <_svfiprintf_r+0x1c8>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002da2:	f10a 0a01 	add.w	sl, sl, #1
 8002da6:	9304      	str	r3, [sp, #16]
 8002da8:	9307      	str	r3, [sp, #28]
 8002daa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dae:	931a      	str	r3, [sp, #104]	; 0x68
 8002db0:	4654      	mov	r4, sl
 8002db2:	2205      	movs	r2, #5
 8002db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db8:	4851      	ldr	r0, [pc, #324]	; (8002f00 <_svfiprintf_r+0x1ec>)
 8002dba:	f7fd fa11 	bl	80001e0 <memchr>
 8002dbe:	9a04      	ldr	r2, [sp, #16]
 8002dc0:	b9d8      	cbnz	r0, 8002dfa <_svfiprintf_r+0xe6>
 8002dc2:	06d0      	lsls	r0, r2, #27
 8002dc4:	bf44      	itt	mi
 8002dc6:	2320      	movmi	r3, #32
 8002dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dcc:	0711      	lsls	r1, r2, #28
 8002dce:	bf44      	itt	mi
 8002dd0:	232b      	movmi	r3, #43	; 0x2b
 8002dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8002dda:	2b2a      	cmp	r3, #42	; 0x2a
 8002ddc:	d015      	beq.n	8002e0a <_svfiprintf_r+0xf6>
 8002dde:	9a07      	ldr	r2, [sp, #28]
 8002de0:	4654      	mov	r4, sl
 8002de2:	2000      	movs	r0, #0
 8002de4:	f04f 0c0a 	mov.w	ip, #10
 8002de8:	4621      	mov	r1, r4
 8002dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dee:	3b30      	subs	r3, #48	; 0x30
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	d94e      	bls.n	8002e92 <_svfiprintf_r+0x17e>
 8002df4:	b1b0      	cbz	r0, 8002e24 <_svfiprintf_r+0x110>
 8002df6:	9207      	str	r2, [sp, #28]
 8002df8:	e014      	b.n	8002e24 <_svfiprintf_r+0x110>
 8002dfa:	eba0 0308 	sub.w	r3, r0, r8
 8002dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8002e02:	4313      	orrs	r3, r2
 8002e04:	9304      	str	r3, [sp, #16]
 8002e06:	46a2      	mov	sl, r4
 8002e08:	e7d2      	b.n	8002db0 <_svfiprintf_r+0x9c>
 8002e0a:	9b03      	ldr	r3, [sp, #12]
 8002e0c:	1d19      	adds	r1, r3, #4
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	9103      	str	r1, [sp, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bfbb      	ittet	lt
 8002e16:	425b      	neglt	r3, r3
 8002e18:	f042 0202 	orrlt.w	r2, r2, #2
 8002e1c:	9307      	strge	r3, [sp, #28]
 8002e1e:	9307      	strlt	r3, [sp, #28]
 8002e20:	bfb8      	it	lt
 8002e22:	9204      	strlt	r2, [sp, #16]
 8002e24:	7823      	ldrb	r3, [r4, #0]
 8002e26:	2b2e      	cmp	r3, #46	; 0x2e
 8002e28:	d10c      	bne.n	8002e44 <_svfiprintf_r+0x130>
 8002e2a:	7863      	ldrb	r3, [r4, #1]
 8002e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e2e:	d135      	bne.n	8002e9c <_svfiprintf_r+0x188>
 8002e30:	9b03      	ldr	r3, [sp, #12]
 8002e32:	1d1a      	adds	r2, r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	9203      	str	r2, [sp, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bfb8      	it	lt
 8002e3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e40:	3402      	adds	r4, #2
 8002e42:	9305      	str	r3, [sp, #20]
 8002e44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f10 <_svfiprintf_r+0x1fc>
 8002e48:	7821      	ldrb	r1, [r4, #0]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	4650      	mov	r0, sl
 8002e4e:	f7fd f9c7 	bl	80001e0 <memchr>
 8002e52:	b140      	cbz	r0, 8002e66 <_svfiprintf_r+0x152>
 8002e54:	2340      	movs	r3, #64	; 0x40
 8002e56:	eba0 000a 	sub.w	r0, r0, sl
 8002e5a:	fa03 f000 	lsl.w	r0, r3, r0
 8002e5e:	9b04      	ldr	r3, [sp, #16]
 8002e60:	4303      	orrs	r3, r0
 8002e62:	3401      	adds	r4, #1
 8002e64:	9304      	str	r3, [sp, #16]
 8002e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e6a:	4826      	ldr	r0, [pc, #152]	; (8002f04 <_svfiprintf_r+0x1f0>)
 8002e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e70:	2206      	movs	r2, #6
 8002e72:	f7fd f9b5 	bl	80001e0 <memchr>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d038      	beq.n	8002eec <_svfiprintf_r+0x1d8>
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <_svfiprintf_r+0x1f4>)
 8002e7c:	bb1b      	cbnz	r3, 8002ec6 <_svfiprintf_r+0x1b2>
 8002e7e:	9b03      	ldr	r3, [sp, #12]
 8002e80:	3307      	adds	r3, #7
 8002e82:	f023 0307 	bic.w	r3, r3, #7
 8002e86:	3308      	adds	r3, #8
 8002e88:	9303      	str	r3, [sp, #12]
 8002e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e8c:	4433      	add	r3, r6
 8002e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e90:	e767      	b.n	8002d62 <_svfiprintf_r+0x4e>
 8002e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e96:	460c      	mov	r4, r1
 8002e98:	2001      	movs	r0, #1
 8002e9a:	e7a5      	b.n	8002de8 <_svfiprintf_r+0xd4>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	3401      	adds	r4, #1
 8002ea0:	9305      	str	r3, [sp, #20]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f04f 0c0a 	mov.w	ip, #10
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eae:	3a30      	subs	r2, #48	; 0x30
 8002eb0:	2a09      	cmp	r2, #9
 8002eb2:	d903      	bls.n	8002ebc <_svfiprintf_r+0x1a8>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0c5      	beq.n	8002e44 <_svfiprintf_r+0x130>
 8002eb8:	9105      	str	r1, [sp, #20]
 8002eba:	e7c3      	b.n	8002e44 <_svfiprintf_r+0x130>
 8002ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e7f0      	b.n	8002ea8 <_svfiprintf_r+0x194>
 8002ec6:	ab03      	add	r3, sp, #12
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	462a      	mov	r2, r5
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <_svfiprintf_r+0x1f8>)
 8002ece:	a904      	add	r1, sp, #16
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	f3af 8000 	nop.w
 8002ed6:	1c42      	adds	r2, r0, #1
 8002ed8:	4606      	mov	r6, r0
 8002eda:	d1d6      	bne.n	8002e8a <_svfiprintf_r+0x176>
 8002edc:	89ab      	ldrh	r3, [r5, #12]
 8002ede:	065b      	lsls	r3, r3, #25
 8002ee0:	f53f af2c 	bmi.w	8002d3c <_svfiprintf_r+0x28>
 8002ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ee6:	b01d      	add	sp, #116	; 0x74
 8002ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eec:	ab03      	add	r3, sp, #12
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	462a      	mov	r2, r5
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <_svfiprintf_r+0x1f8>)
 8002ef4:	a904      	add	r1, sp, #16
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	f000 f87a 	bl	8002ff0 <_printf_i>
 8002efc:	e7eb      	b.n	8002ed6 <_svfiprintf_r+0x1c2>
 8002efe:	bf00      	nop
 8002f00:	0800353c 	.word	0x0800353c
 8002f04:	08003546 	.word	0x08003546
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	08002c5d 	.word	0x08002c5d
 8002f10:	08003542 	.word	0x08003542

08002f14 <_printf_common>:
 8002f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f18:	4616      	mov	r6, r2
 8002f1a:	4699      	mov	r9, r3
 8002f1c:	688a      	ldr	r2, [r1, #8]
 8002f1e:	690b      	ldr	r3, [r1, #16]
 8002f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f24:	4293      	cmp	r3, r2
 8002f26:	bfb8      	it	lt
 8002f28:	4613      	movlt	r3, r2
 8002f2a:	6033      	str	r3, [r6, #0]
 8002f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f30:	4607      	mov	r7, r0
 8002f32:	460c      	mov	r4, r1
 8002f34:	b10a      	cbz	r2, 8002f3a <_printf_common+0x26>
 8002f36:	3301      	adds	r3, #1
 8002f38:	6033      	str	r3, [r6, #0]
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	0699      	lsls	r1, r3, #26
 8002f3e:	bf42      	ittt	mi
 8002f40:	6833      	ldrmi	r3, [r6, #0]
 8002f42:	3302      	addmi	r3, #2
 8002f44:	6033      	strmi	r3, [r6, #0]
 8002f46:	6825      	ldr	r5, [r4, #0]
 8002f48:	f015 0506 	ands.w	r5, r5, #6
 8002f4c:	d106      	bne.n	8002f5c <_printf_common+0x48>
 8002f4e:	f104 0a19 	add.w	sl, r4, #25
 8002f52:	68e3      	ldr	r3, [r4, #12]
 8002f54:	6832      	ldr	r2, [r6, #0]
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	42ab      	cmp	r3, r5
 8002f5a:	dc26      	bgt.n	8002faa <_printf_common+0x96>
 8002f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f60:	1e13      	subs	r3, r2, #0
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	bf18      	it	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	0692      	lsls	r2, r2, #26
 8002f6a:	d42b      	bmi.n	8002fc4 <_printf_common+0xb0>
 8002f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f70:	4649      	mov	r1, r9
 8002f72:	4638      	mov	r0, r7
 8002f74:	47c0      	blx	r8
 8002f76:	3001      	adds	r0, #1
 8002f78:	d01e      	beq.n	8002fb8 <_printf_common+0xa4>
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	68e5      	ldr	r5, [r4, #12]
 8002f7e:	6832      	ldr	r2, [r6, #0]
 8002f80:	f003 0306 	and.w	r3, r3, #6
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	bf08      	it	eq
 8002f88:	1aad      	subeq	r5, r5, r2
 8002f8a:	68a3      	ldr	r3, [r4, #8]
 8002f8c:	6922      	ldr	r2, [r4, #16]
 8002f8e:	bf0c      	ite	eq
 8002f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f94:	2500      	movne	r5, #0
 8002f96:	4293      	cmp	r3, r2
 8002f98:	bfc4      	itt	gt
 8002f9a:	1a9b      	subgt	r3, r3, r2
 8002f9c:	18ed      	addgt	r5, r5, r3
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	341a      	adds	r4, #26
 8002fa2:	42b5      	cmp	r5, r6
 8002fa4:	d11a      	bne.n	8002fdc <_printf_common+0xc8>
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	e008      	b.n	8002fbc <_printf_common+0xa8>
 8002faa:	2301      	movs	r3, #1
 8002fac:	4652      	mov	r2, sl
 8002fae:	4649      	mov	r1, r9
 8002fb0:	4638      	mov	r0, r7
 8002fb2:	47c0      	blx	r8
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d103      	bne.n	8002fc0 <_printf_common+0xac>
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc0:	3501      	adds	r5, #1
 8002fc2:	e7c6      	b.n	8002f52 <_printf_common+0x3e>
 8002fc4:	18e1      	adds	r1, r4, r3
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	2030      	movs	r0, #48	; 0x30
 8002fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fce:	4422      	add	r2, r4
 8002fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fd8:	3302      	adds	r3, #2
 8002fda:	e7c7      	b.n	8002f6c <_printf_common+0x58>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	4622      	mov	r2, r4
 8002fe0:	4649      	mov	r1, r9
 8002fe2:	4638      	mov	r0, r7
 8002fe4:	47c0      	blx	r8
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	d0e6      	beq.n	8002fb8 <_printf_common+0xa4>
 8002fea:	3601      	adds	r6, #1
 8002fec:	e7d9      	b.n	8002fa2 <_printf_common+0x8e>
	...

08002ff0 <_printf_i>:
 8002ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff4:	7e0f      	ldrb	r7, [r1, #24]
 8002ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ff8:	2f78      	cmp	r7, #120	; 0x78
 8002ffa:	4691      	mov	r9, r2
 8002ffc:	4680      	mov	r8, r0
 8002ffe:	460c      	mov	r4, r1
 8003000:	469a      	mov	sl, r3
 8003002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003006:	d807      	bhi.n	8003018 <_printf_i+0x28>
 8003008:	2f62      	cmp	r7, #98	; 0x62
 800300a:	d80a      	bhi.n	8003022 <_printf_i+0x32>
 800300c:	2f00      	cmp	r7, #0
 800300e:	f000 80d8 	beq.w	80031c2 <_printf_i+0x1d2>
 8003012:	2f58      	cmp	r7, #88	; 0x58
 8003014:	f000 80a3 	beq.w	800315e <_printf_i+0x16e>
 8003018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800301c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003020:	e03a      	b.n	8003098 <_printf_i+0xa8>
 8003022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003026:	2b15      	cmp	r3, #21
 8003028:	d8f6      	bhi.n	8003018 <_printf_i+0x28>
 800302a:	a101      	add	r1, pc, #4	; (adr r1, 8003030 <_printf_i+0x40>)
 800302c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003030:	08003089 	.word	0x08003089
 8003034:	0800309d 	.word	0x0800309d
 8003038:	08003019 	.word	0x08003019
 800303c:	08003019 	.word	0x08003019
 8003040:	08003019 	.word	0x08003019
 8003044:	08003019 	.word	0x08003019
 8003048:	0800309d 	.word	0x0800309d
 800304c:	08003019 	.word	0x08003019
 8003050:	08003019 	.word	0x08003019
 8003054:	08003019 	.word	0x08003019
 8003058:	08003019 	.word	0x08003019
 800305c:	080031a9 	.word	0x080031a9
 8003060:	080030cd 	.word	0x080030cd
 8003064:	0800318b 	.word	0x0800318b
 8003068:	08003019 	.word	0x08003019
 800306c:	08003019 	.word	0x08003019
 8003070:	080031cb 	.word	0x080031cb
 8003074:	08003019 	.word	0x08003019
 8003078:	080030cd 	.word	0x080030cd
 800307c:	08003019 	.word	0x08003019
 8003080:	08003019 	.word	0x08003019
 8003084:	08003193 	.word	0x08003193
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	1d1a      	adds	r2, r3, #4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	602a      	str	r2, [r5, #0]
 8003090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003098:	2301      	movs	r3, #1
 800309a:	e0a3      	b.n	80031e4 <_printf_i+0x1f4>
 800309c:	6820      	ldr	r0, [r4, #0]
 800309e:	6829      	ldr	r1, [r5, #0]
 80030a0:	0606      	lsls	r6, r0, #24
 80030a2:	f101 0304 	add.w	r3, r1, #4
 80030a6:	d50a      	bpl.n	80030be <_printf_i+0xce>
 80030a8:	680e      	ldr	r6, [r1, #0]
 80030aa:	602b      	str	r3, [r5, #0]
 80030ac:	2e00      	cmp	r6, #0
 80030ae:	da03      	bge.n	80030b8 <_printf_i+0xc8>
 80030b0:	232d      	movs	r3, #45	; 0x2d
 80030b2:	4276      	negs	r6, r6
 80030b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b8:	485e      	ldr	r0, [pc, #376]	; (8003234 <_printf_i+0x244>)
 80030ba:	230a      	movs	r3, #10
 80030bc:	e019      	b.n	80030f2 <_printf_i+0x102>
 80030be:	680e      	ldr	r6, [r1, #0]
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030c6:	bf18      	it	ne
 80030c8:	b236      	sxthne	r6, r6
 80030ca:	e7ef      	b.n	80030ac <_printf_i+0xbc>
 80030cc:	682b      	ldr	r3, [r5, #0]
 80030ce:	6820      	ldr	r0, [r4, #0]
 80030d0:	1d19      	adds	r1, r3, #4
 80030d2:	6029      	str	r1, [r5, #0]
 80030d4:	0601      	lsls	r1, r0, #24
 80030d6:	d501      	bpl.n	80030dc <_printf_i+0xec>
 80030d8:	681e      	ldr	r6, [r3, #0]
 80030da:	e002      	b.n	80030e2 <_printf_i+0xf2>
 80030dc:	0646      	lsls	r6, r0, #25
 80030de:	d5fb      	bpl.n	80030d8 <_printf_i+0xe8>
 80030e0:	881e      	ldrh	r6, [r3, #0]
 80030e2:	4854      	ldr	r0, [pc, #336]	; (8003234 <_printf_i+0x244>)
 80030e4:	2f6f      	cmp	r7, #111	; 0x6f
 80030e6:	bf0c      	ite	eq
 80030e8:	2308      	moveq	r3, #8
 80030ea:	230a      	movne	r3, #10
 80030ec:	2100      	movs	r1, #0
 80030ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030f2:	6865      	ldr	r5, [r4, #4]
 80030f4:	60a5      	str	r5, [r4, #8]
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	bfa2      	ittt	ge
 80030fa:	6821      	ldrge	r1, [r4, #0]
 80030fc:	f021 0104 	bicge.w	r1, r1, #4
 8003100:	6021      	strge	r1, [r4, #0]
 8003102:	b90e      	cbnz	r6, 8003108 <_printf_i+0x118>
 8003104:	2d00      	cmp	r5, #0
 8003106:	d04d      	beq.n	80031a4 <_printf_i+0x1b4>
 8003108:	4615      	mov	r5, r2
 800310a:	fbb6 f1f3 	udiv	r1, r6, r3
 800310e:	fb03 6711 	mls	r7, r3, r1, r6
 8003112:	5dc7      	ldrb	r7, [r0, r7]
 8003114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003118:	4637      	mov	r7, r6
 800311a:	42bb      	cmp	r3, r7
 800311c:	460e      	mov	r6, r1
 800311e:	d9f4      	bls.n	800310a <_printf_i+0x11a>
 8003120:	2b08      	cmp	r3, #8
 8003122:	d10b      	bne.n	800313c <_printf_i+0x14c>
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	07de      	lsls	r6, r3, #31
 8003128:	d508      	bpl.n	800313c <_printf_i+0x14c>
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	6861      	ldr	r1, [r4, #4]
 800312e:	4299      	cmp	r1, r3
 8003130:	bfde      	ittt	le
 8003132:	2330      	movle	r3, #48	; 0x30
 8003134:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003138:	f105 35ff 	addle.w	r5, r5, #4294967295
 800313c:	1b52      	subs	r2, r2, r5
 800313e:	6122      	str	r2, [r4, #16]
 8003140:	f8cd a000 	str.w	sl, [sp]
 8003144:	464b      	mov	r3, r9
 8003146:	aa03      	add	r2, sp, #12
 8003148:	4621      	mov	r1, r4
 800314a:	4640      	mov	r0, r8
 800314c:	f7ff fee2 	bl	8002f14 <_printf_common>
 8003150:	3001      	adds	r0, #1
 8003152:	d14c      	bne.n	80031ee <_printf_i+0x1fe>
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	b004      	add	sp, #16
 800315a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800315e:	4835      	ldr	r0, [pc, #212]	; (8003234 <_printf_i+0x244>)
 8003160:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003164:	6829      	ldr	r1, [r5, #0]
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	f851 6b04 	ldr.w	r6, [r1], #4
 800316c:	6029      	str	r1, [r5, #0]
 800316e:	061d      	lsls	r5, r3, #24
 8003170:	d514      	bpl.n	800319c <_printf_i+0x1ac>
 8003172:	07df      	lsls	r7, r3, #31
 8003174:	bf44      	itt	mi
 8003176:	f043 0320 	orrmi.w	r3, r3, #32
 800317a:	6023      	strmi	r3, [r4, #0]
 800317c:	b91e      	cbnz	r6, 8003186 <_printf_i+0x196>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	f023 0320 	bic.w	r3, r3, #32
 8003184:	6023      	str	r3, [r4, #0]
 8003186:	2310      	movs	r3, #16
 8003188:	e7b0      	b.n	80030ec <_printf_i+0xfc>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	f043 0320 	orr.w	r3, r3, #32
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	2378      	movs	r3, #120	; 0x78
 8003194:	4828      	ldr	r0, [pc, #160]	; (8003238 <_printf_i+0x248>)
 8003196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800319a:	e7e3      	b.n	8003164 <_printf_i+0x174>
 800319c:	0659      	lsls	r1, r3, #25
 800319e:	bf48      	it	mi
 80031a0:	b2b6      	uxthmi	r6, r6
 80031a2:	e7e6      	b.n	8003172 <_printf_i+0x182>
 80031a4:	4615      	mov	r5, r2
 80031a6:	e7bb      	b.n	8003120 <_printf_i+0x130>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	6826      	ldr	r6, [r4, #0]
 80031ac:	6961      	ldr	r1, [r4, #20]
 80031ae:	1d18      	adds	r0, r3, #4
 80031b0:	6028      	str	r0, [r5, #0]
 80031b2:	0635      	lsls	r5, r6, #24
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	d501      	bpl.n	80031bc <_printf_i+0x1cc>
 80031b8:	6019      	str	r1, [r3, #0]
 80031ba:	e002      	b.n	80031c2 <_printf_i+0x1d2>
 80031bc:	0670      	lsls	r0, r6, #25
 80031be:	d5fb      	bpl.n	80031b8 <_printf_i+0x1c8>
 80031c0:	8019      	strh	r1, [r3, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	6123      	str	r3, [r4, #16]
 80031c6:	4615      	mov	r5, r2
 80031c8:	e7ba      	b.n	8003140 <_printf_i+0x150>
 80031ca:	682b      	ldr	r3, [r5, #0]
 80031cc:	1d1a      	adds	r2, r3, #4
 80031ce:	602a      	str	r2, [r5, #0]
 80031d0:	681d      	ldr	r5, [r3, #0]
 80031d2:	6862      	ldr	r2, [r4, #4]
 80031d4:	2100      	movs	r1, #0
 80031d6:	4628      	mov	r0, r5
 80031d8:	f7fd f802 	bl	80001e0 <memchr>
 80031dc:	b108      	cbz	r0, 80031e2 <_printf_i+0x1f2>
 80031de:	1b40      	subs	r0, r0, r5
 80031e0:	6060      	str	r0, [r4, #4]
 80031e2:	6863      	ldr	r3, [r4, #4]
 80031e4:	6123      	str	r3, [r4, #16]
 80031e6:	2300      	movs	r3, #0
 80031e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ec:	e7a8      	b.n	8003140 <_printf_i+0x150>
 80031ee:	6923      	ldr	r3, [r4, #16]
 80031f0:	462a      	mov	r2, r5
 80031f2:	4649      	mov	r1, r9
 80031f4:	4640      	mov	r0, r8
 80031f6:	47d0      	blx	sl
 80031f8:	3001      	adds	r0, #1
 80031fa:	d0ab      	beq.n	8003154 <_printf_i+0x164>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	079b      	lsls	r3, r3, #30
 8003200:	d413      	bmi.n	800322a <_printf_i+0x23a>
 8003202:	68e0      	ldr	r0, [r4, #12]
 8003204:	9b03      	ldr	r3, [sp, #12]
 8003206:	4298      	cmp	r0, r3
 8003208:	bfb8      	it	lt
 800320a:	4618      	movlt	r0, r3
 800320c:	e7a4      	b.n	8003158 <_printf_i+0x168>
 800320e:	2301      	movs	r3, #1
 8003210:	4632      	mov	r2, r6
 8003212:	4649      	mov	r1, r9
 8003214:	4640      	mov	r0, r8
 8003216:	47d0      	blx	sl
 8003218:	3001      	adds	r0, #1
 800321a:	d09b      	beq.n	8003154 <_printf_i+0x164>
 800321c:	3501      	adds	r5, #1
 800321e:	68e3      	ldr	r3, [r4, #12]
 8003220:	9903      	ldr	r1, [sp, #12]
 8003222:	1a5b      	subs	r3, r3, r1
 8003224:	42ab      	cmp	r3, r5
 8003226:	dcf2      	bgt.n	800320e <_printf_i+0x21e>
 8003228:	e7eb      	b.n	8003202 <_printf_i+0x212>
 800322a:	2500      	movs	r5, #0
 800322c:	f104 0619 	add.w	r6, r4, #25
 8003230:	e7f5      	b.n	800321e <_printf_i+0x22e>
 8003232:	bf00      	nop
 8003234:	0800354d 	.word	0x0800354d
 8003238:	0800355e 	.word	0x0800355e

0800323c <memcpy>:
 800323c:	440a      	add	r2, r1
 800323e:	4291      	cmp	r1, r2
 8003240:	f100 33ff 	add.w	r3, r0, #4294967295
 8003244:	d100      	bne.n	8003248 <memcpy+0xc>
 8003246:	4770      	bx	lr
 8003248:	b510      	push	{r4, lr}
 800324a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800324e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003252:	4291      	cmp	r1, r2
 8003254:	d1f9      	bne.n	800324a <memcpy+0xe>
 8003256:	bd10      	pop	{r4, pc}

08003258 <memmove>:
 8003258:	4288      	cmp	r0, r1
 800325a:	b510      	push	{r4, lr}
 800325c:	eb01 0402 	add.w	r4, r1, r2
 8003260:	d902      	bls.n	8003268 <memmove+0x10>
 8003262:	4284      	cmp	r4, r0
 8003264:	4623      	mov	r3, r4
 8003266:	d807      	bhi.n	8003278 <memmove+0x20>
 8003268:	1e43      	subs	r3, r0, #1
 800326a:	42a1      	cmp	r1, r4
 800326c:	d008      	beq.n	8003280 <memmove+0x28>
 800326e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003276:	e7f8      	b.n	800326a <memmove+0x12>
 8003278:	4402      	add	r2, r0
 800327a:	4601      	mov	r1, r0
 800327c:	428a      	cmp	r2, r1
 800327e:	d100      	bne.n	8003282 <memmove+0x2a>
 8003280:	bd10      	pop	{r4, pc}
 8003282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800328a:	e7f7      	b.n	800327c <memmove+0x24>

0800328c <_free_r>:
 800328c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800328e:	2900      	cmp	r1, #0
 8003290:	d044      	beq.n	800331c <_free_r+0x90>
 8003292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003296:	9001      	str	r0, [sp, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f1a1 0404 	sub.w	r4, r1, #4
 800329e:	bfb8      	it	lt
 80032a0:	18e4      	addlt	r4, r4, r3
 80032a2:	f000 f913 	bl	80034cc <__malloc_lock>
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <_free_r+0x94>)
 80032a8:	9801      	ldr	r0, [sp, #4]
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	b933      	cbnz	r3, 80032bc <_free_r+0x30>
 80032ae:	6063      	str	r3, [r4, #4]
 80032b0:	6014      	str	r4, [r2, #0]
 80032b2:	b003      	add	sp, #12
 80032b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032b8:	f000 b90e 	b.w	80034d8 <__malloc_unlock>
 80032bc:	42a3      	cmp	r3, r4
 80032be:	d908      	bls.n	80032d2 <_free_r+0x46>
 80032c0:	6825      	ldr	r5, [r4, #0]
 80032c2:	1961      	adds	r1, r4, r5
 80032c4:	428b      	cmp	r3, r1
 80032c6:	bf01      	itttt	eq
 80032c8:	6819      	ldreq	r1, [r3, #0]
 80032ca:	685b      	ldreq	r3, [r3, #4]
 80032cc:	1949      	addeq	r1, r1, r5
 80032ce:	6021      	streq	r1, [r4, #0]
 80032d0:	e7ed      	b.n	80032ae <_free_r+0x22>
 80032d2:	461a      	mov	r2, r3
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	b10b      	cbz	r3, 80032dc <_free_r+0x50>
 80032d8:	42a3      	cmp	r3, r4
 80032da:	d9fa      	bls.n	80032d2 <_free_r+0x46>
 80032dc:	6811      	ldr	r1, [r2, #0]
 80032de:	1855      	adds	r5, r2, r1
 80032e0:	42a5      	cmp	r5, r4
 80032e2:	d10b      	bne.n	80032fc <_free_r+0x70>
 80032e4:	6824      	ldr	r4, [r4, #0]
 80032e6:	4421      	add	r1, r4
 80032e8:	1854      	adds	r4, r2, r1
 80032ea:	42a3      	cmp	r3, r4
 80032ec:	6011      	str	r1, [r2, #0]
 80032ee:	d1e0      	bne.n	80032b2 <_free_r+0x26>
 80032f0:	681c      	ldr	r4, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	6053      	str	r3, [r2, #4]
 80032f6:	4421      	add	r1, r4
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	e7da      	b.n	80032b2 <_free_r+0x26>
 80032fc:	d902      	bls.n	8003304 <_free_r+0x78>
 80032fe:	230c      	movs	r3, #12
 8003300:	6003      	str	r3, [r0, #0]
 8003302:	e7d6      	b.n	80032b2 <_free_r+0x26>
 8003304:	6825      	ldr	r5, [r4, #0]
 8003306:	1961      	adds	r1, r4, r5
 8003308:	428b      	cmp	r3, r1
 800330a:	bf04      	itt	eq
 800330c:	6819      	ldreq	r1, [r3, #0]
 800330e:	685b      	ldreq	r3, [r3, #4]
 8003310:	6063      	str	r3, [r4, #4]
 8003312:	bf04      	itt	eq
 8003314:	1949      	addeq	r1, r1, r5
 8003316:	6021      	streq	r1, [r4, #0]
 8003318:	6054      	str	r4, [r2, #4]
 800331a:	e7ca      	b.n	80032b2 <_free_r+0x26>
 800331c:	b003      	add	sp, #12
 800331e:	bd30      	pop	{r4, r5, pc}
 8003320:	200001bc 	.word	0x200001bc

08003324 <sbrk_aligned>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	4e0e      	ldr	r6, [pc, #56]	; (8003360 <sbrk_aligned+0x3c>)
 8003328:	460c      	mov	r4, r1
 800332a:	6831      	ldr	r1, [r6, #0]
 800332c:	4605      	mov	r5, r0
 800332e:	b911      	cbnz	r1, 8003336 <sbrk_aligned+0x12>
 8003330:	f000 f8bc 	bl	80034ac <_sbrk_r>
 8003334:	6030      	str	r0, [r6, #0]
 8003336:	4621      	mov	r1, r4
 8003338:	4628      	mov	r0, r5
 800333a:	f000 f8b7 	bl	80034ac <_sbrk_r>
 800333e:	1c43      	adds	r3, r0, #1
 8003340:	d00a      	beq.n	8003358 <sbrk_aligned+0x34>
 8003342:	1cc4      	adds	r4, r0, #3
 8003344:	f024 0403 	bic.w	r4, r4, #3
 8003348:	42a0      	cmp	r0, r4
 800334a:	d007      	beq.n	800335c <sbrk_aligned+0x38>
 800334c:	1a21      	subs	r1, r4, r0
 800334e:	4628      	mov	r0, r5
 8003350:	f000 f8ac 	bl	80034ac <_sbrk_r>
 8003354:	3001      	adds	r0, #1
 8003356:	d101      	bne.n	800335c <sbrk_aligned+0x38>
 8003358:	f04f 34ff 	mov.w	r4, #4294967295
 800335c:	4620      	mov	r0, r4
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	200001c0 	.word	0x200001c0

08003364 <_malloc_r>:
 8003364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003368:	1ccd      	adds	r5, r1, #3
 800336a:	f025 0503 	bic.w	r5, r5, #3
 800336e:	3508      	adds	r5, #8
 8003370:	2d0c      	cmp	r5, #12
 8003372:	bf38      	it	cc
 8003374:	250c      	movcc	r5, #12
 8003376:	2d00      	cmp	r5, #0
 8003378:	4607      	mov	r7, r0
 800337a:	db01      	blt.n	8003380 <_malloc_r+0x1c>
 800337c:	42a9      	cmp	r1, r5
 800337e:	d905      	bls.n	800338c <_malloc_r+0x28>
 8003380:	230c      	movs	r3, #12
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	2600      	movs	r6, #0
 8003386:	4630      	mov	r0, r6
 8003388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800338c:	4e2e      	ldr	r6, [pc, #184]	; (8003448 <_malloc_r+0xe4>)
 800338e:	f000 f89d 	bl	80034cc <__malloc_lock>
 8003392:	6833      	ldr	r3, [r6, #0]
 8003394:	461c      	mov	r4, r3
 8003396:	bb34      	cbnz	r4, 80033e6 <_malloc_r+0x82>
 8003398:	4629      	mov	r1, r5
 800339a:	4638      	mov	r0, r7
 800339c:	f7ff ffc2 	bl	8003324 <sbrk_aligned>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	4604      	mov	r4, r0
 80033a4:	d14d      	bne.n	8003442 <_malloc_r+0xde>
 80033a6:	6834      	ldr	r4, [r6, #0]
 80033a8:	4626      	mov	r6, r4
 80033aa:	2e00      	cmp	r6, #0
 80033ac:	d140      	bne.n	8003430 <_malloc_r+0xcc>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	4631      	mov	r1, r6
 80033b2:	4638      	mov	r0, r7
 80033b4:	eb04 0803 	add.w	r8, r4, r3
 80033b8:	f000 f878 	bl	80034ac <_sbrk_r>
 80033bc:	4580      	cmp	r8, r0
 80033be:	d13a      	bne.n	8003436 <_malloc_r+0xd2>
 80033c0:	6821      	ldr	r1, [r4, #0]
 80033c2:	3503      	adds	r5, #3
 80033c4:	1a6d      	subs	r5, r5, r1
 80033c6:	f025 0503 	bic.w	r5, r5, #3
 80033ca:	3508      	adds	r5, #8
 80033cc:	2d0c      	cmp	r5, #12
 80033ce:	bf38      	it	cc
 80033d0:	250c      	movcc	r5, #12
 80033d2:	4629      	mov	r1, r5
 80033d4:	4638      	mov	r0, r7
 80033d6:	f7ff ffa5 	bl	8003324 <sbrk_aligned>
 80033da:	3001      	adds	r0, #1
 80033dc:	d02b      	beq.n	8003436 <_malloc_r+0xd2>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	442b      	add	r3, r5
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	e00e      	b.n	8003404 <_malloc_r+0xa0>
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	1b52      	subs	r2, r2, r5
 80033ea:	d41e      	bmi.n	800342a <_malloc_r+0xc6>
 80033ec:	2a0b      	cmp	r2, #11
 80033ee:	d916      	bls.n	800341e <_malloc_r+0xba>
 80033f0:	1961      	adds	r1, r4, r5
 80033f2:	42a3      	cmp	r3, r4
 80033f4:	6025      	str	r5, [r4, #0]
 80033f6:	bf18      	it	ne
 80033f8:	6059      	strne	r1, [r3, #4]
 80033fa:	6863      	ldr	r3, [r4, #4]
 80033fc:	bf08      	it	eq
 80033fe:	6031      	streq	r1, [r6, #0]
 8003400:	5162      	str	r2, [r4, r5]
 8003402:	604b      	str	r3, [r1, #4]
 8003404:	4638      	mov	r0, r7
 8003406:	f104 060b 	add.w	r6, r4, #11
 800340a:	f000 f865 	bl	80034d8 <__malloc_unlock>
 800340e:	f026 0607 	bic.w	r6, r6, #7
 8003412:	1d23      	adds	r3, r4, #4
 8003414:	1af2      	subs	r2, r6, r3
 8003416:	d0b6      	beq.n	8003386 <_malloc_r+0x22>
 8003418:	1b9b      	subs	r3, r3, r6
 800341a:	50a3      	str	r3, [r4, r2]
 800341c:	e7b3      	b.n	8003386 <_malloc_r+0x22>
 800341e:	6862      	ldr	r2, [r4, #4]
 8003420:	42a3      	cmp	r3, r4
 8003422:	bf0c      	ite	eq
 8003424:	6032      	streq	r2, [r6, #0]
 8003426:	605a      	strne	r2, [r3, #4]
 8003428:	e7ec      	b.n	8003404 <_malloc_r+0xa0>
 800342a:	4623      	mov	r3, r4
 800342c:	6864      	ldr	r4, [r4, #4]
 800342e:	e7b2      	b.n	8003396 <_malloc_r+0x32>
 8003430:	4634      	mov	r4, r6
 8003432:	6876      	ldr	r6, [r6, #4]
 8003434:	e7b9      	b.n	80033aa <_malloc_r+0x46>
 8003436:	230c      	movs	r3, #12
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	4638      	mov	r0, r7
 800343c:	f000 f84c 	bl	80034d8 <__malloc_unlock>
 8003440:	e7a1      	b.n	8003386 <_malloc_r+0x22>
 8003442:	6025      	str	r5, [r4, #0]
 8003444:	e7de      	b.n	8003404 <_malloc_r+0xa0>
 8003446:	bf00      	nop
 8003448:	200001bc 	.word	0x200001bc

0800344c <_realloc_r>:
 800344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003450:	4680      	mov	r8, r0
 8003452:	4614      	mov	r4, r2
 8003454:	460e      	mov	r6, r1
 8003456:	b921      	cbnz	r1, 8003462 <_realloc_r+0x16>
 8003458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800345c:	4611      	mov	r1, r2
 800345e:	f7ff bf81 	b.w	8003364 <_malloc_r>
 8003462:	b92a      	cbnz	r2, 8003470 <_realloc_r+0x24>
 8003464:	f7ff ff12 	bl	800328c <_free_r>
 8003468:	4625      	mov	r5, r4
 800346a:	4628      	mov	r0, r5
 800346c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003470:	f000 f838 	bl	80034e4 <_malloc_usable_size_r>
 8003474:	4284      	cmp	r4, r0
 8003476:	4607      	mov	r7, r0
 8003478:	d802      	bhi.n	8003480 <_realloc_r+0x34>
 800347a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800347e:	d812      	bhi.n	80034a6 <_realloc_r+0x5a>
 8003480:	4621      	mov	r1, r4
 8003482:	4640      	mov	r0, r8
 8003484:	f7ff ff6e 	bl	8003364 <_malloc_r>
 8003488:	4605      	mov	r5, r0
 800348a:	2800      	cmp	r0, #0
 800348c:	d0ed      	beq.n	800346a <_realloc_r+0x1e>
 800348e:	42bc      	cmp	r4, r7
 8003490:	4622      	mov	r2, r4
 8003492:	4631      	mov	r1, r6
 8003494:	bf28      	it	cs
 8003496:	463a      	movcs	r2, r7
 8003498:	f7ff fed0 	bl	800323c <memcpy>
 800349c:	4631      	mov	r1, r6
 800349e:	4640      	mov	r0, r8
 80034a0:	f7ff fef4 	bl	800328c <_free_r>
 80034a4:	e7e1      	b.n	800346a <_realloc_r+0x1e>
 80034a6:	4635      	mov	r5, r6
 80034a8:	e7df      	b.n	800346a <_realloc_r+0x1e>
	...

080034ac <_sbrk_r>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	4d06      	ldr	r5, [pc, #24]	; (80034c8 <_sbrk_r+0x1c>)
 80034b0:	2300      	movs	r3, #0
 80034b2:	4604      	mov	r4, r0
 80034b4:	4608      	mov	r0, r1
 80034b6:	602b      	str	r3, [r5, #0]
 80034b8:	f7fd fb3a 	bl	8000b30 <_sbrk>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_sbrk_r+0x1a>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_sbrk_r+0x1a>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	200001c4 	.word	0x200001c4

080034cc <__malloc_lock>:
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <__malloc_lock+0x8>)
 80034ce:	f000 b811 	b.w	80034f4 <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	200001c8 	.word	0x200001c8

080034d8 <__malloc_unlock>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__malloc_unlock+0x8>)
 80034da:	f000 b80c 	b.w	80034f6 <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	200001c8 	.word	0x200001c8

080034e4 <_malloc_usable_size_r>:
 80034e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e8:	1f18      	subs	r0, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bfbc      	itt	lt
 80034ee:	580b      	ldrlt	r3, [r1, r0]
 80034f0:	18c0      	addlt	r0, r0, r3
 80034f2:	4770      	bx	lr

080034f4 <__retarget_lock_acquire_recursive>:
 80034f4:	4770      	bx	lr

080034f6 <__retarget_lock_release_recursive>:
 80034f6:	4770      	bx	lr

080034f8 <_init>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

08003504 <_fini>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr
