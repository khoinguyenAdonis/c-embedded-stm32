
FreeRtos_MessesgeBuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd8  08003bd8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be0  08003be0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000d50  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  20000d68  20000d68  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f76a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002750  00000000  00000000  0002f7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00031f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d90  00000000  00000000  00032dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022696  00000000  00000000  00033b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104a7  00000000  00000000  000561f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d10b9  00000000  00000000  0006669d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137756  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c6c  00000000  00000000  001377a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b44 	.word	0x08003b44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08003b44 	.word	0x08003b44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000724 	.word	0x20000724
 8000514:	20000778 	.word	0x20000778

08000518 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b08e      	sub	sp, #56	; 0x38
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  cmd_buffer_init();
 800051e:	f003 fa73 	bl	8003a08 <cmd_buffer_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_FREERTOS_Init+0x5c>)
 8000524:	f107 041c 	add.w	r4, r7, #28
 8000528:	461d      	mov	r5, r3
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f001 fb96 	bl	8001c6e <osThreadCreate>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <MX_FREERTOS_Init+0x60>)
 8000546:	6013      	str	r3, [r2, #0]

  /* definition and creation of CmdProcessing */
  osThreadStaticDef(CmdProcessing, CmdProcessingRun, osPriorityNormal, 0, 256, CmdProcessingBuffer, &CmdProcessingControlBlock);
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_FREERTOS_Init+0x64>)
 800054a:	463c      	mov	r4, r7
 800054c:	461d      	mov	r5, r3
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000552:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CmdProcessingHandle = osThreadCreate(osThread(CmdProcessing), NULL);
 800055a:	463b      	mov	r3, r7
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fb85 	bl	8001c6e <osThreadCreate>
 8000564:	4603      	mov	r3, r0
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <MX_FREERTOS_Init+0x68>)
 8000568:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800056a:	bf00      	nop
 800056c:	3738      	adds	r7, #56	; 0x38
 800056e:	46bd      	mov	sp, r7
 8000570:	bdb0      	pop	{r4, r5, r7, pc}
 8000572:	bf00      	nop
 8000574:	08003b78 	.word	0x08003b78
 8000578:	20000074 	.word	0x20000074
 800057c:	08003b94 	.word	0x08003b94
 8000580:	200002cc 	.word	0x200002cc

08000584 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
	 send_xbyte_buffer(&xbyte);
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <StartDefaultTask+0x18>)
 800058e:	f003 fa53 	bl	8003a38 <send_xbyte_buffer>
     osDelay(500);
 8000592:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000596:	f001 fb8f 	bl	8001cb8 <osDelay>
	 send_xbyte_buffer(&xbyte);
 800059a:	e7f7      	b.n	800058c <StartDefaultTask+0x8>
 800059c:	20000000 	.word	0x20000000

080005a0 <CmdProcessingRun>:
* @retval None
*/
/* USER CODE END Header_CmdProcessingRun */

void CmdProcessingRun(void const * argument)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	uint32_t len;
	//HAL_TIM_Base_Start_IT(&htim6);
  for(;;)
  {
	 memset(receivedxbyte,MAX_SERIAL_BUFFER_LEN,0x00);
	 len = received_messagebuffer(receivedxbyte,MAX_SERIAL_BUFFER_LEN);
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <CmdProcessingRun+0x1c>)
 80005ac:	f003 fa58 	bl	8003a60 <received_messagebuffer>
 80005b0:	60f8      	str	r0, [r7, #12]
     osDelay(300);
 80005b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005b6:	f001 fb7f 	bl	8001cb8 <osDelay>
	 memset(receivedxbyte,MAX_SERIAL_BUFFER_LEN,0x00);
 80005ba:	e7f5      	b.n	80005a8 <CmdProcessingRun+0x8>
 80005bc:	20000034 	.word	0x20000034

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_GPIO_Init+0x4c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a0f      	ldr	r2, [pc, #60]	; (800060c <MX_GPIO_Init+0x4c>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_GPIO_Init+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_GPIO_Init+0x4c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <MX_GPIO_Init+0x4c>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_GPIO_Init+0x4c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fa12 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f80a 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f7ff ffd0 	bl	80005c0 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000620:	f000 f984 	bl	800092c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000624:	f7ff ff78 	bl	8000518 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000628:	f001 fb1a 	bl	8001c60 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x1c>
	...

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fa78 	bl	8003b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <SystemClock_Config+0xc8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <SystemClock_Config+0xc8>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <SystemClock_Config+0xc8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <SystemClock_Config+0xcc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a20      	ldr	r2, [pc, #128]	; (80006fc <SystemClock_Config+0xcc>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <SystemClock_Config+0xcc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006a4:	2348      	movs	r3, #72	; 0x48
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fae5 	bl	8000c84 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 f82d 	bl	800071e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fd47 	bl	8001174 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006ec:	f000 f817 	bl	800071e <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000710:	d101      	bne.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000712:	f000 f9b5 	bl	8000a80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000722:	b672      	cpsid	i
}
 8000724:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000726:	e7fe      	b.n	8000726 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_MspInit+0x54>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <HAL_MspInit+0x54>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x54>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <HAL_MspInit+0x54>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_MspInit+0x54>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_MspInit+0x54>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	210f      	movs	r1, #15
 800076a:	f06f 0001 	mvn.w	r0, #1
 800076e:	f000 fa5f 	bl	8000c30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <HAL_InitTick+0xe8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a33      	ldr	r2, [pc, #204]	; (8000868 <HAL_InitTick+0xe8>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b31      	ldr	r3, [pc, #196]	; (8000868 <HAL_InitTick+0xe8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ac:	f107 0210 	add.w	r2, r7, #16
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fee8 	bl	800158c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d103      	bne.n	80007ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007c6:	f000 fecd 	bl	8001564 <HAL_RCC_GetPCLK1Freq>
 80007ca:	6378      	str	r0, [r7, #52]	; 0x34
 80007cc:	e004      	b.n	80007d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007ce:	f000 fec9 	bl	8001564 <HAL_RCC_GetPCLK1Freq>
 80007d2:	4603      	mov	r3, r0
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007da:	4a24      	ldr	r2, [pc, #144]	; (800086c <HAL_InitTick+0xec>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	0c9b      	lsrs	r3, r3, #18
 80007e2:	3b01      	subs	r3, #1
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <HAL_InitTick+0xf0>)
 80007e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <HAL_InitTick+0xf0>)
 80007f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <HAL_InitTick+0xf0>)
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_InitTick+0xf0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_InitTick+0xf0>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <HAL_InitTick+0xf0>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800080e:	4818      	ldr	r0, [pc, #96]	; (8000870 <HAL_InitTick+0xf0>)
 8000810:	f000 feee 	bl	80015f0 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800081a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800081e:	2b00      	cmp	r3, #0
 8000820:	d11b      	bne.n	800085a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000822:	4813      	ldr	r0, [pc, #76]	; (8000870 <HAL_InitTick+0xf0>)
 8000824:	f000 ff34 	bl	8001690 <HAL_TIM_Base_Start_IT>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800082e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000832:	2b00      	cmp	r3, #0
 8000834:	d111      	bne.n	800085a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000836:	201c      	movs	r0, #28
 8000838:	f000 fa16 	bl	8000c68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d808      	bhi.n	8000854 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000842:	2200      	movs	r2, #0
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	201c      	movs	r0, #28
 8000848:	f000 f9f2 	bl	8000c30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800084c:	4a09      	ldr	r2, [pc, #36]	; (8000874 <HAL_InitTick+0xf4>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	e002      	b.n	800085a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800085a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800085e:	4618      	mov	r0, r3
 8000860:	3738      	adds	r7, #56	; 0x38
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	431bde83 	.word	0x431bde83
 8000870:	20000978 	.word	0x20000978
 8000874:	2000000c 	.word	0x2000000c

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <TIM2_IRQHandler+0x10>)
 80008aa:	f000 ff61 	bl	8001770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000978 	.word	0x20000978

080008b8 <TIM6_DAC_IRQHandler>:
BaseType_t x;
/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008b8:	b598      	push	{r3, r4, r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008bc:	480e      	ldr	r0, [pc, #56]	; (80008f8 <TIM6_DAC_IRQHandler+0x40>)
 80008be:	f000 ff57 	bl	8001770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  Send_Data_Isr(cmd,strlen(cmd));
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <TIM6_DAC_IRQHandler+0x44>)
 80008c4:	681c      	ldr	r4, [r3, #0]
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <TIM6_DAC_IRQHandler+0x44>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fc80 	bl	80001d0 <strlen>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4620      	mov	r0, r4
 80008d6:	f003 f8e1 	bl	8003a9c <Send_Data_Isr>
  if(x){taskYIELD()};
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <TIM6_DAC_IRQHandler+0x48>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d007      	beq.n	80008f2 <TIM6_DAC_IRQHandler+0x3a>
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <TIM6_DAC_IRQHandler+0x4c>)
 80008e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	f3bf 8f4f 	dsb	sy
 80008ee:	f3bf 8f6f 	isb	sy
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd98      	pop	{r3, r4, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200009c4 	.word	0x200009c4
 80008fc:	20000004 	.word	0x20000004
 8000900:	200009c0 	.word	0x200009c0
 8000904:	e000ed04 	.word	0xe000ed04

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_TIM6_Init+0x64>)
 800093c:	4a15      	ldr	r2, [pc, #84]	; (8000994 <MX_TIM6_Init+0x68>)
 800093e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000;
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_TIM6_Init+0x64>)
 8000942:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000946:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_TIM6_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_TIM6_Init+0x64>)
 8000950:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000954:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_TIM6_Init+0x64>)
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_TIM6_Init+0x64>)
 800095e:	f000 fe47 	bl	80015f0 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000968:	f7ff fed9 	bl	800071e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_TIM6_Init+0x64>)
 800097a:	f001 f8c9 	bl	8001b10 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000984:	f7ff fecb 	bl	800071e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200009c4 	.word	0x200009c4
 8000994:	40001000 	.word	0x40001000

08000998 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_TIM_Base_MspInit+0x48>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d115      	bne.n	80009d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_TIM_Base_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <HAL_TIM_Base_MspInit+0x4c>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_TIM_Base_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2105      	movs	r1, #5
 80009ca:	2036      	movs	r0, #54	; 0x36
 80009cc:	f000 f930 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009d0:	2036      	movs	r0, #54	; 0x36
 80009d2:	f000 f949 	bl	8000c68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40001000 	.word	0x40001000
 80009e4:	40023800 	.word	0x40023800

080009e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ee:	490e      	ldr	r1, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a04:	4c0b      	ldr	r4, [pc, #44]	; (8000a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a12:	f7ff ff79 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f003 f85b 	bl	8003ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1a:	f7ff fdf9 	bl	8000610 <main>
  bx  lr    
 8000a1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000a2c:	08003be8 	.word	0x08003be8
  ldr r2, =_sbss
 8000a30:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000a34:	20000d68 	.word	0x20000d68

08000a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_Init+0x40>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_Init+0x40>)
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x40>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f8d8 	bl	8000c1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f7ff fe88 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff fe5a 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023c00 	.word	0x40023c00

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000010 	.word	0x20000010
 8000aa4:	20000a0c 	.word	0x20000a0c

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000a0c 	.word	0x20000a0c

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db0b      	blt.n	8000b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f003 021f 	and.w	r2, r3, #31
 8000b3c:	4907      	ldr	r1, [pc, #28]	; (8000b5c <__NVIC_EnableIRQ+0x38>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	2001      	movs	r0, #1
 8000b46:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ff4c 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c42:	f7ff ff61 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	68b9      	ldr	r1, [r7, #8]
 8000c4c:	6978      	ldr	r0, [r7, #20]
 8000c4e:	f7ff ffb1 	bl	8000bb4 <NVIC_EncodePriority>
 8000c52:	4602      	mov	r2, r0
 8000c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff80 	bl	8000b60 <__NVIC_SetPriority>
}
 8000c60:	bf00      	nop
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff54 	bl	8000b24 <__NVIC_EnableIRQ>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e267      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d075      	beq.n	8000d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ca2:	4b88      	ldr	r3, [pc, #544]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d00c      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cae:	4b85      	ldr	r3, [pc, #532]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d112      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cba:	4b82      	ldr	r3, [pc, #520]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cc6:	d10b      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc8:	4b7e      	ldr	r3, [pc, #504]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d05b      	beq.n	8000d8c <HAL_RCC_OscConfig+0x108>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d157      	bne.n	8000d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e242      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce8:	d106      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x74>
 8000cea:	4b76      	ldr	r3, [pc, #472]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a75      	ldr	r2, [pc, #468]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e01d      	b.n	8000d34 <HAL_RCC_OscConfig+0xb0>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d00:	d10c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x98>
 8000d02:	4b70      	ldr	r3, [pc, #448]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a6f      	ldr	r2, [pc, #444]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4b6d      	ldr	r3, [pc, #436]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a6c      	ldr	r2, [pc, #432]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e00b      	b.n	8000d34 <HAL_RCC_OscConfig+0xb0>
 8000d1c:	4b69      	ldr	r3, [pc, #420]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a68      	ldr	r2, [pc, #416]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b66      	ldr	r3, [pc, #408]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a65      	ldr	r2, [pc, #404]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d013      	beq.n	8000d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff feb4 	bl	8000aa8 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff feb0 	bl	8000aa8 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	; 0x64
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e207      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	4b5b      	ldr	r3, [pc, #364]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f0      	beq.n	8000d44 <HAL_RCC_OscConfig+0xc0>
 8000d62:	e014      	b.n	8000d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fea0 	bl	8000aa8 <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6c:	f7ff fe9c 	bl	8000aa8 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b64      	cmp	r3, #100	; 0x64
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e1f3      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7e:	4b51      	ldr	r3, [pc, #324]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0xe8>
 8000d8a:	e000      	b.n	8000d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d063      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d9a:	4b4a      	ldr	r3, [pc, #296]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000da6:	4b47      	ldr	r3, [pc, #284]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d11c      	bne.n	8000dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000db2:	4b44      	ldr	r3, [pc, #272]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d116      	bne.n	8000dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dbe:	4b41      	ldr	r3, [pc, #260]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x152>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e1c7      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4937      	ldr	r1, [pc, #220]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dea:	e03a      	b.n	8000e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d020      	beq.n	8000e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <HAL_RCC_OscConfig+0x244>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfa:	f7ff fe55 	bl	8000aa8 <HAL_GetTick>
 8000dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e00:	e008      	b.n	8000e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e02:	f7ff fe51 	bl	8000aa8 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e1a8      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f0      	beq.n	8000e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4925      	ldr	r1, [pc, #148]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000e30:	4313      	orrs	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
 8000e34:	e015      	b.n	8000e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <HAL_RCC_OscConfig+0x244>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fe34 	bl	8000aa8 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e44:	f7ff fe30 	bl	8000aa8 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e187      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d036      	beq.n	8000edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d016      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_RCC_OscConfig+0x248>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fe14 	bl	8000aa8 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e84:	f7ff fe10 	bl	8000aa8 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e167      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_RCC_OscConfig+0x240>)
 8000e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0x200>
 8000ea2:	e01b      	b.n	8000edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_RCC_OscConfig+0x248>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fdfd 	bl	8000aa8 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb0:	e00e      	b.n	8000ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fdf9 	bl	8000aa8 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d907      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e150      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	42470000 	.word	0x42470000
 8000ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed0:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1ea      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 8097 	beq.w	8001018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eee:	4b81      	ldr	r3, [pc, #516]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10f      	bne.n	8000f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b7d      	ldr	r3, [pc, #500]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a7c      	ldr	r2, [pc, #496]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b7a      	ldr	r3, [pc, #488]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f16:	2301      	movs	r3, #1
 8000f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1a:	4b77      	ldr	r3, [pc, #476]	; (80010f8 <HAL_RCC_OscConfig+0x474>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d118      	bne.n	8000f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f26:	4b74      	ldr	r3, [pc, #464]	; (80010f8 <HAL_RCC_OscConfig+0x474>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a73      	ldr	r2, [pc, #460]	; (80010f8 <HAL_RCC_OscConfig+0x474>)
 8000f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fdb9 	bl	8000aa8 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f3a:	f7ff fdb5 	bl	8000aa8 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e10c      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4c:	4b6a      	ldr	r3, [pc, #424]	; (80010f8 <HAL_RCC_OscConfig+0x474>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f0      	beq.n	8000f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d106      	bne.n	8000f6e <HAL_RCC_OscConfig+0x2ea>
 8000f60:	4b64      	ldr	r3, [pc, #400]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f64:	4a63      	ldr	r2, [pc, #396]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f6c:	e01c      	b.n	8000fa8 <HAL_RCC_OscConfig+0x324>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x30c>
 8000f76:	4b5f      	ldr	r3, [pc, #380]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7a:	4a5e      	ldr	r2, [pc, #376]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6713      	str	r3, [r2, #112]	; 0x70
 8000f82:	4b5c      	ldr	r3, [pc, #368]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f86:	4a5b      	ldr	r2, [pc, #364]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f8e:	e00b      	b.n	8000fa8 <HAL_RCC_OscConfig+0x324>
 8000f90:	4b58      	ldr	r3, [pc, #352]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f94:	4a57      	ldr	r2, [pc, #348]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f96:	f023 0301 	bic.w	r3, r3, #1
 8000f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f9c:	4b55      	ldr	r3, [pc, #340]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa0:	4a54      	ldr	r2, [pc, #336]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000fa2:	f023 0304 	bic.w	r3, r3, #4
 8000fa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d015      	beq.n	8000fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fd7a 	bl	8000aa8 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb6:	e00a      	b.n	8000fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fd76 	bl	8000aa8 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e0cb      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fce:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0ee      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x334>
 8000fda:	e014      	b.n	8001006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fd64 	bl	8000aa8 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fd60 	bl	8000aa8 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e0b5      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8000ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1ee      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d105      	bne.n	8001018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100c:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a38      	ldr	r2, [pc, #224]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8001012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80a1 	beq.w	8001164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001022:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b08      	cmp	r3, #8
 800102c:	d05c      	beq.n	80010e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d141      	bne.n	80010ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <HAL_RCC_OscConfig+0x478>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fd34 	bl	8000aa8 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001044:	f7ff fd30 	bl	8000aa8 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e087      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001056:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69da      	ldr	r2, [r3, #28]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001070:	019b      	lsls	r3, r3, #6
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	085b      	lsrs	r3, r3, #1
 800107a:	3b01      	subs	r3, #1
 800107c:	041b      	lsls	r3, r3, #16
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	061b      	lsls	r3, r3, #24
 8001086:	491b      	ldr	r1, [pc, #108]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_RCC_OscConfig+0x478>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fd09 	bl	8000aa8 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109a:	f7ff fd05 	bl	8000aa8 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e05c      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x416>
 80010b8:	e054      	b.n	8001164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_RCC_OscConfig+0x478>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fcf2 	bl	8000aa8 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c8:	f7ff fcee 	bl	8000aa8 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e045      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_RCC_OscConfig+0x470>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x444>
 80010e6:	e03d      	b.n	8001164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d107      	bne.n	8001100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e038      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000
 80010fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_RCC_OscConfig+0x4ec>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d028      	beq.n	8001160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001118:	429a      	cmp	r2, r3
 800111a:	d121      	bne.n	8001160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001126:	429a      	cmp	r2, r3
 8001128:	d11a      	bne.n	8001160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001130:	4013      	ands	r3, r2
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001138:	4293      	cmp	r3, r2
 800113a:	d111      	bne.n	8001160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	085b      	lsrs	r3, r3, #1
 8001148:	3b01      	subs	r3, #1
 800114a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800114c:	429a      	cmp	r2, r3
 800114e:	d107      	bne.n	8001160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800115c:	429a      	cmp	r2, r3
 800115e:	d001      	beq.n	8001164 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0cc      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001188:	4b68      	ldr	r3, [pc, #416]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d90c      	bls.n	80011b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4b65      	ldr	r3, [pc, #404]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b63      	ldr	r3, [pc, #396]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0b8      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d020      	beq.n	80011fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c8:	4b59      	ldr	r3, [pc, #356]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4a58      	ldr	r2, [pc, #352]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e0:	4b53      	ldr	r3, [pc, #332]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a52      	ldr	r2, [pc, #328]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ec:	4b50      	ldr	r3, [pc, #320]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	494d      	ldr	r1, [pc, #308]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d044      	beq.n	8001294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d119      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e07f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d003      	beq.n	8001232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800122e:	2b03      	cmp	r3, #3
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e06f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e067      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001252:	4b37      	ldr	r3, [pc, #220]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f023 0203 	bic.w	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4934      	ldr	r1, [pc, #208]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	4313      	orrs	r3, r2
 8001262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001264:	f7ff fc20 	bl	8000aa8 <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	e00a      	b.n	8001282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f7ff fc1c 	bl	8000aa8 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	; 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e04f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 020c 	and.w	r2, r3, #12
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	429a      	cmp	r2, r3
 8001292:	d1eb      	bne.n	800126c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d20c      	bcs.n	80012bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e032      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4916      	ldr	r1, [pc, #88]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d009      	beq.n	80012fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	490e      	ldr	r1, [pc, #56]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012fa:	f000 f821 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	490a      	ldr	r1, [pc, #40]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	5ccb      	ldrb	r3, [r1, r3]
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_RCC_ClockConfig+0x1c8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fa30 	bl	8000780 <HAL_InitTick>

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023c00 	.word	0x40023c00
 8001330:	40023800 	.word	0x40023800
 8001334:	08003bc0 	.word	0x08003bc0
 8001338:	20000008 	.word	0x20000008
 800133c:	2000000c 	.word	0x2000000c

08001340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001344:	b094      	sub	sp, #80	; 0x50
 8001346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	647b      	str	r3, [r7, #68]	; 0x44
 800134c:	2300      	movs	r3, #0
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001350:	2300      	movs	r3, #0
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001358:	4b79      	ldr	r3, [pc, #484]	; (8001540 <HAL_RCC_GetSysClockFreq+0x200>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b08      	cmp	r3, #8
 8001362:	d00d      	beq.n	8001380 <HAL_RCC_GetSysClockFreq+0x40>
 8001364:	2b08      	cmp	r3, #8
 8001366:	f200 80e1 	bhi.w	800152c <HAL_RCC_GetSysClockFreq+0x1ec>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x34>
 800136e:	2b04      	cmp	r3, #4
 8001370:	d003      	beq.n	800137a <HAL_RCC_GetSysClockFreq+0x3a>
 8001372:	e0db      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001374:	4b73      	ldr	r3, [pc, #460]	; (8001544 <HAL_RCC_GetSysClockFreq+0x204>)
 8001376:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001378:	e0db      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800137a:	4b73      	ldr	r3, [pc, #460]	; (8001548 <HAL_RCC_GetSysClockFreq+0x208>)
 800137c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800137e:	e0d8      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001380:	4b6f      	ldr	r3, [pc, #444]	; (8001540 <HAL_RCC_GetSysClockFreq+0x200>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001388:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800138a:	4b6d      	ldr	r3, [pc, #436]	; (8001540 <HAL_RCC_GetSysClockFreq+0x200>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d063      	beq.n	800145e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001396:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_GetSysClockFreq+0x200>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	099b      	lsrs	r3, r3, #6
 800139c:	2200      	movs	r2, #0
 800139e:	63bb      	str	r3, [r7, #56]	; 0x38
 80013a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80013a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
 80013ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80013b2:	4622      	mov	r2, r4
 80013b4:	462b      	mov	r3, r5
 80013b6:	f04f 0000 	mov.w	r0, #0
 80013ba:	f04f 0100 	mov.w	r1, #0
 80013be:	0159      	lsls	r1, r3, #5
 80013c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013c4:	0150      	lsls	r0, r2, #5
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4621      	mov	r1, r4
 80013cc:	1a51      	subs	r1, r2, r1
 80013ce:	6139      	str	r1, [r7, #16]
 80013d0:	4629      	mov	r1, r5
 80013d2:	eb63 0301 	sbc.w	r3, r3, r1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013e4:	4659      	mov	r1, fp
 80013e6:	018b      	lsls	r3, r1, #6
 80013e8:	4651      	mov	r1, sl
 80013ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013ee:	4651      	mov	r1, sl
 80013f0:	018a      	lsls	r2, r1, #6
 80013f2:	4651      	mov	r1, sl
 80013f4:	ebb2 0801 	subs.w	r8, r2, r1
 80013f8:	4659      	mov	r1, fp
 80013fa:	eb63 0901 	sbc.w	r9, r3, r1
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800140a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800140e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001412:	4690      	mov	r8, r2
 8001414:	4699      	mov	r9, r3
 8001416:	4623      	mov	r3, r4
 8001418:	eb18 0303 	adds.w	r3, r8, r3
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	462b      	mov	r3, r5
 8001420:	eb49 0303 	adc.w	r3, r9, r3
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001432:	4629      	mov	r1, r5
 8001434:	024b      	lsls	r3, r1, #9
 8001436:	4621      	mov	r1, r4
 8001438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800143c:	4621      	mov	r1, r4
 800143e:	024a      	lsls	r2, r1, #9
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001446:	2200      	movs	r2, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
 800144a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800144c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001450:	f7fe fec6 	bl	80001e0 <__aeabi_uldivmod>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4613      	mov	r3, r2
 800145a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800145c:	e058      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_RCC_GetSysClockFreq+0x200>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	099b      	lsrs	r3, r3, #6
 8001464:	2200      	movs	r2, #0
 8001466:	4618      	mov	r0, r3
 8001468:	4611      	mov	r1, r2
 800146a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800146e:	623b      	str	r3, [r7, #32]
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001478:	4642      	mov	r2, r8
 800147a:	464b      	mov	r3, r9
 800147c:	f04f 0000 	mov.w	r0, #0
 8001480:	f04f 0100 	mov.w	r1, #0
 8001484:	0159      	lsls	r1, r3, #5
 8001486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800148a:	0150      	lsls	r0, r2, #5
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4641      	mov	r1, r8
 8001492:	ebb2 0a01 	subs.w	sl, r2, r1
 8001496:	4649      	mov	r1, r9
 8001498:	eb63 0b01 	sbc.w	fp, r3, r1
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014b0:	ebb2 040a 	subs.w	r4, r2, sl
 80014b4:	eb63 050b 	sbc.w	r5, r3, fp
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	00eb      	lsls	r3, r5, #3
 80014c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014c6:	00e2      	lsls	r2, r4, #3
 80014c8:	4614      	mov	r4, r2
 80014ca:	461d      	mov	r5, r3
 80014cc:	4643      	mov	r3, r8
 80014ce:	18e3      	adds	r3, r4, r3
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	464b      	mov	r3, r9
 80014d4:	eb45 0303 	adc.w	r3, r5, r3
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014e6:	4629      	mov	r1, r5
 80014e8:	028b      	lsls	r3, r1, #10
 80014ea:	4621      	mov	r1, r4
 80014ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014f0:	4621      	mov	r1, r4
 80014f2:	028a      	lsls	r2, r1, #10
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fa:	2200      	movs	r2, #0
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	61fa      	str	r2, [r7, #28]
 8001500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001504:	f7fe fe6c 	bl	80001e0 <__aeabi_uldivmod>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4613      	mov	r3, r2
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_GetSysClockFreq+0x200>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	0c1b      	lsrs	r3, r3, #16
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	3301      	adds	r3, #1
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001520:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800152a:	e002      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_GetSysClockFreq+0x204>)
 800152e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001534:	4618      	mov	r0, r3
 8001536:	3750      	adds	r7, #80	; 0x50
 8001538:	46bd      	mov	sp, r7
 800153a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	00f42400 	.word	0x00f42400
 8001548:	007a1200 	.word	0x007a1200

0800154c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_RCC_GetHCLKFreq+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001568:	f7ff fff0 	bl	800154c <HAL_RCC_GetHCLKFreq>
 800156c:	4602      	mov	r2, r0
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	0a9b      	lsrs	r3, r3, #10
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	4903      	ldr	r1, [pc, #12]	; (8001588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800157a:	5ccb      	ldrb	r3, [r1, r3]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	08003bd0 	.word	0x08003bd0

0800158c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	220f      	movs	r2, #15
 800159a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_RCC_GetClockConfig+0x5c>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0203 	and.w	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_RCC_GetClockConfig+0x5c>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_RCC_GetClockConfig+0x5c>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_RCC_GetClockConfig+0x5c>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_RCC_GetClockConfig+0x60>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0207 	and.w	r2, r3, #7
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	601a      	str	r2, [r3, #0]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40023c00 	.word	0x40023c00

080015f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e041      	b.n	8001686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff f9be 	bl	8000998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3304      	adds	r3, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f000 f9ce 	bl	80019d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d001      	beq.n	80016a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e04e      	b.n	8001746 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a23      	ldr	r2, [pc, #140]	; (8001754 <HAL_TIM_Base_Start_IT+0xc4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d022      	beq.n	8001710 <HAL_TIM_Base_Start_IT+0x80>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d2:	d01d      	beq.n	8001710 <HAL_TIM_Base_Start_IT+0x80>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_TIM_Base_Start_IT+0xc8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d018      	beq.n	8001710 <HAL_TIM_Base_Start_IT+0x80>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_TIM_Base_Start_IT+0xcc>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d013      	beq.n	8001710 <HAL_TIM_Base_Start_IT+0x80>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_TIM_Base_Start_IT+0xd0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00e      	beq.n	8001710 <HAL_TIM_Base_Start_IT+0x80>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_TIM_Base_Start_IT+0xd4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d009      	beq.n	8001710 <HAL_TIM_Base_Start_IT+0x80>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a19      	ldr	r2, [pc, #100]	; (8001768 <HAL_TIM_Base_Start_IT+0xd8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d004      	beq.n	8001710 <HAL_TIM_Base_Start_IT+0x80>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_TIM_Base_Start_IT+0xdc>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d111      	bne.n	8001734 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b06      	cmp	r3, #6
 8001720:	d010      	beq.n	8001744 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0201 	orr.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001732:	e007      	b.n	8001744 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40010000 	.word	0x40010000
 8001758:	40000400 	.word	0x40000400
 800175c:	40000800 	.word	0x40000800
 8001760:	40000c00 	.word	0x40000c00
 8001764:	40010400 	.word	0x40010400
 8001768:	40014000 	.word	0x40014000
 800176c:	40001800 	.word	0x40001800

08001770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b02      	cmp	r3, #2
 8001784:	d122      	bne.n	80017cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b02      	cmp	r3, #2
 8001792:	d11b      	bne.n	80017cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0202 	mvn.w	r2, #2
 800179c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f8ee 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 80017b8:	e005      	b.n	80017c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f8e0 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f8f1 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d122      	bne.n	8001820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d11b      	bne.n	8001820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0204 	mvn.w	r2, #4
 80017f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2202      	movs	r2, #2
 80017f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f8c4 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 800180c:	e005      	b.n	800181a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f8b6 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f8c7 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b08      	cmp	r3, #8
 800182c:	d122      	bne.n	8001874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b08      	cmp	r3, #8
 800183a:	d11b      	bne.n	8001874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f06f 0208 	mvn.w	r2, #8
 8001844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2204      	movs	r2, #4
 800184a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f89a 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 8001860:	e005      	b.n	800186e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f88c 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f89d 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b10      	cmp	r3, #16
 8001880:	d122      	bne.n	80018c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b10      	cmp	r3, #16
 800188e:	d11b      	bne.n	80018c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0210 	mvn.w	r2, #16
 8001898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2208      	movs	r2, #8
 800189e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f870 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 80018b4:	e005      	b.n	80018c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f862 	bl	8001980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f873 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d10e      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d107      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0201 	mvn.w	r2, #1
 80018ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7fe ff06 	bl	8000700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	2b80      	cmp	r3, #128	; 0x80
 8001900:	d10e      	bne.n	8001920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190c:	2b80      	cmp	r3, #128	; 0x80
 800190e:	d107      	bne.n	8001920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f97e 	bl	8001c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192a:	2b40      	cmp	r3, #64	; 0x40
 800192c:	d10e      	bne.n	800194c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001938:	2b40      	cmp	r3, #64	; 0x40
 800193a:	d107      	bne.n	800194c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f838 	bl	80019bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	2b20      	cmp	r3, #32
 8001958:	d10e      	bne.n	8001978 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	2b20      	cmp	r3, #32
 8001966:	d107      	bne.n	8001978 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 0220 	mvn.w	r2, #32
 8001970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f948 	bl	8001c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a40      	ldr	r2, [pc, #256]	; (8001ae4 <TIM_Base_SetConfig+0x114>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d013      	beq.n	8001a10 <TIM_Base_SetConfig+0x40>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ee:	d00f      	beq.n	8001a10 <TIM_Base_SetConfig+0x40>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a3d      	ldr	r2, [pc, #244]	; (8001ae8 <TIM_Base_SetConfig+0x118>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d00b      	beq.n	8001a10 <TIM_Base_SetConfig+0x40>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3c      	ldr	r2, [pc, #240]	; (8001aec <TIM_Base_SetConfig+0x11c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d007      	beq.n	8001a10 <TIM_Base_SetConfig+0x40>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3b      	ldr	r2, [pc, #236]	; (8001af0 <TIM_Base_SetConfig+0x120>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d003      	beq.n	8001a10 <TIM_Base_SetConfig+0x40>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <TIM_Base_SetConfig+0x124>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d108      	bne.n	8001a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a2f      	ldr	r2, [pc, #188]	; (8001ae4 <TIM_Base_SetConfig+0x114>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d02b      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a30:	d027      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a2c      	ldr	r2, [pc, #176]	; (8001ae8 <TIM_Base_SetConfig+0x118>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d023      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <TIM_Base_SetConfig+0x11c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a2a      	ldr	r2, [pc, #168]	; (8001af0 <TIM_Base_SetConfig+0x120>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01b      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <TIM_Base_SetConfig+0x124>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d017      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <TIM_Base_SetConfig+0x128>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a27      	ldr	r2, [pc, #156]	; (8001afc <TIM_Base_SetConfig+0x12c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00f      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <TIM_Base_SetConfig+0x130>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00b      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <TIM_Base_SetConfig+0x134>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <TIM_Base_SetConfig+0x138>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d003      	beq.n	8001a82 <TIM_Base_SetConfig+0xb2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a23      	ldr	r2, [pc, #140]	; (8001b0c <TIM_Base_SetConfig+0x13c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d108      	bne.n	8001a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <TIM_Base_SetConfig+0x114>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d003      	beq.n	8001ac8 <TIM_Base_SetConfig+0xf8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <TIM_Base_SetConfig+0x124>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d103      	bne.n	8001ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	615a      	str	r2, [r3, #20]
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	40000800 	.word	0x40000800
 8001af0:	40000c00 	.word	0x40000c00
 8001af4:	40010400 	.word	0x40010400
 8001af8:	40014000 	.word	0x40014000
 8001afc:	40014400 	.word	0x40014400
 8001b00:	40014800 	.word	0x40014800
 8001b04:	40001800 	.word	0x40001800
 8001b08:	40001c00 	.word	0x40001c00
 8001b0c:	40002000 	.word	0x40002000

08001b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e05a      	b.n	8001bde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b74:	d01d      	beq.n	8001bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d018      	beq.n	8001bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00e      	beq.n	8001bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10c      	bne.n	8001bcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40000800 	.word	0x40000800
 8001bf8:	40000c00 	.word	0x40000c00
 8001bfc:	40010400 	.word	0x40010400
 8001c00:	40014000 	.word	0x40014000
 8001c04:	40001800 	.word	0x40001800

08001c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c42:	2b84      	cmp	r3, #132	; 0x84
 8001c44:	d005      	beq.n	8001c52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001c46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3303      	adds	r3, #3
 8001c50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c64:	f000 fe8c 	bl	8002980 <vTaskStartScheduler>
  
  return osOK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c70:	b089      	sub	sp, #36	; 0x24
 8001c72:	af04      	add	r7, sp, #16
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685c      	ldr	r4, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681d      	ldr	r5, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691e      	ldr	r6, [r3, #16]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ffd0 	bl	8001c30 <makeFreeRtosPriority>
 8001c90:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c9a:	9202      	str	r2, [sp, #8]
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	9100      	str	r1, [sp, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4632      	mov	r2, r6
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f000 fceb 	bl	8002682 <xTaskCreateStatic>
 8001cac:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cb8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <osDelay+0x16>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	e000      	b.n	8001cd0 <osDelay+0x18>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fe21 	bl	8002918 <vTaskDelay>
  
  return osOK;
 8001cd6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f103 0208 	add.w	r2, r3, #8
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f103 0208 	add.w	r2, r3, #8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f103 0208 	add.w	r2, r3, #8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b085      	sub	sp, #20
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d103      	bne.n	8001da2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e00c      	b.n	8001dbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3308      	adds	r3, #8
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e002      	b.n	8001db0 <vListInsert+0x2e>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d2f6      	bcs.n	8001daa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	601a      	str	r2, [r3, #0]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6892      	ldr	r2, [r2, #8]
 8001e0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6852      	ldr	r2, [r2, #4]
 8001e14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d103      	bne.n	8001e28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	1e5a      	subs	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b090      	sub	sp, #64	; 0x40
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8001e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <xStreamBufferGenericCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e64:	f383 8811 	msr	BASEPRI, r3
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e72:	bf00      	nop
 8001e74:	e7fe      	b.n	8001e74 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 8001e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <xStreamBufferGenericCreateStatic+0x4a>
	__asm volatile
 8001e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e80:	f383 8811 	msr	BASEPRI, r3
 8001e84:	f3bf 8f6f 	isb	sy
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e8e:	bf00      	nop
 8001e90:	e7fe      	b.n	8001e90 <xStreamBufferGenericCreateStatic+0x48>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d90a      	bls.n	8001eb0 <xStreamBufferGenericCreateStatic+0x68>
	__asm volatile
 8001e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	623b      	str	r3, [r7, #32]
}
 8001eac:	bf00      	nop
 8001eae:	e7fe      	b.n	8001eae <xStreamBufferGenericCreateStatic+0x66>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <xStreamBufferGenericCreateStatic+0x72>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <xStreamBufferGenericCreateStatic+0x80>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001ec6:	e002      	b.n	8001ece <xStreamBufferGenericCreateStatic+0x86>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d80a      	bhi.n	8001eea <xStreamBufferGenericCreateStatic+0xa2>
	__asm volatile
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	61fb      	str	r3, [r7, #28]
}
 8001ee6:	bf00      	nop
 8001ee8:	e7fe      	b.n	8001ee8 <xStreamBufferGenericCreateStatic+0xa0>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8001eea:	2320      	movs	r3, #32
 8001eec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d00a      	beq.n	8001f0a <xStreamBufferGenericCreateStatic+0xc2>
	__asm volatile
 8001ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef8:	f383 8811 	msr	BASEPRI, r3
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	61bb      	str	r3, [r7, #24]
}
 8001f06:	bf00      	nop
 8001f08:	e7fe      	b.n	8001f08 <xStreamBufferGenericCreateStatic+0xc0>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <xStreamBufferGenericCreateStatic+0xf4>
 8001f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d012      	beq.n	8001f3c <xStreamBufferGenericCreateStatic+0xf4>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8001f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	6839      	ldr	r1, [r7, #0]
 8001f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f24:	f000 fb7a 	bl	800261c <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8001f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2a:	7f1b      	ldrb	r3, [r3, #28]
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f34:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8001f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3a:	e001      	b.n	8001f40 <xStreamBufferGenericCreateStatic+0xf8>
		}
		else
		{
			xReturn = NULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3738      	adds	r7, #56	; 0x38
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b087      	sub	sp, #28
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	60fb      	str	r3, [r7, #12]
}
 8001f6e:	bf00      	nop
 8001f70:	e7fe      	b.n	8001f70 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d304      	bcc.n	8001fa2 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8001fa2:	697b      	ldr	r3, [r7, #20]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	371c      	adds	r7, #28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b090      	sub	sp, #64	; 0x40
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <xStreamBufferSend+0x36>
	__asm volatile
 8001fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001fe2:	bf00      	nop
 8001fe4:	e7fe      	b.n	8001fe4 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10a      	bne.n	8002002 <xStreamBufferSend+0x52>
	__asm volatile
 8001fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	623b      	str	r3, [r7, #32]
}
 8001ffe:	bf00      	nop
 8002000:	e7fe      	b.n	8002000 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	7f1b      	ldrb	r3, [r3, #28]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d011      	beq.n	8002032 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	3304      	adds	r3, #4
 8002012:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8002014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	d80a      	bhi.n	8002032 <xStreamBufferSend+0x82>
	__asm volatile
 800201c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002020:	f383 8811 	msr	BASEPRI, r3
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	f3bf 8f4f 	dsb	sy
 800202c:	61fb      	str	r3, [r7, #28]
}
 800202e:	bf00      	nop
 8002030:	e7fe      	b.n	8002030 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d03e      	beq.n	80020b6 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	4618      	mov	r0, r3
 800203e:	f000 febd 	bl	8002dbc <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8002042:	f001 fbbf 	bl	80037c4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8002046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002048:	f7ff ff7f 	bl	8001f4a <xStreamBufferSpacesAvailable>
 800204c:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800204e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002052:	429a      	cmp	r2, r3
 8002054:	d217      	bcs.n	8002086 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8002056:	2000      	movs	r0, #0
 8002058:	f001 f9f8 	bl	800344c <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <xStreamBufferSend+0xca>
	__asm volatile
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	61bb      	str	r3, [r7, #24]
}
 8002076:	bf00      	nop
 8002078:	e7fe      	b.n	8002078 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800207a:	f000 ffed 	bl	8003058 <xTaskGetCurrentTaskHandle>
 800207e:	4602      	mov	r2, r0
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	615a      	str	r2, [r3, #20]
 8002084:	e002      	b.n	800208c <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8002086:	f001 fbcd 	bl	8003824 <vPortExitCritical>
					break;
 800208a:	e014      	b.n	80020b6 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 800208c:	f001 fbca 	bl	8003824 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2000      	movs	r0, #0
 8002098:	f000 ffee 	bl	8003078 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80020a2:	463a      	mov	r2, r7
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fec2 	bl	8002e34 <xTaskCheckForTimeOut>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0c5      	beq.n	8002042 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 80020b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80020bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020be:	f7ff ff44 	bl	8001f4a <xStreamBufferSpacesAvailable>
 80020c2:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020d0:	f000 f894 	bl	80021fc <prvWriteMessageToBuffer>
 80020d4:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d019      	beq.n	8002110 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80020dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020de:	f000 fa7d 	bl	80025dc <prvBytesInBuffer>
 80020e2:	4602      	mov	r2, r0
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d311      	bcc.n	8002110 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 80020ec:	f000 fca8 	bl	8002a40 <vTaskSuspendAll>
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <xStreamBufferSend+0x15c>
 80020f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fa:	6918      	ldr	r0, [r3, #16]
 80020fc:	2300      	movs	r3, #0
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	f001 f813 	bl	800312c <xTaskGenericNotify>
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
 800210c:	f000 fca6 	bl	8002a5c <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002112:	4618      	mov	r0, r3
 8002114:	3738      	adds	r7, #56	; 0x38
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b090      	sub	sp, #64	; 0x40
 800211e:	af02      	add	r7, sp, #8
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <xStreamBufferSendFromISR+0x32>
	__asm volatile
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	623b      	str	r3, [r7, #32]
}
 8002148:	bf00      	nop
 800214a:	e7fe      	b.n	800214a <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 8002152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	61fb      	str	r3, [r7, #28]
}
 8002164:	bf00      	nop
 8002166:	e7fe      	b.n	8002166 <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	7f1b      	ldrb	r3, [r3, #28]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	3304      	adds	r3, #4
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800217a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800217c:	f7ff fee5 	bl	8001f4a <xStreamBufferSpacesAvailable>
 8002180:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800218e:	f000 f835 	bl	80021fc <prvWriteMessageToBuffer>
 8002192:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002196:	2b00      	cmp	r3, #0
 8002198:	d02b      	beq.n	80021f2 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800219a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800219c:	f000 fa1e 	bl	80025dc <prvBytesInBuffer>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d323      	bcc.n	80021f2 <xStreamBufferSendFromISR+0xd8>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80021aa:	f3ef 8211 	mrs	r2, BASEPRI
 80021ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b2:	f383 8811 	msr	BASEPRI, r3
 80021b6:	f3bf 8f6f 	isb	sy
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	61ba      	str	r2, [r7, #24]
 80021c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021c2:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <xStreamBufferSendFromISR+0xcc>
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	6918      	ldr	r0, [r3, #16]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2300      	movs	r3, #0
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	f001 f85c 	bl	8003298 <xTaskGenericNotifyFromISR>
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80021f0:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3738      	adds	r7, #56	; 0x38
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e01d      	b.n	8002252 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	7f1b      	ldrb	r3, [r3, #28]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d108      	bne.n	8002234 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8002222:	2301      	movs	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4293      	cmp	r3, r2
 800222c:	bf28      	it	cs
 800222e:	4613      	movcs	r3, r2
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	e00e      	b.n	8002252 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	429a      	cmp	r2, r3
 800223a:	d308      	bcc.n	800224e <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800223c:	2301      	movs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2204      	movs	r2, #4
 8002244:	4619      	mov	r1, r3
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f8dc 	bl	8002404 <prvWriteBytesToBuffer>
 800224c:	e001      	b.n	8002252 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	461a      	mov	r2, r3
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f8d0 	bl	8002404 <prvWriteBytesToBuffer>
 8002264:	6138      	str	r0, [r7, #16]
 8002266:	e001      	b.n	800226c <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800226c:	693b      	ldr	r3, [r7, #16]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b08e      	sub	sp, #56	; 0x38
 800227a:	af02      	add	r7, sp, #8
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002288:	2300      	movs	r3, #0
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <xStreamBufferReceive+0x32>
	__asm volatile
 8002292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	61fb      	str	r3, [r7, #28]
}
 80022a4:	bf00      	nop
 80022a6:	e7fe      	b.n	80022a6 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <xStreamBufferReceive+0x4e>
	__asm volatile
 80022ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	61bb      	str	r3, [r7, #24]
}
 80022c0:	bf00      	nop
 80022c2:	e7fe      	b.n	80022c2 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	7f1b      	ldrb	r3, [r3, #28]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80022d0:	2304      	movs	r3, #4
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
 80022d4:	e001      	b.n	80022da <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d034      	beq.n	800234a <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80022e0:	f001 fa70 	bl	80037c4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80022e4:	6a38      	ldr	r0, [r7, #32]
 80022e6:	f000 f979 	bl	80025dc <prvBytesInBuffer>
 80022ea:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80022ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d816      	bhi.n	8002322 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80022f4:	2000      	movs	r0, #0
 80022f6:	f001 f8a9 	bl	800344c <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <xStreamBufferReceive+0xa2>
	__asm volatile
 8002302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002306:	f383 8811 	msr	BASEPRI, r3
 800230a:	f3bf 8f6f 	isb	sy
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	617b      	str	r3, [r7, #20]
}
 8002314:	bf00      	nop
 8002316:	e7fe      	b.n	8002316 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8002318:	f000 fe9e 	bl	8003058 <xTaskGetCurrentTaskHandle>
 800231c:	4602      	mov	r2, r0
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002322:	f001 fa7f 	bl	8003824 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8002326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	429a      	cmp	r2, r3
 800232c:	d811      	bhi.n	8002352 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2000      	movs	r0, #0
 8002336:	f000 fe9f 	bl	8003078 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002340:	6a38      	ldr	r0, [r7, #32]
 8002342:	f000 f94b 	bl	80025dc <prvBytesInBuffer>
 8002346:	62b8      	str	r0, [r7, #40]	; 0x28
 8002348:	e003      	b.n	8002352 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800234a:	6a38      	ldr	r0, [r7, #32]
 800234c:	f000 f946 	bl	80025dc <prvBytesInBuffer>
 8002350:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8002352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	429a      	cmp	r2, r3
 8002358:	d91d      	bls.n	8002396 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	6a38      	ldr	r0, [r7, #32]
 8002366:	f000 f81b 	bl	80023a0 <prvReadMessageFromBuffer>
 800236a:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d011      	beq.n	8002396 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8002372:	f000 fb65 	bl	8002a40 <vTaskSuspendAll>
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <xStreamBufferReceive+0x11c>
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	6958      	ldr	r0, [r3, #20]
 8002382:	2300      	movs	r3, #0
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	f000 fed0 	bl	800312c <xTaskGenericNotify>
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	2200      	movs	r2, #0
 8002390:	615a      	str	r2, [r3, #20]
 8002392:	f000 fb63 	bl	8002a5c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002398:	4618      	mov	r0, r3
 800239a:	3730      	adds	r7, #48	; 0x30
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d019      	beq.n	80023e8 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80023ba:	f107 0110 	add.w	r1, r7, #16
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f890 	bl	80024e8 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d907      	bls.n	80023ec <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e001      	b.n	80023ec <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f878 	bl	80024e8 <prvReadBytesFromBuffer>
 80023f8:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80023fa:	697b      	ldr	r3, [r7, #20]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	61fb      	str	r3, [r7, #28]
}
 8002428:	bf00      	nop
 800242a:	e7fe      	b.n	800242a <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4293      	cmp	r3, r2
 800243e:	bf28      	it	cs
 8002440:	4613      	movcs	r3, r2
 8002442:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8002444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	441a      	add	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	429a      	cmp	r2, r3
 8002450:	d90a      	bls.n	8002468 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8002452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002456:	f383 8811 	msr	BASEPRI, r3
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	61bb      	str	r3, [r7, #24]
}
 8002464:	bf00      	nop
 8002466:	e7fe      	b.n	8002466 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	4413      	add	r3, r2
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	4618      	mov	r0, r3
 8002476:	f001 fb4f 	bl	8003b18 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	429a      	cmp	r2, r3
 8002480:	d91c      	bls.n	80024bc <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	1ad2      	subs	r2, r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	429a      	cmp	r2, r3
 800248e:	d90a      	bls.n	80024a6 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	617b      	str	r3, [r7, #20]
}
 80024a2:	bf00      	nop
 80024a4:	e7fe      	b.n	80024a4 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6998      	ldr	r0, [r3, #24]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	18d1      	adds	r1, r2, r3
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	f001 fb2e 	bl	8003b18 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80024bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d304      	bcc.n	80024d8 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024dc:	605a      	str	r2, [r3, #4]

	return xCount;
 80024de:	687b      	ldr	r3, [r7, #4]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	bf28      	it	cs
 80024fe:	4613      	movcs	r3, r2
 8002500:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d064      	beq.n	80025d2 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	6a3a      	ldr	r2, [r7, #32]
 8002518:	4293      	cmp	r3, r2
 800251a:	bf28      	it	cs
 800251c:	4613      	movcs	r3, r2
 800251e:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d90a      	bls.n	800253e <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	61bb      	str	r3, [r7, #24]
}
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800253e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	441a      	add	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	d90a      	bls.n	8002562 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	617b      	str	r3, [r7, #20]
}
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	4413      	add	r3, r2
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	4619      	mov	r1, r3
 800256e:	68b8      	ldr	r0, [r7, #8]
 8002570:	f001 fad2 	bl	8003b18 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	429a      	cmp	r2, r3
 800257a:	d919      	bls.n	80025b0 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800257c:	6a3a      	ldr	r2, [r7, #32]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d90a      	bls.n	800259a <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	613b      	str	r3, [r7, #16]
}
 8002596:	bf00      	nop
 8002598:	e7fe      	b.n	8002598 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	18d0      	adds	r0, r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6999      	ldr	r1, [r3, #24]
 80025a4:	6a3a      	ldr	r2, [r7, #32]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	f001 fab4 	bl	8003b18 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80025b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	4413      	add	r3, r2
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	429a      	cmp	r2, r3
 80025c0:	d304      	bcc.n	80025cc <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d0:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80025d2:	6a3b      	ldr	r3, [r7, #32]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d304      	bcc.n	800260e <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800262a:	2355      	movs	r3, #85	; 0x55
 800262c:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6979      	ldr	r1, [r7, #20]
 8002632:	68b8      	ldr	r0, [r7, #8]
 8002634:	f001 fa7e 	bl	8003b34 <memset>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4293      	cmp	r3, r2
 800263e:	d00a      	beq.n	8002656 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	613b      	str	r3, [r7, #16]
}
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8002656:	2220      	movs	r2, #32
 8002658:	2100      	movs	r1, #0
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f001 fa6a 	bl	8003b34 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002678:	771a      	strb	r2, [r3, #28]
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002682:	b580      	push	{r7, lr}
 8002684:	b08e      	sub	sp, #56	; 0x38
 8002686:	af04      	add	r7, sp, #16
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <xTaskCreateStatic+0x2a>
	__asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	623b      	str	r3, [r7, #32]
}
 80026a8:	bf00      	nop
 80026aa:	e7fe      	b.n	80026aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80026ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <xTaskCreateStatic+0x46>
	__asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	61fb      	str	r3, [r7, #28]
}
 80026c4:	bf00      	nop
 80026c6:	e7fe      	b.n	80026c6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80026c8:	2354      	movs	r3, #84	; 0x54
 80026ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2b54      	cmp	r3, #84	; 0x54
 80026d0:	d00a      	beq.n	80026e8 <xTaskCreateStatic+0x66>
	__asm volatile
 80026d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d6:	f383 8811 	msr	BASEPRI, r3
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	61bb      	str	r3, [r7, #24]
}
 80026e4:	bf00      	nop
 80026e6:	e7fe      	b.n	80026e6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80026e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01a      	beq.n	8002726 <xTaskCreateStatic+0xa4>
 80026f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d017      	beq.n	8002726 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002700:	2300      	movs	r3, #0
 8002702:	9303      	str	r3, [sp, #12]
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	9302      	str	r3, [sp, #8]
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f80b 	bl	8002734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800271e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002720:	f000 f890 	bl	8002844 <prvAddNewTaskToReadyList>
 8002724:	e001      	b.n	800272a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800272a:	697b      	ldr	r3, [r7, #20]
	}
 800272c:	4618      	mov	r0, r3
 800272e:	3728      	adds	r7, #40	; 0x28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800274c:	3b01      	subs	r3, #1
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f023 0307 	bic.w	r3, r3, #7
 800275a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	617b      	str	r3, [r7, #20]
}
 8002778:	bf00      	nop
 800277a:	e7fe      	b.n	800277a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01f      	beq.n	80027c2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e012      	b.n	80027ae <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	7819      	ldrb	r1, [r3, #0]
 8002790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	3334      	adds	r3, #52	; 0x34
 8002798:	460a      	mov	r2, r1
 800279a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	3301      	adds	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	2b0f      	cmp	r3, #15
 80027b2:	d9e9      	bls.n	8002788 <prvInitialiseNewTask+0x54>
 80027b4:	e000      	b.n	80027b8 <prvInitialiseNewTask+0x84>
			{
				break;
 80027b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c0:	e003      	b.n	80027ca <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d901      	bls.n	80027d4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027d0:	2306      	movs	r3, #6
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	2200      	movs	r2, #0
 80027e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	3304      	adds	r3, #4
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fa98 	bl	8001d20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	3318      	adds	r3, #24
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fa93 	bl	8001d20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	f1c3 0207 	rsb	r2, r3, #7
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	2200      	movs	r2, #0
 8002814:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	68f9      	ldr	r1, [r7, #12]
 8002822:	69b8      	ldr	r0, [r7, #24]
 8002824:	f000 fe9e 	bl	8003564 <pxPortInitialiseStack>
 8002828:	4602      	mov	r2, r0
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800283a:	bf00      	nop
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800284c:	f000 ffba 	bl	80037c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002850:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <prvAddNewTaskToReadyList+0xb8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	4a29      	ldr	r2, [pc, #164]	; (80028fc <prvAddNewTaskToReadyList+0xb8>)
 8002858:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <prvAddNewTaskToReadyList+0xbc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002862:	4a27      	ldr	r2, [pc, #156]	; (8002900 <prvAddNewTaskToReadyList+0xbc>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <prvAddNewTaskToReadyList+0xb8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d110      	bne.n	8002892 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002870:	f000 fb5a 	bl	8002f28 <prvInitialiseTaskLists>
 8002874:	e00d      	b.n	8002892 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <prvAddNewTaskToReadyList+0xc0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <prvAddNewTaskToReadyList+0xbc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	429a      	cmp	r2, r3
 800288a:	d802      	bhi.n	8002892 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800288c:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <prvAddNewTaskToReadyList+0xbc>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <prvAddNewTaskToReadyList+0xc4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <prvAddNewTaskToReadyList+0xc4>)
 800289a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	2201      	movs	r2, #1
 80028a2:	409a      	lsls	r2, r3
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <prvAddNewTaskToReadyList+0xc8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <prvAddNewTaskToReadyList+0xc8>)
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <prvAddNewTaskToReadyList+0xcc>)
 80028bc:	441a      	add	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f7ff fa38 	bl	8001d3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80028ca:	f000 ffab 	bl	8003824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <prvAddNewTaskToReadyList+0xc0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00e      	beq.n	80028f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <prvAddNewTaskToReadyList+0xbc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d207      	bcs.n	80028f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <prvAddNewTaskToReadyList+0xd0>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000b10 	.word	0x20000b10
 8002900:	20000a10 	.word	0x20000a10
 8002904:	20000b1c 	.word	0x20000b1c
 8002908:	20000b2c 	.word	0x20000b2c
 800290c:	20000b18 	.word	0x20000b18
 8002910:	20000a14 	.word	0x20000a14
 8002914:	e000ed04 	.word	0xe000ed04

08002918 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d017      	beq.n	800295a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <vTaskDelay+0x60>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <vTaskDelay+0x30>
	__asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	60bb      	str	r3, [r7, #8]
}
 8002944:	bf00      	nop
 8002946:	e7fe      	b.n	8002946 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002948:	f000 f87a 	bl	8002a40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800294c:	2100      	movs	r1, #0
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fda2 	bl	8003498 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002954:	f000 f882 	bl	8002a5c <xTaskResumeAll>
 8002958:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <vTaskDelay+0x64>)
 8002962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000b38 	.word	0x20000b38
 800297c:	e000ed04 	.word	0xe000ed04

08002980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800298e:	463a      	mov	r2, r7
 8002990:	1d39      	adds	r1, r7, #4
 8002992:	f107 0308 	add.w	r3, r7, #8
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fda4 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800299c:	6839      	ldr	r1, [r7, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	9202      	str	r2, [sp, #8]
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	2300      	movs	r3, #0
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2300      	movs	r3, #0
 80029ac:	460a      	mov	r2, r1
 80029ae:	491e      	ldr	r1, [pc, #120]	; (8002a28 <vTaskStartScheduler+0xa8>)
 80029b0:	481e      	ldr	r0, [pc, #120]	; (8002a2c <vTaskStartScheduler+0xac>)
 80029b2:	f7ff fe66 	bl	8002682 <xTaskCreateStatic>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <vTaskStartScheduler+0xb0>)
 80029ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <vTaskStartScheduler+0xb0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80029c4:	2301      	movs	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e001      	b.n	80029ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d116      	bne.n	8002a02 <vTaskStartScheduler+0x82>
	__asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	613b      	str	r3, [r7, #16]
}
 80029e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <vTaskStartScheduler+0xb4>)
 80029ea:	f04f 32ff 	mov.w	r2, #4294967295
 80029ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <vTaskStartScheduler+0xb8>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <vTaskStartScheduler+0xbc>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029fc:	f000 fe40 	bl	8003680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a00:	e00e      	b.n	8002a20 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d10a      	bne.n	8002a20 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	60fb      	str	r3, [r7, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	e7fe      	b.n	8002a1e <vTaskStartScheduler+0x9e>
}
 8002a20:	bf00      	nop
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	08003bb8 	.word	0x08003bb8
 8002a2c:	08002ef9 	.word	0x08002ef9
 8002a30:	20000b34 	.word	0x20000b34
 8002a34:	20000b30 	.word	0x20000b30
 8002a38:	20000b1c 	.word	0x20000b1c
 8002a3c:	20000b14 	.word	0x20000b14

08002a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <vTaskSuspendAll+0x18>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4a03      	ldr	r2, [pc, #12]	; (8002a58 <vTaskSuspendAll+0x18>)
 8002a4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	20000b38 	.word	0x20000b38

08002a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <xTaskResumeAll+0x114>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <xTaskResumeAll+0x2c>
	__asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	603b      	str	r3, [r7, #0]
}
 8002a84:	bf00      	nop
 8002a86:	e7fe      	b.n	8002a86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a88:	f000 fe9c 	bl	80037c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <xTaskResumeAll+0x114>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	4a37      	ldr	r2, [pc, #220]	; (8002b70 <xTaskResumeAll+0x114>)
 8002a94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a96:	4b36      	ldr	r3, [pc, #216]	; (8002b70 <xTaskResumeAll+0x114>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d161      	bne.n	8002b62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a9e:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <xTaskResumeAll+0x118>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d05d      	beq.n	8002b62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002aa6:	e02e      	b.n	8002b06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aa8:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <xTaskResumeAll+0x11c>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3318      	adds	r3, #24
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f99d 	bl	8001df4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3304      	adds	r3, #4
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff f998 	bl	8001df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2201      	movs	r2, #1
 8002aca:	409a      	lsls	r2, r3
 8002acc:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <xTaskResumeAll+0x120>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	4a2a      	ldr	r2, [pc, #168]	; (8002b7c <xTaskResumeAll+0x120>)
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4a27      	ldr	r2, [pc, #156]	; (8002b80 <xTaskResumeAll+0x124>)
 8002ae4:	441a      	add	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4610      	mov	r0, r2
 8002aee:	f7ff f924 	bl	8001d3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af6:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <xTaskResumeAll+0x128>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <xTaskResumeAll+0x12c>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <xTaskResumeAll+0x11c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1cc      	bne.n	8002aa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b14:	f000 fa80 	bl	8003018 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b18:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <xTaskResumeAll+0x130>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d010      	beq.n	8002b46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b24:	f000 f836 	bl	8002b94 <xTaskIncrementTick>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002b2e:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <xTaskResumeAll+0x12c>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f1      	bne.n	8002b24 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <xTaskResumeAll+0x130>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <xTaskResumeAll+0x12c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <xTaskResumeAll+0x134>)
 8002b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b62:	f000 fe5f 	bl	8003824 <vPortExitCritical>

	return xAlreadyYielded;
 8002b66:	68bb      	ldr	r3, [r7, #8]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000b38 	.word	0x20000b38
 8002b74:	20000b10 	.word	0x20000b10
 8002b78:	20000ad0 	.word	0x20000ad0
 8002b7c:	20000b18 	.word	0x20000b18
 8002b80:	20000a14 	.word	0x20000a14
 8002b84:	20000a10 	.word	0x20000a10
 8002b88:	20000b24 	.word	0x20000b24
 8002b8c:	20000b20 	.word	0x20000b20
 8002b90:	e000ed04 	.word	0xe000ed04

08002b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b9e:	4b4e      	ldr	r3, [pc, #312]	; (8002cd8 <xTaskIncrementTick+0x144>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 808e 	bne.w	8002cc4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ba8:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <xTaskIncrementTick+0x148>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002bb0:	4a4a      	ldr	r2, [pc, #296]	; (8002cdc <xTaskIncrementTick+0x148>)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d120      	bne.n	8002bfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002bbc:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <xTaskIncrementTick+0x14c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <xTaskIncrementTick+0x48>
	__asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	603b      	str	r3, [r7, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	e7fe      	b.n	8002bda <xTaskIncrementTick+0x46>
 8002bdc:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <xTaskIncrementTick+0x14c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b40      	ldr	r3, [pc, #256]	; (8002ce4 <xTaskIncrementTick+0x150>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a3e      	ldr	r2, [pc, #248]	; (8002ce0 <xTaskIncrementTick+0x14c>)
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4a3e      	ldr	r2, [pc, #248]	; (8002ce4 <xTaskIncrementTick+0x150>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <xTaskIncrementTick+0x154>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	4a3c      	ldr	r2, [pc, #240]	; (8002ce8 <xTaskIncrementTick+0x154>)
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	f000 fa0d 	bl	8003018 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <xTaskIncrementTick+0x158>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d348      	bcc.n	8002c9a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c08:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <xTaskIncrementTick+0x14c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c12:	4b36      	ldr	r3, [pc, #216]	; (8002cec <xTaskIncrementTick+0x158>)
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	601a      	str	r2, [r3, #0]
					break;
 8002c1a:	e03e      	b.n	8002c9a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c1c:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <xTaskIncrementTick+0x14c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d203      	bcs.n	8002c3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c34:	4a2d      	ldr	r2, [pc, #180]	; (8002cec <xTaskIncrementTick+0x158>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c3a:	e02e      	b.n	8002c9a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f8d7 	bl	8001df4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3318      	adds	r3, #24
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f8ce 	bl	8001df4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <xTaskIncrementTick+0x15c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <xTaskIncrementTick+0x15c>)
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <xTaskIncrementTick+0x160>)
 8002c78:	441a      	add	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f7ff f85a 	bl	8001d3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <xTaskIncrementTick+0x164>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d3b9      	bcc.n	8002c08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002c94:	2301      	movs	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c98:	e7b6      	b.n	8002c08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <xTaskIncrementTick+0x164>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca0:	4914      	ldr	r1, [pc, #80]	; (8002cf4 <xTaskIncrementTick+0x160>)
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d901      	bls.n	8002cb6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <xTaskIncrementTick+0x168>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e004      	b.n	8002cce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <xTaskIncrementTick+0x16c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <xTaskIncrementTick+0x16c>)
 8002ccc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002cce:	697b      	ldr	r3, [r7, #20]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000b38 	.word	0x20000b38
 8002cdc:	20000b14 	.word	0x20000b14
 8002ce0:	20000ac8 	.word	0x20000ac8
 8002ce4:	20000acc 	.word	0x20000acc
 8002ce8:	20000b28 	.word	0x20000b28
 8002cec:	20000b30 	.word	0x20000b30
 8002cf0:	20000b18 	.word	0x20000b18
 8002cf4:	20000a14 	.word	0x20000a14
 8002cf8:	20000a10 	.word	0x20000a10
 8002cfc:	20000b24 	.word	0x20000b24
 8002d00:	20000b20 	.word	0x20000b20

08002d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d0a:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <vTaskSwitchContext+0xa4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d12:	4b26      	ldr	r3, [pc, #152]	; (8002dac <vTaskSwitchContext+0xa8>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d18:	e03f      	b.n	8002d9a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <vTaskSwitchContext+0xa8>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <vTaskSwitchContext+0xac>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	f1c3 031f 	rsb	r3, r3, #31
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	491f      	ldr	r1, [pc, #124]	; (8002db4 <vTaskSwitchContext+0xb0>)
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	607b      	str	r3, [r7, #4]
}
 8002d5c:	bf00      	nop
 8002d5e:	e7fe      	b.n	8002d5e <vTaskSwitchContext+0x5a>
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <vTaskSwitchContext+0xb0>)
 8002d6c:	4413      	add	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	3308      	adds	r3, #8
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d104      	bne.n	8002d90 <vTaskSwitchContext+0x8c>
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <vTaskSwitchContext+0xb4>)
 8002d98:	6013      	str	r3, [r2, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000b38 	.word	0x20000b38
 8002dac:	20000b24 	.word	0x20000b24
 8002db0:	20000b18 	.word	0x20000b18
 8002db4:	20000a14 	.word	0x20000a14
 8002db8:	20000a10 	.word	0x20000a10

08002dbc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	60fb      	str	r3, [r7, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	e7fe      	b.n	8002dde <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8002de0:	f000 fcf0 	bl	80037c4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <vTaskSetTimeOutState+0x44>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <vTaskSetTimeOutState+0x48>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8002df4:	f000 fd16 	bl	8003824 <vPortExitCritical>
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000b28 	.word	0x20000b28
 8002e04:	20000b14 	.word	0x20000b14

08002e08 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <vTaskInternalSetTimeOutState+0x24>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <vTaskInternalSetTimeOutState+0x28>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	605a      	str	r2, [r3, #4]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	20000b28 	.word	0x20000b28
 8002e30:	20000b14 	.word	0x20000b14

08002e34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	613b      	str	r3, [r7, #16]
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	60fb      	str	r3, [r7, #12]
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002e76:	f000 fca5 	bl	80037c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <xTaskCheckForTimeOut+0xbc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	d102      	bne.n	8002e9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	e023      	b.n	8002ee2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <xTaskCheckForTimeOut+0xc0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d007      	beq.n	8002eb6 <xTaskCheckForTimeOut+0x82>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	e015      	b.n	8002ee2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d20b      	bcs.n	8002ed8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad2      	subs	r2, r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ff9b 	bl	8002e08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	e004      	b.n	8002ee2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002ee2:	f000 fc9f 	bl	8003824 <vPortExitCritical>

	return xReturn;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000b14 	.word	0x20000b14
 8002ef4:	20000b28 	.word	0x20000b28

08002ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f00:	f000 f852 	bl	8002fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <prvIdleTask+0x28>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d9f9      	bls.n	8002f00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <prvIdleTask+0x2c>)
 8002f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f1c:	e7f0      	b.n	8002f00 <prvIdleTask+0x8>
 8002f1e:	bf00      	nop
 8002f20:	20000a14 	.word	0x20000a14
 8002f24:	e000ed04 	.word	0xe000ed04

08002f28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	e00c      	b.n	8002f4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <prvInitialiseTaskLists+0x60>)
 8002f40:	4413      	add	r3, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fecc 	bl	8001ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b06      	cmp	r3, #6
 8002f52:	d9ef      	bls.n	8002f34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f54:	480d      	ldr	r0, [pc, #52]	; (8002f8c <prvInitialiseTaskLists+0x64>)
 8002f56:	f7fe fec3 	bl	8001ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f5a:	480d      	ldr	r0, [pc, #52]	; (8002f90 <prvInitialiseTaskLists+0x68>)
 8002f5c:	f7fe fec0 	bl	8001ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <prvInitialiseTaskLists+0x6c>)
 8002f62:	f7fe febd 	bl	8001ce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f66:	480c      	ldr	r0, [pc, #48]	; (8002f98 <prvInitialiseTaskLists+0x70>)
 8002f68:	f7fe feba 	bl	8001ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f6c:	480b      	ldr	r0, [pc, #44]	; (8002f9c <prvInitialiseTaskLists+0x74>)
 8002f6e:	f7fe feb7 	bl	8001ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <prvInitialiseTaskLists+0x78>)
 8002f74:	4a05      	ldr	r2, [pc, #20]	; (8002f8c <prvInitialiseTaskLists+0x64>)
 8002f76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <prvInitialiseTaskLists+0x7c>)
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <prvInitialiseTaskLists+0x68>)
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000a14 	.word	0x20000a14
 8002f8c:	20000aa0 	.word	0x20000aa0
 8002f90:	20000ab4 	.word	0x20000ab4
 8002f94:	20000ad0 	.word	0x20000ad0
 8002f98:	20000ae4 	.word	0x20000ae4
 8002f9c:	20000afc 	.word	0x20000afc
 8002fa0:	20000ac8 	.word	0x20000ac8
 8002fa4:	20000acc 	.word	0x20000acc

08002fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fae:	e019      	b.n	8002fe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002fb0:	f000 fc08 	bl	80037c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <prvCheckTasksWaitingTermination+0x50>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe ff17 	bl	8001df4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <prvCheckTasksWaitingTermination+0x54>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <prvCheckTasksWaitingTermination+0x54>)
 8002fce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <prvCheckTasksWaitingTermination+0x58>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <prvCheckTasksWaitingTermination+0x58>)
 8002fd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002fda:	f000 fc23 	bl	8003824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f810 	bl	8003004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <prvCheckTasksWaitingTermination+0x58>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e1      	bne.n	8002fb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000ae4 	.word	0x20000ae4
 8002ffc:	20000b10 	.word	0x20000b10
 8003000:	20000af8 	.word	0x20000af8

08003004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <prvResetNextTaskUnblockTime+0x38>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d104      	bne.n	8003032 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <prvResetNextTaskUnblockTime+0x3c>)
 800302a:	f04f 32ff 	mov.w	r2, #4294967295
 800302e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003030:	e008      	b.n	8003044 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <prvResetNextTaskUnblockTime+0x38>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <prvResetNextTaskUnblockTime+0x3c>)
 8003042:	6013      	str	r3, [r2, #0]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	20000ac8 	.word	0x20000ac8
 8003054:	20000b30 	.word	0x20000b30

08003058 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <xTaskGetCurrentTaskHandle+0x1c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003064:	687b      	ldr	r3, [r7, #4]
	}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000a10 	.word	0x20000a10

08003078 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003086:	f000 fb9d 	bl	80037c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <xTaskNotifyWait+0xac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d01a      	beq.n	80030ce <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003098:	4b22      	ldr	r3, [pc, #136]	; (8003124 <xTaskNotifyWait+0xac>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	43d2      	mvns	r2, r2
 80030a2:	400a      	ands	r2, r1
 80030a4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <xTaskNotifyWait+0xac>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030b6:	2101      	movs	r1, #1
 80030b8:	6838      	ldr	r0, [r7, #0]
 80030ba:	f000 f9ed 	bl	8003498 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <xTaskNotifyWait+0xb0>)
 80030c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80030ce:	f000 fba9 	bl	8003824 <vPortExitCritical>

		taskENTER_CRITICAL();
 80030d2:	f000 fb77 	bl	80037c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <xTaskNotifyWait+0xac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80030e6:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <xTaskNotifyWait+0xac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d002      	beq.n	80030fa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	e008      	b.n	800310c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <xTaskNotifyWait+0xac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	43d2      	mvns	r2, r2
 8003104:	400a      	ands	r2, r1
 8003106:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8003108:	2301      	movs	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <xTaskNotifyWait+0xac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8003116:	f000 fb85 	bl	8003824 <vPortExitCritical>

		return xReturn;
 800311a:	697b      	ldr	r3, [r7, #20]
	}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000a10 	.word	0x20000a10
 8003128:	e000ed04 	.word	0xe000ed04

0800312c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <xTaskGenericNotify+0x30>
	__asm volatile
 8003146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314a:	f383 8811 	msr	BASEPRI, r3
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	61bb      	str	r3, [r7, #24]
}
 8003158:	bf00      	nop
 800315a:	e7fe      	b.n	800315a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003160:	f000 fb30 	bl	80037c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003178:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d828      	bhi.n	80031da <xTaskGenericNotify+0xae>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <xTaskGenericNotify+0x64>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031fb 	.word	0x080031fb
 8003194:	080031a5 	.word	0x080031a5
 8003198:	080031b3 	.word	0x080031b3
 800319c:	080031bf 	.word	0x080031bf
 80031a0:	080031c7 	.word	0x080031c7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80031b0:	e026      	b.n	8003200 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80031bc:	e020      	b.n	8003200 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80031c4:	e01c      	b.n	8003200 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d003      	beq.n	80031d4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80031d2:	e015      	b.n	8003200 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80031d8:	e012      	b.n	8003200 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d00c      	beq.n	80031fe <xTaskGenericNotify+0xd2>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	617b      	str	r3, [r7, #20]
}
 80031f6:	bf00      	nop
 80031f8:	e7fe      	b.n	80031f8 <xTaskGenericNotify+0xcc>
					break;
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <xTaskGenericNotify+0xd4>

					break;
 80031fe:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003200:	7ffb      	ldrb	r3, [r7, #31]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d139      	bne.n	800327a <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	3304      	adds	r3, #4
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fdf2 	bl	8001df4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	2201      	movs	r2, #1
 8003216:	409a      	lsls	r2, r3
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <xTaskGenericNotify+0x15c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4313      	orrs	r3, r2
 800321e:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <xTaskGenericNotify+0x15c>)
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <xTaskGenericNotify+0x160>)
 8003230:	441a      	add	r2, r3
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	3304      	adds	r3, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4610      	mov	r0, r2
 800323a:	f7fe fd7e 	bl	8001d3a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <xTaskGenericNotify+0x130>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	613b      	str	r3, [r7, #16]
}
 8003258:	bf00      	nop
 800325a:	e7fe      	b.n	800325a <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <xTaskGenericNotify+0x164>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	429a      	cmp	r2, r3
 8003268:	d907      	bls.n	800327a <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <xTaskGenericNotify+0x168>)
 800326c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800327a:	f000 fad3 	bl	8003824 <vPortExitCritical>

		return xReturn;
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003280:	4618      	mov	r0, r3
 8003282:	3728      	adds	r7, #40	; 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000b18 	.word	0x20000b18
 800328c:	20000a14 	.word	0x20000a14
 8003290:	20000a10 	.word	0x20000a10
 8003294:	e000ed04 	.word	0xe000ed04

08003298 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08e      	sub	sp, #56	; 0x38
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80032a8:	2301      	movs	r3, #1
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032c8:	f000 fb5e 	bl	8003988 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80032d0:	f3ef 8211 	mrs	r2, BASEPRI
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	623a      	str	r2, [r7, #32]
 80032e6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80032e8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	2b04      	cmp	r3, #4
 8003310:	d828      	bhi.n	8003364 <xTaskGenericNotifyFromISR+0xcc>
 8003312:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <xTaskGenericNotifyFromISR+0x80>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	08003385 	.word	0x08003385
 800331c:	0800332d 	.word	0x0800332d
 8003320:	0800333b 	.word	0x0800333b
 8003324:	08003347 	.word	0x08003347
 8003328:	0800334f 	.word	0x0800334f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	431a      	orrs	r2, r3
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003338:	e027      	b.n	800338a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003344:	e021      	b.n	800338a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800334c:	e01d      	b.n	800338a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800334e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003352:	2b02      	cmp	r3, #2
 8003354:	d003      	beq.n	800335e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800335c:	e015      	b.n	800338a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800335e:	2300      	movs	r3, #0
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8003362:	e012      	b.n	800338a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d00c      	beq.n	8003388 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	61bb      	str	r3, [r7, #24]
}
 8003380:	bf00      	nop
 8003382:	e7fe      	b.n	8003382 <xTaskGenericNotifyFromISR+0xea>
					break;
 8003384:	bf00      	nop
 8003386:	e000      	b.n	800338a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8003388:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800338a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800338e:	2b01      	cmp	r3, #1
 8003390:	d145      	bne.n	800341e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	617b      	str	r3, [r7, #20]
}
 80033ac:	bf00      	nop
 80033ae:	e7fe      	b.n	80033ae <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <xTaskGenericNotifyFromISR+0x19c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d11c      	bne.n	80033f2 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	3304      	adds	r3, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fd19 	bl	8001df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	2201      	movs	r2, #1
 80033c8:	409a      	lsls	r2, r3
 80033ca:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <xTaskGenericNotifyFromISR+0x1a0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	4a19      	ldr	r2, [pc, #100]	; (8003438 <xTaskGenericNotifyFromISR+0x1a0>)
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4a16      	ldr	r2, [pc, #88]	; (800343c <xTaskGenericNotifyFromISR+0x1a4>)
 80033e2:	441a      	add	r2, r3
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	3304      	adds	r3, #4
 80033e8:	4619      	mov	r1, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	f7fe fca5 	bl	8001d3a <vListInsertEnd>
 80033f0:	e005      	b.n	80033fe <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	3318      	adds	r3, #24
 80033f6:	4619      	mov	r1, r3
 80033f8:	4811      	ldr	r0, [pc, #68]	; (8003440 <xTaskGenericNotifyFromISR+0x1a8>)
 80033fa:	f7fe fc9e 	bl	8001d3a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <xTaskGenericNotifyFromISR+0x1ac>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	429a      	cmp	r2, r3
 800340a:	d908      	bls.n	800341e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800340c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <xTaskGenericNotifyFromISR+0x1b0>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f383 8811 	msr	BASEPRI, r3
}
 8003428:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800342a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800342c:	4618      	mov	r0, r3
 800342e:	3738      	adds	r7, #56	; 0x38
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000b38 	.word	0x20000b38
 8003438:	20000b18 	.word	0x20000b18
 800343c:	20000a14 	.word	0x20000a14
 8003440:	20000ad0 	.word	0x20000ad0
 8003444:	20000a10 	.word	0x20000a10
 8003448:	20000b24 	.word	0x20000b24

0800344c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <xTaskNotifyStateClear+0x14>
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <xTaskNotifyStateClear+0x48>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	e000      	b.n	8003462 <xTaskNotifyStateClear+0x16>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8003464:	f000 f9ae 	bl	80037c4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d106      	bne.n	8003482 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 800347c:	2301      	movs	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e001      	b.n	8003486 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8003486:	f000 f9cd 	bl	8003824 <vPortExitCritical>

		return xReturn;
 800348a:	68fb      	ldr	r3, [r7, #12]
	}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000a10 	.word	0x20000a10

08003498 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034a2:	4b29      	ldr	r3, [pc, #164]	; (8003548 <prvAddCurrentTaskToDelayedList+0xb0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fca0 	bl	8001df4 <uxListRemove>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	2201      	movs	r2, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	4b21      	ldr	r3, [pc, #132]	; (8003550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4013      	ands	r3, r2
 80034ce:	4a20      	ldr	r2, [pc, #128]	; (8003550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d10a      	bne.n	80034f0 <prvAddCurrentTaskToDelayedList+0x58>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3304      	adds	r3, #4
 80034e6:	4619      	mov	r1, r3
 80034e8:	481a      	ldr	r0, [pc, #104]	; (8003554 <prvAddCurrentTaskToDelayedList+0xbc>)
 80034ea:	f7fe fc26 	bl	8001d3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034ee:	e026      	b.n	800353e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034f8:	4b14      	ldr	r3, [pc, #80]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	429a      	cmp	r2, r3
 8003506:	d209      	bcs.n	800351c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <prvAddCurrentTaskToDelayedList+0xc0>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3304      	adds	r3, #4
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f7fe fc34 	bl	8001d82 <vListInsert>
}
 800351a:	e010      	b.n	800353e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <prvAddCurrentTaskToDelayedList+0xc4>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3304      	adds	r3, #4
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f7fe fc2a 	bl	8001d82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d202      	bcs.n	800353e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003538:	4a09      	ldr	r2, [pc, #36]	; (8003560 <prvAddCurrentTaskToDelayedList+0xc8>)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6013      	str	r3, [r2, #0]
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000b14 	.word	0x20000b14
 800354c:	20000a10 	.word	0x20000a10
 8003550:	20000b18 	.word	0x20000b18
 8003554:	20000afc 	.word	0x20000afc
 8003558:	20000acc 	.word	0x20000acc
 800355c:	20000ac8 	.word	0x20000ac8
 8003560:	20000b30 	.word	0x20000b30

08003564 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3b04      	subs	r3, #4
 8003574:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800357c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3b04      	subs	r3, #4
 8003582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f023 0201 	bic.w	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	3b04      	subs	r3, #4
 8003592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003594:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <pxPortInitialiseStack+0x64>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3b14      	subs	r3, #20
 800359e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3b04      	subs	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f06f 0202 	mvn.w	r2, #2
 80035b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3b20      	subs	r3, #32
 80035b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035ba:	68fb      	ldr	r3, [r7, #12]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	080035cd 	.word	0x080035cd

080035cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <prvTaskExitError+0x54>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d00a      	beq.n	80035f6 <prvTaskExitError+0x2a>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	60fb      	str	r3, [r7, #12]
}
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <prvTaskExitError+0x28>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	60bb      	str	r3, [r7, #8]
}
 8003608:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800360a:	bf00      	nop
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0fc      	beq.n	800360c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	20000014 	.word	0x20000014
	...

08003630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <pxCurrentTCBConst2>)
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	6808      	ldr	r0, [r1, #0]
 8003636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363a:	f380 8809 	msr	PSP, r0
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f04f 0000 	mov.w	r0, #0
 8003646:	f380 8811 	msr	BASEPRI, r0
 800364a:	4770      	bx	lr
 800364c:	f3af 8000 	nop.w

08003650 <pxCurrentTCBConst2>:
 8003650:	20000a10 	.word	0x20000a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop

08003658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003658:	4808      	ldr	r0, [pc, #32]	; (800367c <prvPortStartFirstTask+0x24>)
 800365a:	6800      	ldr	r0, [r0, #0]
 800365c:	6800      	ldr	r0, [r0, #0]
 800365e:	f380 8808 	msr	MSP, r0
 8003662:	f04f 0000 	mov.w	r0, #0
 8003666:	f380 8814 	msr	CONTROL, r0
 800366a:	b662      	cpsie	i
 800366c:	b661      	cpsie	f
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	df00      	svc	0
 8003678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800367a:	bf00      	nop
 800367c:	e000ed08 	.word	0xe000ed08

08003680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003686:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <xPortStartScheduler+0x120>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a46      	ldr	r2, [pc, #280]	; (80037a4 <xPortStartScheduler+0x124>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10a      	bne.n	80036a6 <xPortStartScheduler+0x26>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	613b      	str	r3, [r7, #16]
}
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036a6:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <xPortStartScheduler+0x120>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3f      	ldr	r2, [pc, #252]	; (80037a8 <xPortStartScheduler+0x128>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10a      	bne.n	80036c6 <xPortStartScheduler+0x46>
	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	60fb      	str	r3, [r7, #12]
}
 80036c2:	bf00      	nop
 80036c4:	e7fe      	b.n	80036c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036c6:	4b39      	ldr	r3, [pc, #228]	; (80037ac <xPortStartScheduler+0x12c>)
 80036c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <xPortStartScheduler+0x130>)
 80036ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036ee:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <xPortStartScheduler+0x134>)
 80036f0:	2207      	movs	r2, #7
 80036f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036f4:	e009      	b.n	800370a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80036f6:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <xPortStartScheduler+0x134>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	4a2d      	ldr	r2, [pc, #180]	; (80037b4 <xPortStartScheduler+0x134>)
 80036fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d0ef      	beq.n	80036f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003716:	4b27      	ldr	r3, [pc, #156]	; (80037b4 <xPortStartScheduler+0x134>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f1c3 0307 	rsb	r3, r3, #7
 800371e:	2b04      	cmp	r3, #4
 8003720:	d00a      	beq.n	8003738 <xPortStartScheduler+0xb8>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	60bb      	str	r3, [r7, #8]
}
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003738:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <xPortStartScheduler+0x134>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <xPortStartScheduler+0x134>)
 8003740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <xPortStartScheduler+0x134>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800374a:	4a1a      	ldr	r2, [pc, #104]	; (80037b4 <xPortStartScheduler+0x134>)
 800374c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <xPortStartScheduler+0x138>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a17      	ldr	r2, [pc, #92]	; (80037b8 <xPortStartScheduler+0x138>)
 800375c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <xPortStartScheduler+0x138>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <xPortStartScheduler+0x138>)
 8003768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800376c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800376e:	f000 f8dd 	bl	800392c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <xPortStartScheduler+0x13c>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003778:	f000 f8fc 	bl	8003974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <xPortStartScheduler+0x140>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <xPortStartScheduler+0x140>)
 8003782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003788:	f7ff ff66 	bl	8003658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800378c:	f7ff faba 	bl	8002d04 <vTaskSwitchContext>
	prvTaskExitError();
 8003790:	f7ff ff1c 	bl	80035cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	e000ed00 	.word	0xe000ed00
 80037a4:	410fc271 	.word	0x410fc271
 80037a8:	410fc270 	.word	0x410fc270
 80037ac:	e000e400 	.word	0xe000e400
 80037b0:	20000b3c 	.word	0x20000b3c
 80037b4:	20000b40 	.word	0x20000b40
 80037b8:	e000ed20 	.word	0xe000ed20
 80037bc:	20000014 	.word	0x20000014
 80037c0:	e000ef34 	.word	0xe000ef34

080037c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
	__asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	607b      	str	r3, [r7, #4]
}
 80037dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <vPortEnterCritical+0x58>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <vPortEnterCritical+0x58>)
 80037e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <vPortEnterCritical+0x58>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10f      	bne.n	8003810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <vPortEnterCritical+0x5c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <vPortEnterCritical+0x4c>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	603b      	str	r3, [r7, #0]
}
 800380c:	bf00      	nop
 800380e:	e7fe      	b.n	800380e <vPortEnterCritical+0x4a>
	}
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	20000014 	.word	0x20000014
 8003820:	e000ed04 	.word	0xe000ed04

08003824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <vPortExitCritical+0x50>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <vPortExitCritical+0x24>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	607b      	str	r3, [r7, #4]
}
 8003844:	bf00      	nop
 8003846:	e7fe      	b.n	8003846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <vPortExitCritical+0x50>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3b01      	subs	r3, #1
 800384e:	4a09      	ldr	r2, [pc, #36]	; (8003874 <vPortExitCritical+0x50>)
 8003850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <vPortExitCritical+0x50>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <vPortExitCritical+0x42>
 800385a:	2300      	movs	r3, #0
 800385c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f383 8811 	msr	BASEPRI, r3
}
 8003864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000014 	.word	0x20000014
	...

08003880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003880:	f3ef 8009 	mrs	r0, PSP
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <pxCurrentTCBConst>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	f01e 0f10 	tst.w	lr, #16
 8003890:	bf08      	it	eq
 8003892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800389a:	6010      	str	r0, [r2, #0]
 800389c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038a4:	f380 8811 	msr	BASEPRI, r0
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f7ff fa28 	bl	8002d04 <vTaskSwitchContext>
 80038b4:	f04f 0000 	mov.w	r0, #0
 80038b8:	f380 8811 	msr	BASEPRI, r0
 80038bc:	bc09      	pop	{r0, r3}
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	6808      	ldr	r0, [r1, #0]
 80038c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c6:	f01e 0f10 	tst.w	lr, #16
 80038ca:	bf08      	it	eq
 80038cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038d0:	f380 8809 	msr	PSP, r0
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	f3af 8000 	nop.w

080038e0 <pxCurrentTCBConst>:
 80038e0:	20000a10 	.word	0x20000a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop

080038e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	607b      	str	r3, [r7, #4]
}
 8003900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003902:	f7ff f947 	bl	8002b94 <xTaskIncrementTick>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <SysTick_Handler+0x40>)
 800390e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	2300      	movs	r3, #0
 8003916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	f383 8811 	msr	BASEPRI, r3
}
 800391e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <vPortSetupTimerInterrupt+0x34>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <vPortSetupTimerInterrupt+0x38>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <vPortSetupTimerInterrupt+0x3c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0a      	ldr	r2, [pc, #40]	; (800396c <vPortSetupTimerInterrupt+0x40>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	4a09      	ldr	r2, [pc, #36]	; (8003970 <vPortSetupTimerInterrupt+0x44>)
 800394a:	3b01      	subs	r3, #1
 800394c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <vPortSetupTimerInterrupt+0x34>)
 8003950:	2207      	movs	r2, #7
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	e000e010 	.word	0xe000e010
 8003964:	e000e018 	.word	0xe000e018
 8003968:	20000008 	.word	0x20000008
 800396c:	10624dd3 	.word	0x10624dd3
 8003970:	e000e014 	.word	0xe000e014

08003974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003984 <vPortEnableVFP+0x10>
 8003978:	6801      	ldr	r1, [r0, #0]
 800397a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800397e:	6001      	str	r1, [r0, #0]
 8003980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003982:	bf00      	nop
 8003984:	e000ed88 	.word	0xe000ed88

08003988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800398e:	f3ef 8305 	mrs	r3, IPSR
 8003992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	d914      	bls.n	80039c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800399a:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <vPortValidateInterruptPriority+0x70>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039a4:	4b15      	ldr	r3, [pc, #84]	; (80039fc <vPortValidateInterruptPriority+0x74>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	7afa      	ldrb	r2, [r7, #11]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d20a      	bcs.n	80039c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	607b      	str	r3, [r7, #4]
}
 80039c0:	bf00      	nop
 80039c2:	e7fe      	b.n	80039c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <vPortValidateInterruptPriority+0x78>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <vPortValidateInterruptPriority+0x7c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d90a      	bls.n	80039ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	603b      	str	r3, [r7, #0]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <vPortValidateInterruptPriority+0x60>
	}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000e3f0 	.word	0xe000e3f0
 80039fc:	20000b3c 	.word	0x20000b3c
 8003a00:	e000ed0c 	.word	0xe000ed0c
 8003a04:	20000b40 	.word	0x20000b40

08003a08 <cmd_buffer_init>:
static StaticMessageBuffer_t xMessageBufferStruct;
static MessageBufferHandle_t xMessageBuffer;


void cmd_buffer_init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af02      	add	r7, sp, #8
	xMessageBuffer = xMessageBufferCreateStatic(
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <cmd_buffer_init+0x24>)
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <cmd_buffer_init+0x28>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	2100      	movs	r1, #0
 8003a18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a1c:	f7fe fa14 	bl	8001e48 <xStreamBufferGenericCreateStatic>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4a04      	ldr	r2, [pc, #16]	; (8003a34 <cmd_buffer_init+0x2c>)
 8003a24:	6013      	str	r3, [r2, #0]
                          sizeof(ucMessageBufferStorage),
                          ucMessageBufferStorage,
                         &xMessageBufferStruct );
}
 8003a26:	bf00      	nop
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000d44 	.word	0x20000d44
 8003a30:	20000b44 	.word	0x20000b44
 8003a34:	20000d64 	.word	0x20000d64

08003a38 <send_xbyte_buffer>:
// senddtata
/*--------------------------------------------send_xbyte_buffer()---------------------------------*/

void send_xbyte_buffer(const uint32_t* ucArrayToSend)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
size_t xBytesSent;
const TickType_t x100ms = pdMS_TO_TICKS( 100 );
 8003a40:	2364      	movs	r3, #100	; 0x64
 8003a42:	60fb      	str	r3, [r7, #12]
 /* Send an array to the message buffer, blocking for a maximum of 100ms to
 wait for enough space to be available in the message buffer. */
 xBytesSent = xMessageBufferSend( 
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <send_xbyte_buffer+0x24>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	f7fe faaf 	bl	8001fb0 <xStreamBufferSend>
 8003a52:	60b8      	str	r0, [r7, #8]
 if( xBytesSent != sizeof( ucArrayToSend ) )
 {
 /* The call to xMessageBufferSend() times out before there was enough
 space in the buffer for the data to be written. */
 }
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000d64 	.word	0x20000d64

08003a60 <received_messagebuffer>:



/*--------------------------------------------xMessageBufferReceive()---------------------------------*/
uint32_t received_messagebuffer( uint8_t* ucRxData, uint32_t need_len)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
size_t xReceivedBytes;
const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
 8003a6a:	2314      	movs	r3, #20
 8003a6c:	60fb      	str	r3, [r7, #12]
if (xMessageBuffer == NULL){return;}
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <received_messagebuffer+0x38>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <received_messagebuffer+0x2a>
 /* Receive the next message from the message buffer. Wait in the Blocked
 state (so not using any CPU processing time) for a maximum of 100ms for
 a message to become available. */
 xReceivedBytes = xMessageBufferReceive( xMessageBuffer,
 8003a76:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <received_messagebuffer+0x38>)
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	f7fe fbf9 	bl	8002276 <xStreamBufferReceive>
 8003a84:	60b8      	str	r0, [r7, #8]
 if( xReceivedBytes > 0 )
 {
 /* A ucRxData contains a message that is xReceivedBytes long. Process
 the message here.... */
 }
 return xReceivedBytes;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	e001      	b.n	8003a8e <received_messagebuffer+0x2e>
if (xMessageBuffer == NULL){return;}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000d64 	.word	0x20000d64

08003a9c <Send_Data_Isr>:



/*--------------------------------------------xMessageBufferSendFromISR()---------------------------------*/
void Send_Data_Isr( const char* pcStringToSend, uint32_t len )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
BaseType_t xHigherPriorityTaskWoken = pdFALSE; /* Initialised to pdFALSE. */
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 /* Attempt to send the string to the message buffer. */
if (xMessageBuffer == NULL){return;}
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <Send_Data_Isr+0x30>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <Send_Data_Isr+0x28>
 xMessageBufferSendFromISR( xMessageBuffer,
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <Send_Data_Isr+0x30>)
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	f107 030c 	add.w	r3, r7, #12
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	f7fe fb2c 	bl	800211a <xStreamBufferSendFromISR>
 8003ac2:	e000      	b.n	8003ac6 <Send_Data_Isr+0x2a>
if (xMessageBuffer == NULL){return;}
 8003ac4:	bf00      	nop
                          ( void * ) pcStringToSend,
                          len,
						&xHigherPriorityTaskWoken );
 //if(xHigherPriorityTaskWoken){taskYIELD();}

}
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000d64 	.word	0x20000d64

08003ad0 <__libc_init_array>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4d0d      	ldr	r5, [pc, #52]	; (8003b08 <__libc_init_array+0x38>)
 8003ad4:	4c0d      	ldr	r4, [pc, #52]	; (8003b0c <__libc_init_array+0x3c>)
 8003ad6:	1b64      	subs	r4, r4, r5
 8003ad8:	10a4      	asrs	r4, r4, #2
 8003ada:	2600      	movs	r6, #0
 8003adc:	42a6      	cmp	r6, r4
 8003ade:	d109      	bne.n	8003af4 <__libc_init_array+0x24>
 8003ae0:	4d0b      	ldr	r5, [pc, #44]	; (8003b10 <__libc_init_array+0x40>)
 8003ae2:	4c0c      	ldr	r4, [pc, #48]	; (8003b14 <__libc_init_array+0x44>)
 8003ae4:	f000 f82e 	bl	8003b44 <_init>
 8003ae8:	1b64      	subs	r4, r4, r5
 8003aea:	10a4      	asrs	r4, r4, #2
 8003aec:	2600      	movs	r6, #0
 8003aee:	42a6      	cmp	r6, r4
 8003af0:	d105      	bne.n	8003afe <__libc_init_array+0x2e>
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af8:	4798      	blx	r3
 8003afa:	3601      	adds	r6, #1
 8003afc:	e7ee      	b.n	8003adc <__libc_init_array+0xc>
 8003afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b02:	4798      	blx	r3
 8003b04:	3601      	adds	r6, #1
 8003b06:	e7f2      	b.n	8003aee <__libc_init_array+0x1e>
 8003b08:	08003be0 	.word	0x08003be0
 8003b0c:	08003be0 	.word	0x08003be0
 8003b10:	08003be0 	.word	0x08003be0
 8003b14:	08003be4 	.word	0x08003be4

08003b18 <memcpy>:
 8003b18:	440a      	add	r2, r1
 8003b1a:	4291      	cmp	r1, r2
 8003b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b20:	d100      	bne.n	8003b24 <memcpy+0xc>
 8003b22:	4770      	bx	lr
 8003b24:	b510      	push	{r4, lr}
 8003b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b2e:	4291      	cmp	r1, r2
 8003b30:	d1f9      	bne.n	8003b26 <memcpy+0xe>
 8003b32:	bd10      	pop	{r4, pc}

08003b34 <memset>:
 8003b34:	4402      	add	r2, r0
 8003b36:	4603      	mov	r3, r0
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d100      	bne.n	8003b3e <memset+0xa>
 8003b3c:	4770      	bx	lr
 8003b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b42:	e7f9      	b.n	8003b38 <memset+0x4>

08003b44 <_init>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr

08003b50 <_fini>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr
