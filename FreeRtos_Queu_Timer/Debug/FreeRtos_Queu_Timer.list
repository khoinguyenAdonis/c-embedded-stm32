
FreeRtos_Queu_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b40  08004b40  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b48  08004b48  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004ef0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  20004f00  20004f00  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010efd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a5b  00000000  00000000  00030f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00033998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00034980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cb6  00000000  00000000  00035830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d76  00000000  00000000  000574e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0cd5  00000000  00000000  0006825c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138f31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004184  00000000  00000000  00138f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a80 	.word	0x08004a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004a80 	.word	0x08004a80

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	2000097c 	.word	0x2000097c
 8000504:	200009d0 	.word	0x200009d0

08000508 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetTimerTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetTimerTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000526:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	20000bd0 	.word	0x20000bd0
 8000538:	20000c24 	.word	0x20000c24

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerStaticDef(myTimer01, Callback01, &myTimer01ControlBlock);
 8000542:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <MX_FREERTOS_Init+0xa4>)
 8000544:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800054c:	e883 0003 	stmia.w	r3, {r0, r1}
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000550:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000554:	2200      	movs	r2, #0
 8000556:	2101      	movs	r1, #1
 8000558:	4618      	mov	r0, r3
 800055a:	f001 fb59 	bl	8001c10 <osTimerCreate>
 800055e:	4603      	mov	r3, r0
 8000560:	4a20      	ldr	r2, [pc, #128]	; (80005e4 <MX_FREERTOS_Init+0xa8>)
 8000562:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue */
  osMessageQStaticDef(myQueue, 10, uint32_t, myQueueBuffer, &myQueueControlBlock);
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <MX_FREERTOS_Init+0xac>)
 8000566:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800056a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueHandle = osMessageCreate(osMessageQ(myQueue), NULL);
 8000570:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fbfe 	bl	8001d78 <osMessageCreate>
 800057c:	4603      	mov	r3, r0
 800057e:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <MX_FREERTOS_Init+0xb0>)
 8000580:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of queueProducer */
  osThreadStaticDef(queueProducer, QueueProducerRun, osPriorityNormal, 0, 256, queueProducerBuffer, &queueProducerControlBlock);
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_FREERTOS_Init+0xb4>)
 8000584:	f107 041c 	add.w	r4, r7, #28
 8000588:	461d      	mov	r5, r3
 800058a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  queueProducerHandle = osThreadCreate(osThread(queueProducer), NULL);
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fad6 	bl	8001b4e <osThreadCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <MX_FREERTOS_Init+0xb8>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of queuCustomer */
  osThreadStaticDef(queuCustomer, QueuCustomerRun, osPriorityIdle, 0, 256, queuCustomerBuffer, &queuCustomerControlBlock);
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_FREERTOS_Init+0xbc>)
 80005aa:	463c      	mov	r4, r7
 80005ac:	461d      	mov	r5, r3
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  queuCustomerHandle = osThreadCreate(osThread(queuCustomer), NULL);
 80005ba:	463b      	mov	r3, r7
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fac5 	bl	8001b4e <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <MX_FREERTOS_Init+0xc0>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  osTimerStart(myTimer01Handle, 500	);
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_FREERTOS_Init+0xa8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fb50 	bl	8001c78 <osTimerStart>
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	; 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bdb0      	pop	{r4, r5, r7, pc}
 80005e0:	08004ab8 	.word	0x08004ab8
 80005e4:	20000950 	.word	0x20000950
 80005e8:	08004ac0 	.word	0x08004ac0
 80005ec:	200008dc 	.word	0x200008dc
 80005f0:	08004ad0 	.word	0x08004ad0
 80005f4:	2000002c 	.word	0x2000002c
 80005f8:	08004aec 	.word	0x08004aec
 80005fc:	20000484 	.word	0x20000484

08000600 <QueueProducerRun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_QueueProducerRun */
void QueueProducerRun(void const * argument)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]



#if QUEUE_DEMO_STRUCT
	  TestQueueStruct_t stranmitcustomer;
	  stranmitcustomer.user_id = 122;
 8000608:	237a      	movs	r3, #122	; 0x7a
 800060a:	723b      	strb	r3, [r7, #8]
	  stranmitcustomer.has_scanner[10] = "ok";
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <QueueProducerRun+0x2c>)
 800060e:	b2db      	uxtb	r3, r3
 8000610:	75bb      	strb	r3, [r7, #22]
	  osMessagePut(myQueueHandle,(uint32_t)&stranmitcustomer, MAX_TIMEOUT);
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <QueueProducerRun+0x30>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f107 0108 	add.w	r1, r7, #8
 800061a:	f04f 32ff 	mov.w	r2, #4294967295
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fbd2 	bl	8001dc8 <osMessagePut>
#endif
    osDelay(200);
 8000624:	20c8      	movs	r0, #200	; 0xc8
 8000626:	f001 fade 	bl	8001be6 <osDelay>
  {
 800062a:	e7ed      	b.n	8000608 <QueueProducerRun+0x8>
 800062c:	08004b08 	.word	0x08004b08
 8000630:	200008dc 	.word	0x200008dc

08000634 <QueuCustomerRun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_QueuCustomerRun */
void QueuCustomerRun(void const * argument)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	ret = osMessageGet(myQueueHandle,MAX_TIMEOUT);
	recv = *((uint32_t*)ret.value.v); // ret.value.v kieu void nen doi ve uint32_t
#endif
#if QUEUE_DEMO_STRUCT
	TestQueueStruct_t recvcustomer;
	ret = osMessageGet(myQueueHandle,MAX_TIMEOUT);
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <QueuCustomerRun+0x34>)
 800063e:	6819      	ldr	r1, [r3, #0]
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	f04f 32ff 	mov.w	r2, #4294967295
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fbfd 	bl	8001e48 <osMessageGet>
	memcpy(&recvcustomer,ret.value.v,sizeof(TestQueueStruct_t));
 800064e:	6a3b      	ldr	r3, [r7, #32]
 8000650:	4619      	mov	r1, r3
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	220e      	movs	r2, #14
 8000658:	4618      	mov	r0, r3
 800065a:	f004 f9fb 	bl	8004a54 <memcpy>
#endif
    osDelay(300);
 800065e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000662:	f001 fac0 	bl	8001be6 <osDelay>
  {
 8000666:	e7e9      	b.n	800063c <QueuCustomerRun+0x8>
 8000668:	200008dc 	.word	0x200008dc

0800066c <Callback01>:
  /* USER CODE END QueuCustomerRun */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	asm ("nop");
 8000674:	bf00      	nop
	osTimerStop(myTimer01Handle);
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <Callback01+0x1c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fb40 	bl	8001d00 <osTimerStop>
  /* USER CODE END Callback01 */
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000950 	.word	0x20000950

0800068c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_GPIO_Init+0x30>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <MX_GPIO_Init+0x30>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_GPIO_Init+0x30>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 f98a 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f808 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f7ff ffde 	bl	800068c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006d0:	f7ff ff34 	bl	800053c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006d4:	f001 fa34 	bl	8001b40 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <main+0x18>
	...

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 f9c0 	bl	8004a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SystemClock_Config+0xc8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <SystemClock_Config+0xc8>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <SystemClock_Config+0xc8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <SystemClock_Config+0xcc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <SystemClock_Config+0xcc>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <SystemClock_Config+0xcc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000750:	2348      	movs	r3, #72	; 0x48
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fa5f 	bl	8000c24 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 f82d 	bl	80007ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2102      	movs	r1, #2
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fcc1 	bl	8001114 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000798:	f000 f817 	bl	80007ca <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007bc:	d101      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007be:	f000 f92f 	bl	8000a20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ce:	b672      	cpsid	i
}
 80007d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_MspInit+0x54>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <HAL_MspInit+0x54>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x54>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_MspInit+0x54>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_MspInit+0x54>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_MspInit+0x54>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 f9d9 	bl	8000bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	; 0x38
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4b34      	ldr	r3, [pc, #208]	; (8000914 <HAL_InitTick+0xe8>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a33      	ldr	r2, [pc, #204]	; (8000914 <HAL_InitTick+0xe8>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b31      	ldr	r3, [pc, #196]	; (8000914 <HAL_InitTick+0xe8>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000858:	f107 0210 	add.w	r2, r7, #16
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fe62 	bl	800152c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800086c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086e:	2b00      	cmp	r3, #0
 8000870:	d103      	bne.n	800087a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000872:	f000 fe47 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
 8000876:	6378      	str	r0, [r7, #52]	; 0x34
 8000878:	e004      	b.n	8000884 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800087a:	f000 fe43 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
 800087e:	4603      	mov	r3, r0
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000886:	4a24      	ldr	r2, [pc, #144]	; (8000918 <HAL_InitTick+0xec>)
 8000888:	fba2 2303 	umull	r2, r3, r2, r3
 800088c:	0c9b      	lsrs	r3, r3, #18
 800088e:	3b01      	subs	r3, #1
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <HAL_InitTick+0xf0>)
 8000894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000898:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <HAL_InitTick+0xf0>)
 800089c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80008a2:	4a1e      	ldr	r2, [pc, #120]	; (800091c <HAL_InitTick+0xf0>)
 80008a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <HAL_InitTick+0xf0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <HAL_InitTick+0xf0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_InitTick+0xf0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <HAL_InitTick+0xf0>)
 80008bc:	f000 fe68 	bl	8001590 <HAL_TIM_Base_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d11b      	bne.n	8000906 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80008ce:	4813      	ldr	r0, [pc, #76]	; (800091c <HAL_InitTick+0xf0>)
 80008d0:	f000 feb8 	bl	8001644 <HAL_TIM_Base_Start_IT>
 80008d4:	4603      	mov	r3, r0
 80008d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d111      	bne.n	8000906 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008e2:	201c      	movs	r0, #28
 80008e4:	f000 f990 	bl	8000c08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b0f      	cmp	r3, #15
 80008ec:	d808      	bhi.n	8000900 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80008ee:	2200      	movs	r2, #0
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	201c      	movs	r0, #28
 80008f4:	f000 f96c 	bl	8000bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008f8:	4a09      	ldr	r2, [pc, #36]	; (8000920 <HAL_InitTick+0xf4>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
 80008fe:	e002      	b.n	8000906 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000906:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800090a:	4618      	mov	r0, r3
 800090c:	3738      	adds	r7, #56	; 0x38
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	431bde83 	.word	0x431bde83
 800091c:	20001024 	.word	0x20001024
 8000920:	20000004 	.word	0x20000004

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <TIM2_IRQHandler+0x10>)
 8000956:	f000 fee5 	bl	8001724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20001024 	.word	0x20001024

08000964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098e:	490e      	ldr	r1, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a4:	4c0b      	ldr	r4, [pc, #44]	; (80009d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009b2:	f7ff ffd7 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f004 f829 	bl	8004a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ba:	f7ff fe81 	bl	80006c0 <main>
  bx  lr    
 80009be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009cc:	08004b50 	.word	0x08004b50
  ldr r2, =_sbss
 80009d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009d4:	20004f00 	.word	0x20004f00

080009d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC_IRQHandler>
	...

080009dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <HAL_Init+0x40>)
 80009e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_Init+0x40>)
 80009f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x40>)
 80009fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f8d8 	bl	8000bba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f7ff ff0e 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff fee0 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023c00 	.word	0x40023c00

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	2000106c 	.word	0x2000106c

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000106c 	.word	0x2000106c

08000a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db0b      	blt.n	8000aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 021f 	and.w	r2, r3, #31
 8000adc:	4907      	ldr	r1, [pc, #28]	; (8000afc <__NVIC_EnableIRQ+0x38>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ff4c 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be2:	f7ff ff61 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	6978      	ldr	r0, [r7, #20]
 8000bee:	f7ff ffb1 	bl	8000b54 <NVIC_EncodePriority>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff80 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff54 	bl	8000ac4 <__NVIC_EnableIRQ>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e267      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d075      	beq.n	8000d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c42:	4b88      	ldr	r3, [pc, #544]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d00c      	beq.n	8000c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c4e:	4b85      	ldr	r3, [pc, #532]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d112      	bne.n	8000c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c5a:	4b82      	ldr	r3, [pc, #520]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c66:	d10b      	bne.n	8000c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c68:	4b7e      	ldr	r3, [pc, #504]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d05b      	beq.n	8000d2c <HAL_RCC_OscConfig+0x108>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d157      	bne.n	8000d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e242      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c88:	d106      	bne.n	8000c98 <HAL_RCC_OscConfig+0x74>
 8000c8a:	4b76      	ldr	r3, [pc, #472]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a75      	ldr	r2, [pc, #468]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e01d      	b.n	8000cd4 <HAL_RCC_OscConfig+0xb0>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ca0:	d10c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x98>
 8000ca2:	4b70      	ldr	r3, [pc, #448]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a6f      	ldr	r2, [pc, #444]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b6d      	ldr	r3, [pc, #436]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a6c      	ldr	r2, [pc, #432]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e00b      	b.n	8000cd4 <HAL_RCC_OscConfig+0xb0>
 8000cbc:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a68      	ldr	r2, [pc, #416]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b66      	ldr	r3, [pc, #408]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a65      	ldr	r2, [pc, #404]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d013      	beq.n	8000d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff feb4 	bl	8000a48 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce4:	f7ff feb0 	bl	8000a48 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b64      	cmp	r3, #100	; 0x64
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e207      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f0      	beq.n	8000ce4 <HAL_RCC_OscConfig+0xc0>
 8000d02:	e014      	b.n	8000d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d04:	f7ff fea0 	bl	8000a48 <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d0c:	f7ff fe9c 	bl	8000a48 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b64      	cmp	r3, #100	; 0x64
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e1f3      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1e:	4b51      	ldr	r3, [pc, #324]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f0      	bne.n	8000d0c <HAL_RCC_OscConfig+0xe8>
 8000d2a:	e000      	b.n	8000d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d063      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d3a:	4b4a      	ldr	r3, [pc, #296]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00b      	beq.n	8000d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d46:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d4e:	2b08      	cmp	r3, #8
 8000d50:	d11c      	bne.n	8000d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d116      	bne.n	8000d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d005      	beq.n	8000d76 <HAL_RCC_OscConfig+0x152>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d001      	beq.n	8000d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e1c7      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	4937      	ldr	r1, [pc, #220]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8a:	e03a      	b.n	8000e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d020      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <HAL_RCC_OscConfig+0x244>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fe55 	bl	8000a48 <HAL_GetTick>
 8000d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da2:	f7ff fe51 	bl	8000a48 <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e1a8      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0f0      	beq.n	8000da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4925      	ldr	r1, [pc, #148]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
 8000dd4:	e015      	b.n	8000e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_RCC_OscConfig+0x244>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fe34 	bl	8000a48 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de4:	f7ff fe30 	bl	8000a48 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e187      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d036      	beq.n	8000e7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d016      	beq.n	8000e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_RCC_OscConfig+0x248>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e1c:	f7ff fe14 	bl	8000a48 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e24:	f7ff fe10 	bl	8000a48 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e167      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0f0      	beq.n	8000e24 <HAL_RCC_OscConfig+0x200>
 8000e42:	e01b      	b.n	8000e7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_RCC_OscConfig+0x248>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4a:	f7ff fdfd 	bl	8000a48 <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	e00e      	b.n	8000e70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e52:	f7ff fdf9 	bl	8000a48 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d907      	bls.n	8000e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e150      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
 8000e64:	40023800 	.word	0x40023800
 8000e68:	42470000 	.word	0x42470000
 8000e6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e70:	4b88      	ldr	r3, [pc, #544]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1ea      	bne.n	8000e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 8097 	beq.w	8000fb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8e:	4b81      	ldr	r3, [pc, #516]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10f      	bne.n	8000eba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b7d      	ldr	r3, [pc, #500]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a7c      	ldr	r2, [pc, #496]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b7a      	ldr	r3, [pc, #488]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eba:	4b77      	ldr	r3, [pc, #476]	; (8001098 <HAL_RCC_OscConfig+0x474>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d118      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec6:	4b74      	ldr	r3, [pc, #464]	; (8001098 <HAL_RCC_OscConfig+0x474>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a73      	ldr	r2, [pc, #460]	; (8001098 <HAL_RCC_OscConfig+0x474>)
 8000ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fdb9 	bl	8000a48 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eda:	f7ff fdb5 	bl	8000a48 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e10c      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eec:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <HAL_RCC_OscConfig+0x474>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f0      	beq.n	8000eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x2ea>
 8000f00:	4b64      	ldr	r3, [pc, #400]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f04:	4a63      	ldr	r2, [pc, #396]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f0c:	e01c      	b.n	8000f48 <HAL_RCC_OscConfig+0x324>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0x30c>
 8000f16:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1a:	4a5e      	ldr	r2, [pc, #376]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6713      	str	r3, [r2, #112]	; 0x70
 8000f22:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f26:	4a5b      	ldr	r2, [pc, #364]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f2e:	e00b      	b.n	8000f48 <HAL_RCC_OscConfig+0x324>
 8000f30:	4b58      	ldr	r3, [pc, #352]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f34:	4a57      	ldr	r2, [pc, #348]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f36:	f023 0301 	bic.w	r3, r3, #1
 8000f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f3c:	4b55      	ldr	r3, [pc, #340]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f40:	4a54      	ldr	r2, [pc, #336]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f42:	f023 0304 	bic.w	r3, r3, #4
 8000f46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d015      	beq.n	8000f7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f50:	f7ff fd7a 	bl	8000a48 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f56:	e00a      	b.n	8000f6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f58:	f7ff fd76 	bl	8000a48 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e0cb      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6e:	4b49      	ldr	r3, [pc, #292]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0ee      	beq.n	8000f58 <HAL_RCC_OscConfig+0x334>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fd64 	bl	8000a48 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f82:	e00a      	b.n	8000f9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f84:	f7ff fd60 	bl	8000a48 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e0b5      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1ee      	bne.n	8000f84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d105      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fac:	4b39      	ldr	r3, [pc, #228]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a38      	ldr	r2, [pc, #224]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80a1 	beq.w	8001104 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fc2:	4b34      	ldr	r3, [pc, #208]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d05c      	beq.n	8001088 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d141      	bne.n	800105a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <HAL_RCC_OscConfig+0x478>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fd34 	bl	8000a48 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff fd30 	bl	8000a48 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e087      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	085b      	lsrs	r3, r3, #1
 800101a:	3b01      	subs	r3, #1
 800101c:	041b      	lsls	r3, r3, #16
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	061b      	lsls	r3, r3, #24
 8001026:	491b      	ldr	r1, [pc, #108]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <HAL_RCC_OscConfig+0x478>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fd09 	bl	8000a48 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800103a:	f7ff fd05 	bl	8000a48 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e05c      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x416>
 8001058:	e054      	b.n	8001104 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_RCC_OscConfig+0x478>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fcf2 	bl	8000a48 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001068:	f7ff fcee 	bl	8000a48 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e045      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x444>
 8001086:	e03d      	b.n	8001104 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d107      	bne.n	80010a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e038      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000
 800109c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_RCC_OscConfig+0x4ec>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d028      	beq.n	8001100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d121      	bne.n	8001100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d11a      	bne.n	8001100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010d0:	4013      	ands	r3, r2
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010d8:	4293      	cmp	r3, r2
 80010da:	d111      	bne.n	8001100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	3b01      	subs	r3, #1
 80010ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d107      	bne.n	8001100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0cc      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001128:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d90c      	bls.n	8001150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b65      	ldr	r3, [pc, #404]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	4b63      	ldr	r3, [pc, #396]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0b8      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001168:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a58      	ldr	r2, [pc, #352]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800118a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800118c:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	494d      	ldr	r1, [pc, #308]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	4313      	orrs	r3, r2
 800119c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d044      	beq.n	8001234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d119      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e07f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d003      	beq.n	80011d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e06f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e067      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f023 0203 	bic.w	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4934      	ldr	r1, [pc, #208]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001204:	f7ff fc20 	bl	8000a48 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	e00a      	b.n	8001222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120c:	f7ff fc1c 	bl	8000a48 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e04f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 020c 	and.w	r2, r3, #12
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	429a      	cmp	r2, r3
 8001232:	d1eb      	bne.n	800120c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d20c      	bcs.n	800125c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e032      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4916      	ldr	r1, [pc, #88]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	490e      	ldr	r1, [pc, #56]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	4313      	orrs	r3, r2
 8001298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800129a:	f000 f821 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 800129e:	4602      	mov	r2, r0
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	490a      	ldr	r1, [pc, #40]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	5ccb      	ldrb	r3, [r1, r3]
 80012ae:	fa22 f303 	lsr.w	r3, r2, r3
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fab6 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023c00 	.word	0x40023c00
 80012d0:	40023800 	.word	0x40023800
 80012d4:	08004b28 	.word	0x08004b28
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e4:	b094      	sub	sp, #80	; 0x50
 80012e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	647b      	str	r3, [r7, #68]	; 0x44
 80012ec:	2300      	movs	r3, #0
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012f0:	2300      	movs	r3, #0
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012f8:	4b79      	ldr	r3, [pc, #484]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b08      	cmp	r3, #8
 8001302:	d00d      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x40>
 8001304:	2b08      	cmp	r3, #8
 8001306:	f200 80e1 	bhi.w	80014cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <HAL_RCC_GetSysClockFreq+0x34>
 800130e:	2b04      	cmp	r3, #4
 8001310:	d003      	beq.n	800131a <HAL_RCC_GetSysClockFreq+0x3a>
 8001312:	e0db      	b.n	80014cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001314:	4b73      	ldr	r3, [pc, #460]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001316:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001318:	e0db      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800131a:	4b73      	ldr	r3, [pc, #460]	; (80014e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800131c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800131e:	e0d8      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001320:	4b6f      	ldr	r3, [pc, #444]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001328:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800132a:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d063      	beq.n	80013fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001336:	4b6a      	ldr	r3, [pc, #424]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	099b      	lsrs	r3, r3, #6
 800133c:	2200      	movs	r2, #0
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001340:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
 800134e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001352:	4622      	mov	r2, r4
 8001354:	462b      	mov	r3, r5
 8001356:	f04f 0000 	mov.w	r0, #0
 800135a:	f04f 0100 	mov.w	r1, #0
 800135e:	0159      	lsls	r1, r3, #5
 8001360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001364:	0150      	lsls	r0, r2, #5
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4621      	mov	r1, r4
 800136c:	1a51      	subs	r1, r2, r1
 800136e:	6139      	str	r1, [r7, #16]
 8001370:	4629      	mov	r1, r5
 8001372:	eb63 0301 	sbc.w	r3, r3, r1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001384:	4659      	mov	r1, fp
 8001386:	018b      	lsls	r3, r1, #6
 8001388:	4651      	mov	r1, sl
 800138a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800138e:	4651      	mov	r1, sl
 8001390:	018a      	lsls	r2, r1, #6
 8001392:	4651      	mov	r1, sl
 8001394:	ebb2 0801 	subs.w	r8, r2, r1
 8001398:	4659      	mov	r1, fp
 800139a:	eb63 0901 	sbc.w	r9, r3, r1
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013b2:	4690      	mov	r8, r2
 80013b4:	4699      	mov	r9, r3
 80013b6:	4623      	mov	r3, r4
 80013b8:	eb18 0303 	adds.w	r3, r8, r3
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	462b      	mov	r3, r5
 80013c0:	eb49 0303 	adc.w	r3, r9, r3
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013d2:	4629      	mov	r1, r5
 80013d4:	024b      	lsls	r3, r1, #9
 80013d6:	4621      	mov	r1, r4
 80013d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013dc:	4621      	mov	r1, r4
 80013de:	024a      	lsls	r2, r1, #9
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e6:	2200      	movs	r2, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013f0:	f7fe feee 	bl	80001d0 <__aeabi_uldivmod>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4613      	mov	r3, r2
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013fc:	e058      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	099b      	lsrs	r3, r3, #6
 8001404:	2200      	movs	r2, #0
 8001406:	4618      	mov	r0, r3
 8001408:	4611      	mov	r1, r2
 800140a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800140e:	623b      	str	r3, [r7, #32]
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
 8001414:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001418:	4642      	mov	r2, r8
 800141a:	464b      	mov	r3, r9
 800141c:	f04f 0000 	mov.w	r0, #0
 8001420:	f04f 0100 	mov.w	r1, #0
 8001424:	0159      	lsls	r1, r3, #5
 8001426:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800142a:	0150      	lsls	r0, r2, #5
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4641      	mov	r1, r8
 8001432:	ebb2 0a01 	subs.w	sl, r2, r1
 8001436:	4649      	mov	r1, r9
 8001438:	eb63 0b01 	sbc.w	fp, r3, r1
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001448:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800144c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001450:	ebb2 040a 	subs.w	r4, r2, sl
 8001454:	eb63 050b 	sbc.w	r5, r3, fp
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	00eb      	lsls	r3, r5, #3
 8001462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001466:	00e2      	lsls	r2, r4, #3
 8001468:	4614      	mov	r4, r2
 800146a:	461d      	mov	r5, r3
 800146c:	4643      	mov	r3, r8
 800146e:	18e3      	adds	r3, r4, r3
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	464b      	mov	r3, r9
 8001474:	eb45 0303 	adc.w	r3, r5, r3
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001486:	4629      	mov	r1, r5
 8001488:	028b      	lsls	r3, r1, #10
 800148a:	4621      	mov	r1, r4
 800148c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001490:	4621      	mov	r1, r4
 8001492:	028a      	lsls	r2, r1, #10
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800149a:	2200      	movs	r2, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	61fa      	str	r2, [r7, #28]
 80014a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a4:	f7fe fe94 	bl	80001d0 <__aeabi_uldivmod>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4613      	mov	r3, r2
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	3301      	adds	r3, #1
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80014c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014ca:	e002      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3750      	adds	r7, #80	; 0x50
 80014d8:	46bd      	mov	sp, r7
 80014da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	00f42400 	.word	0x00f42400
 80014e8:	007a1200 	.word	0x007a1200

080014ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_RCC_GetHCLKFreq+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000000 	.word	0x20000000

08001504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001508:	f7ff fff0 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	0a9b      	lsrs	r3, r3, #10
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	4903      	ldr	r1, [pc, #12]	; (8001528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	08004b38 	.word	0x08004b38

0800152c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	220f      	movs	r2, #15
 800153a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_RCC_GetClockConfig+0x5c>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0203 	and.w	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_RCC_GetClockConfig+0x5c>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_RCC_GetClockConfig+0x5c>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_RCC_GetClockConfig+0x5c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_RCC_GetClockConfig+0x60>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0207 	and.w	r2, r3, #7
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	601a      	str	r2, [r3, #0]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	40023c00 	.word	0x40023c00

08001590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e041      	b.n	8001626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f839 	bl	800162e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3304      	adds	r3, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f000 f9d8 	bl	8001984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d001      	beq.n	800165c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e04e      	b.n	80016fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_TIM_Base_Start_IT+0xc4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d022      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x80>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001686:	d01d      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x80>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1f      	ldr	r2, [pc, #124]	; (800170c <HAL_TIM_Base_Start_IT+0xc8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d018      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x80>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <HAL_TIM_Base_Start_IT+0xcc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d013      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x80>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <HAL_TIM_Base_Start_IT+0xd0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00e      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x80>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <HAL_TIM_Base_Start_IT+0xd4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d009      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x80>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <HAL_TIM_Base_Start_IT+0xd8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d004      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x80>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_TIM_Base_Start_IT+0xdc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d111      	bne.n	80016e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d010      	beq.n	80016f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0201 	orr.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016e6:	e007      	b.n	80016f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40010000 	.word	0x40010000
 800170c:	40000400 	.word	0x40000400
 8001710:	40000800 	.word	0x40000800
 8001714:	40000c00 	.word	0x40000c00
 8001718:	40010400 	.word	0x40010400
 800171c:	40014000 	.word	0x40014000
 8001720:	40001800 	.word	0x40001800

08001724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b02      	cmp	r3, #2
 8001738:	d122      	bne.n	8001780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b02      	cmp	r3, #2
 8001746:	d11b      	bne.n	8001780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f06f 0202 	mvn.w	r2, #2
 8001750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f8ee 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 800176c:	e005      	b.n	800177a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f8e0 	bl	8001934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f8f1 	bl	800195c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b04      	cmp	r3, #4
 800178c:	d122      	bne.n	80017d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b04      	cmp	r3, #4
 800179a:	d11b      	bne.n	80017d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f06f 0204 	mvn.w	r2, #4
 80017a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f8c4 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 80017c0:	e005      	b.n	80017ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f8b6 	bl	8001934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f8c7 	bl	800195c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d122      	bne.n	8001828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d11b      	bne.n	8001828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f06f 0208 	mvn.w	r2, #8
 80017f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2204      	movs	r2, #4
 80017fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f89a 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8001814:	e005      	b.n	8001822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f88c 	bl	8001934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f89d 	bl	800195c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b10      	cmp	r3, #16
 8001834:	d122      	bne.n	800187c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b10      	cmp	r3, #16
 8001842:	d11b      	bne.n	800187c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f06f 0210 	mvn.w	r2, #16
 800184c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2208      	movs	r2, #8
 8001852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f870 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8001868:	e005      	b.n	8001876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f862 	bl	8001934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f873 	bl	800195c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d10e      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d107      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0201 	mvn.w	r2, #1
 80018a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7fe ff82 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	2b80      	cmp	r3, #128	; 0x80
 80018b4:	d10e      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c0:	2b80      	cmp	r3, #128	; 0x80
 80018c2:	d107      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f902 	bl	8001ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018de:	2b40      	cmp	r3, #64	; 0x40
 80018e0:	d10e      	bne.n	8001900 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ec:	2b40      	cmp	r3, #64	; 0x40
 80018ee:	d107      	bne.n	8001900 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f838 	bl	8001970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0320 	and.w	r3, r3, #32
 800190a:	2b20      	cmp	r3, #32
 800190c:	d10e      	bne.n	800192c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	2b20      	cmp	r3, #32
 800191a:	d107      	bne.n	800192c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 0220 	mvn.w	r2, #32
 8001924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f8cc 	bl	8001ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a40      	ldr	r2, [pc, #256]	; (8001a98 <TIM_Base_SetConfig+0x114>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <TIM_Base_SetConfig+0x40>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a2:	d00f      	beq.n	80019c4 <TIM_Base_SetConfig+0x40>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a3d      	ldr	r2, [pc, #244]	; (8001a9c <TIM_Base_SetConfig+0x118>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00b      	beq.n	80019c4 <TIM_Base_SetConfig+0x40>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a3c      	ldr	r2, [pc, #240]	; (8001aa0 <TIM_Base_SetConfig+0x11c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d007      	beq.n	80019c4 <TIM_Base_SetConfig+0x40>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3b      	ldr	r2, [pc, #236]	; (8001aa4 <TIM_Base_SetConfig+0x120>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d003      	beq.n	80019c4 <TIM_Base_SetConfig+0x40>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3a      	ldr	r2, [pc, #232]	; (8001aa8 <TIM_Base_SetConfig+0x124>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d108      	bne.n	80019d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a2f      	ldr	r2, [pc, #188]	; (8001a98 <TIM_Base_SetConfig+0x114>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d02b      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e4:	d027      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a2c      	ldr	r2, [pc, #176]	; (8001a9c <TIM_Base_SetConfig+0x118>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d023      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a2b      	ldr	r2, [pc, #172]	; (8001aa0 <TIM_Base_SetConfig+0x11c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01f      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <TIM_Base_SetConfig+0x120>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01b      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <TIM_Base_SetConfig+0x124>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d017      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a28      	ldr	r2, [pc, #160]	; (8001aac <TIM_Base_SetConfig+0x128>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <TIM_Base_SetConfig+0x12c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00f      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <TIM_Base_SetConfig+0x130>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00b      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <TIM_Base_SetConfig+0x134>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a24      	ldr	r2, [pc, #144]	; (8001abc <TIM_Base_SetConfig+0x138>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d003      	beq.n	8001a36 <TIM_Base_SetConfig+0xb2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <TIM_Base_SetConfig+0x13c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d108      	bne.n	8001a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <TIM_Base_SetConfig+0x114>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d003      	beq.n	8001a7c <TIM_Base_SetConfig+0xf8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <TIM_Base_SetConfig+0x124>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d103      	bne.n	8001a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	615a      	str	r2, [r3, #20]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40000800 	.word	0x40000800
 8001aa4:	40000c00 	.word	0x40000c00
 8001aa8:	40010400 	.word	0x40010400
 8001aac:	40014000 	.word	0x40014000
 8001ab0:	40014400 	.word	0x40014400
 8001ab4:	40014800 	.word	0x40014800
 8001ab8:	40001800 	.word	0x40001800
 8001abc:	40001c00 	.word	0x40001c00
 8001ac0:	40002000 	.word	0x40002000

08001ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afe:	2b84      	cmp	r3, #132	; 0x84
 8001b00:	d005      	beq.n	8001b0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001b02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	3303      	adds	r3, #3
 8001b0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b22:	f3ef 8305 	mrs	r3, IPSR
 8001b26:	607b      	str	r3, [r7, #4]
  return(result);
 8001b28:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001b44:	f001 fa12 	bl	8002f6c <vTaskStartScheduler>
  
  return osOK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b50:	b089      	sub	sp, #36	; 0x24
 8001b52:	af04      	add	r7, sp, #16
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <osThreadCreate+0x54>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d01c      	beq.n	8001ba2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685c      	ldr	r4, [r3, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681d      	ldr	r5, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691e      	ldr	r6, [r3, #16]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ffb6 	bl	8001aec <makeFreeRtosPriority>
 8001b80:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	9100      	str	r1, [sp, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4632      	mov	r2, r6
 8001b94:	4629      	mov	r1, r5
 8001b96:	4620      	mov	r0, r4
 8001b98:	f001 f820 	bl	8002bdc <xTaskCreateStatic>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	e01c      	b.n	8001bdc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685c      	ldr	r4, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bae:	b29e      	uxth	r6, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff98 	bl	8001aec <makeFreeRtosPriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	9200      	str	r2, [sp, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	4632      	mov	r2, r6
 8001bca:	4629      	mov	r1, r5
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f001 f862 	bl	8002c96 <xTaskCreate>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d001      	beq.n	8001bdc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e000      	b.n	8001bde <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001be6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <osDelay+0x16>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	e000      	b.n	8001bfe <osDelay+0x18>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 f980 	bl	8002f04 <vTaskDelay>
  
  return osOK;
 8001c04:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d013      	beq.n	8001c4e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <osTimerCreate+0x20>
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	e000      	b.n	8001c32 <osTimerCreate+0x22>
 8001c30:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8001c3a:	9201      	str	r2, [sp, #4]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	460a      	mov	r2, r1
 8001c42:	2101      	movs	r1, #1
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <osTimerCreate+0x64>)
 8001c46:	f001 ff44 	bl	8003ad2 <xTimerCreateStatic>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	e00e      	b.n	8001c6c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <osTimerCreate+0x48>
 8001c54:	2201      	movs	r2, #1
 8001c56:	e000      	b.n	8001c5a <osTimerCreate+0x4a>
 8001c58:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2101      	movs	r1, #1
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <osTimerCreate+0x64>)
 8001c66:	f001 ff13 	bl	8003a90 <xTimerCreate>
 8001c6a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	08004b0c 	.word	0x08004b0c

08001c78 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <osTimerStart+0x20>
    ticks = 1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8001c98:	f7ff ff40 	bl	8001b1c <inHandlerMode>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01a      	beq.n	8001cd8 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	9200      	str	r2, [sp, #0]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	2109      	movs	r1, #9
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f001 ff88 	bl	8003bc4 <xTimerGenericCommand>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d002      	beq.n	8001cc0 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8001cba:	23ff      	movs	r3, #255	; 0xff
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e018      	b.n	8001cf2 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d015      	beq.n	8001cf2 <osTimerStart+0x7a>
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <osTimerStart+0x84>)
 8001cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	e00c      	b.n	8001cf2 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f001 ff6e 	bl	8003bc4 <xTimerGenericCommand>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d001      	beq.n	8001cf2 <osTimerStart+0x7a>
      result = osErrorOS;
 8001cee:	23ff      	movs	r3, #255	; 0xff
 8001cf0:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8001cf2:	697b      	ldr	r3, [r7, #20]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	e000ed04 	.word	0xe000ed04

08001d00 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8001d10:	f7ff ff04 	bl	8001b1c <inHandlerMode>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d019      	beq.n	8001d4e <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	2200      	movs	r2, #0
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	2200      	movs	r2, #0
 8001d24:	2108      	movs	r1, #8
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f001 ff4c 	bl	8003bc4 <xTimerGenericCommand>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <osTimerStop+0x36>
      return osErrorOS;
 8001d32:	23ff      	movs	r3, #255	; 0xff
 8001d34:	e019      	b.n	8001d6a <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d015      	beq.n	8001d68 <osTimerStop+0x68>
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <osTimerStop+0x74>)
 8001d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	f3bf 8f6f 	isb	sy
 8001d4c:	e00c      	b.n	8001d68 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	2200      	movs	r2, #0
 8001d56:	2103      	movs	r1, #3
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f001 ff33 	bl	8003bc4 <xTimerGenericCommand>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d001      	beq.n	8001d68 <osTimerStop+0x68>
      result = osErrorOS;
 8001d64:	23ff      	movs	r3, #255	; 0xff
 8001d66:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8001d68:	68fb      	ldr	r3, [r7, #12]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000ed04 	.word	0xe000ed04

08001d78 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d011      	beq.n	8001dae <osMessageCreate+0x36>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2400      	movs	r4, #0
 8001da4:	9400      	str	r4, [sp, #0]
 8001da6:	f000 f9df 	bl	8002168 <xQueueGenericCreateStatic>
 8001daa:	4603      	mov	r3, r0
 8001dac:	e008      	b.n	8001dc0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	4619      	mov	r1, r3
 8001dba:	f000 fa4d 	bl	8002258 <xQueueGenericCreate>
 8001dbe:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd90      	pop	{r4, r7, pc}

08001dc8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <osMessagePut+0x1e>
    ticks = 1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8001de6:	f7ff fe99 	bl	8001b1c <inHandlerMode>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d018      	beq.n	8001e22 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001df0:	f107 0210 	add.w	r2, r7, #16
 8001df4:	f107 0108 	add.w	r1, r7, #8
 8001df8:	2300      	movs	r3, #0
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fb84 	bl	8002508 <xQueueGenericSendFromISR>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d001      	beq.n	8001e0a <osMessagePut+0x42>
      return osErrorOS;
 8001e06:	23ff      	movs	r3, #255	; 0xff
 8001e08:	e018      	b.n	8001e3c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d014      	beq.n	8001e3a <osMessagePut+0x72>
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <osMessagePut+0x7c>)
 8001e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f3bf 8f4f 	dsb	sy
 8001e1c:	f3bf 8f6f 	isb	sy
 8001e20:	e00b      	b.n	8001e3a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001e22:	f107 0108 	add.w	r1, r7, #8
 8001e26:	2300      	movs	r3, #0
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fa6e 	bl	800230c <xQueueGenericSend>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d001      	beq.n	8001e3a <osMessagePut+0x72>
      return osErrorOS;
 8001e36:	23ff      	movs	r3, #255	; 0xff
 8001e38:	e000      	b.n	8001e3c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	e000ed04 	.word	0xe000ed04

08001e48 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	617b      	str	r3, [r7, #20]
    return event;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	461c      	mov	r4, r3
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e76:	e054      	b.n	8001f22 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e86:	d103      	bne.n	8001e90 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	e009      	b.n	8001ea4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <osMessageGet+0x5c>
      ticks = 1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8001ea4:	f7ff fe3a 	bl	8001b1c <inHandlerMode>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01c      	beq.n	8001ee8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001eae:	f107 0220 	add.w	r2, r7, #32
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	68b8      	ldr	r0, [r7, #8]
 8001ebc:	f000 fca0 	bl	8002800 <xQueueReceiveFromISR>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e001      	b.n	8001ed0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d01d      	beq.n	8001f12 <osMessageGet+0xca>
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <osMessageGet+0xe4>)
 8001ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f3bf 8f4f 	dsb	sy
 8001ee2:	f3bf 8f6f 	isb	sy
 8001ee6:	e014      	b.n	8001f12 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	3304      	adds	r3, #4
 8001eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f000 fba4 	bl	8002640 <xQueueReceive>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d102      	bne.n	8001f04 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8001efe:	2310      	movs	r3, #16
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e006      	b.n	8001f12 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <osMessageGet+0xc6>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e000      	b.n	8001f10 <osMessageGet+0xc8>
 8001f0e:	2340      	movs	r3, #64	; 0x40
 8001f10:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	461c      	mov	r4, r3
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	372c      	adds	r7, #44	; 0x2c
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000ed04 	.word	0xe000ed04

08001f30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f103 0208 	add.w	r2, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f103 0208 	add.w	r2, r3, #8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f103 0208 	add.w	r2, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d103      	bne.n	8001ff2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e00c      	b.n	800200c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3308      	adds	r3, #8
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e002      	b.n	8002000 <vListInsert+0x2e>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	429a      	cmp	r2, r3
 800200a:	d2f6      	bcs.n	8001ffa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	601a      	str	r2, [r3, #0]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6892      	ldr	r2, [r2, #8]
 800205a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6852      	ldr	r2, [r2, #4]
 8002064:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	d103      	bne.n	8002078 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	1e5a      	subs	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10a      	bne.n	80020c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020be:	bf00      	nop
 80020c0:	e7fe      	b.n	80020c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80020c2:	f002 f997 	bl	80043f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	68f9      	ldr	r1, [r7, #12]
 80020d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	441a      	add	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	3b01      	subs	r3, #1
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	441a      	add	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	22ff      	movs	r2, #255	; 0xff
 8002106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	22ff      	movs	r2, #255	; 0xff
 800210e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d114      	bne.n	8002142 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01a      	beq.n	8002156 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3310      	adds	r3, #16
 8002124:	4618      	mov	r0, r3
 8002126:	f001 f9a5 	bl	8003474 <xTaskRemoveFromEventList>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <xQueueGenericReset+0xcc>)
 8002132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	e009      	b.n	8002156 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3310      	adds	r3, #16
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fef2 	bl	8001f30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3324      	adds	r3, #36	; 0x24
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff feed 	bl	8001f30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002156:	f002 f97d 	bl	8004454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	e000ed04 	.word	0xe000ed04

08002168 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08e      	sub	sp, #56	; 0x38
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800218e:	bf00      	nop
 8002190:	e7fe      	b.n	8002190 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219c:	f383 8811 	msr	BASEPRI, r3
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021aa:	bf00      	nop
 80021ac:	e7fe      	b.n	80021ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <xQueueGenericCreateStatic+0x52>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <xQueueGenericCreateStatic+0x56>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <xQueueGenericCreateStatic+0x58>
 80021be:	2300      	movs	r3, #0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80021c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	f3bf 8f4f 	dsb	sy
 80021d4:	623b      	str	r3, [r7, #32]
}
 80021d6:	bf00      	nop
 80021d8:	e7fe      	b.n	80021d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <xQueueGenericCreateStatic+0x7e>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <xQueueGenericCreateStatic+0x82>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <xQueueGenericCreateStatic+0x84>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80021f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	61fb      	str	r3, [r7, #28]
}
 8002202:	bf00      	nop
 8002204:	e7fe      	b.n	8002204 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002206:	2348      	movs	r3, #72	; 0x48
 8002208:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b48      	cmp	r3, #72	; 0x48
 800220e:	d00a      	beq.n	8002226 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002214:	f383 8811 	msr	BASEPRI, r3
 8002218:	f3bf 8f6f 	isb	sy
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	61bb      	str	r3, [r7, #24]
}
 8002222:	bf00      	nop
 8002224:	e7fe      	b.n	8002224 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002226:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00d      	beq.n	800224e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800223a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f83f 	bl	80022cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002250:	4618      	mov	r0, r3
 8002252:	3730      	adds	r7, #48	; 0x30
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <xQueueGenericCreate+0x2a>
	__asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	613b      	str	r3, [r7, #16]
}
 800227e:	bf00      	nop
 8002280:	e7fe      	b.n	8002280 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3348      	adds	r3, #72	; 0x48
 8002290:	4618      	mov	r0, r3
 8002292:	f002 f9d1 	bl	8004638 <pvPortMalloc>
 8002296:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d011      	beq.n	80022c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3348      	adds	r3, #72	; 0x48
 80022a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022b0:	79fa      	ldrb	r2, [r7, #7]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	4613      	mov	r3, r2
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f805 	bl	80022cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80022c2:	69bb      	ldr	r3, [r7, #24]
	}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e002      	b.n	80022ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022fa:	2101      	movs	r1, #1
 80022fc:	69b8      	ldr	r0, [r7, #24]
 80022fe:	f7ff fecb 	bl	8002098 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08e      	sub	sp, #56	; 0x38
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <xQueueGenericSend+0x32>
	__asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d103      	bne.n	800234c <xQueueGenericSend+0x40>
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <xQueueGenericSend+0x44>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <xQueueGenericSend+0x46>
 8002350:	2300      	movs	r3, #0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <xQueueGenericSend+0x60>
	__asm volatile
 8002356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002368:	bf00      	nop
 800236a:	e7fe      	b.n	800236a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d103      	bne.n	800237a <xQueueGenericSend+0x6e>
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <xQueueGenericSend+0x72>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <xQueueGenericSend+0x74>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <xQueueGenericSend+0x8e>
	__asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	623b      	str	r3, [r7, #32]
}
 8002396:	bf00      	nop
 8002398:	e7fe      	b.n	8002398 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800239a:	f001 fa27 	bl	80037ec <xTaskGetSchedulerState>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <xQueueGenericSend+0x9e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <xQueueGenericSend+0xa2>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <xQueueGenericSend+0xa4>
 80023ae:	2300      	movs	r3, #0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <xQueueGenericSend+0xbe>
	__asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	61fb      	str	r3, [r7, #28]
}
 80023c6:	bf00      	nop
 80023c8:	e7fe      	b.n	80023c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023ca:	f002 f813 	bl	80043f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <xQueueGenericSend+0xd4>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d129      	bne.n	8002434 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023e6:	f000 fa8b 	bl	8002900 <prvCopyDataToQueue>
 80023ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d010      	beq.n	8002416 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	3324      	adds	r3, #36	; 0x24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 f83b 	bl	8003474 <xTaskRemoveFromEventList>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <xQueueGenericSend+0x1f8>)
 8002406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	e00a      	b.n	800242c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <xQueueGenericSend+0x1f8>)
 800241e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800242c:	f002 f812 	bl	8004454 <vPortExitCritical>
				return pdPASS;
 8002430:	2301      	movs	r3, #1
 8002432:	e063      	b.n	80024fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800243a:	f002 f80b 	bl	8004454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800243e:	2300      	movs	r3, #0
 8002440:	e05c      	b.n	80024fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4618      	mov	r0, r3
 800244e:	f001 f873 	bl	8003538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002452:	2301      	movs	r3, #1
 8002454:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002456:	f001 fffd 	bl	8004454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800245a:	f000 fded 	bl	8003038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800245e:	f001 ffc9 	bl	80043f4 <vPortEnterCritical>
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002468:	b25b      	sxtb	r3, r3
 800246a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246e:	d103      	bne.n	8002478 <xQueueGenericSend+0x16c>
 8002470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800247e:	b25b      	sxtb	r3, r3
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d103      	bne.n	800248e <xQueueGenericSend+0x182>
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800248e:	f001 ffe1 	bl	8004454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002492:	1d3a      	adds	r2, r7, #4
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f001 f862 	bl	8003564 <xTaskCheckForTimeOut>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d124      	bne.n	80024f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80024a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024a8:	f000 fb22 	bl	8002af0 <prvIsQueueFull>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d018      	beq.n	80024e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	3310      	adds	r3, #16
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 ff8a 	bl	80033d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80024c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024c2:	f000 faad 	bl	8002a20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80024c6:	f000 fdc5 	bl	8003054 <xTaskResumeAll>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f47f af7c 	bne.w	80023ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <xQueueGenericSend+0x1f8>)
 80024d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	e772      	b.n	80023ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80024e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024e6:	f000 fa9b 	bl	8002a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024ea:	f000 fdb3 	bl	8003054 <xTaskResumeAll>
 80024ee:	e76c      	b.n	80023ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80024f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024f2:	f000 fa95 	bl	8002a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024f6:	f000 fdad 	bl	8003054 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80024fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3738      	adds	r7, #56	; 0x38
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	e000ed04 	.word	0xe000ed04

08002508 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b090      	sub	sp, #64	; 0x40
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800251a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10a      	bne.n	8002536 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002532:	bf00      	nop
 8002534:	e7fe      	b.n	8002534 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d103      	bne.n	8002544 <xQueueGenericSendFromISR+0x3c>
 800253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <xQueueGenericSendFromISR+0x40>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <xQueueGenericSendFromISR+0x42>
 8002548:	2300      	movs	r3, #0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10a      	bne.n	8002564 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002560:	bf00      	nop
 8002562:	e7fe      	b.n	8002562 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d103      	bne.n	8002572 <xQueueGenericSendFromISR+0x6a>
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <xQueueGenericSendFromISR+0x6e>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <xQueueGenericSendFromISR+0x70>
 8002576:	2300      	movs	r3, #0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	623b      	str	r3, [r7, #32]
}
 800258e:	bf00      	nop
 8002590:	e7fe      	b.n	8002590 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002592:	f002 f811 	bl	80045b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002596:	f3ef 8211 	mrs	r2, BASEPRI
 800259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	61fa      	str	r2, [r7, #28]
 80025ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80025ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <xQueueGenericSendFromISR+0xbc>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d12f      	bne.n	8002624 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80025da:	f000 f991 	bl	8002900 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80025de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e6:	d112      	bne.n	800260e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d016      	beq.n	800261e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	3324      	adds	r3, #36	; 0x24
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 ff3d 	bl	8003474 <xTaskRemoveFromEventList>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00e      	beq.n	800261e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e007      	b.n	800261e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800260e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002612:	3301      	adds	r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	b25a      	sxtb	r2, r3
 8002618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800261e:	2301      	movs	r3, #1
 8002620:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002622:	e001      	b.n	8002628 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002624:	2300      	movs	r3, #0
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002632:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002636:	4618      	mov	r0, r3
 8002638:	3740      	adds	r7, #64	; 0x40
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	; 0x30
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800264c:	2300      	movs	r3, #0
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <xQueueReceive+0x30>
	__asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	623b      	str	r3, [r7, #32]
}
 800266c:	bf00      	nop
 800266e:	e7fe      	b.n	800266e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <xQueueReceive+0x3e>
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <xQueueReceive+0x42>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <xQueueReceive+0x44>
 8002682:	2300      	movs	r3, #0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <xQueueReceive+0x5e>
	__asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	61fb      	str	r3, [r7, #28]
}
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800269e:	f001 f8a5 	bl	80037ec <xTaskGetSchedulerState>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <xQueueReceive+0x6e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <xQueueReceive+0x72>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <xQueueReceive+0x74>
 80026b2:	2300      	movs	r3, #0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <xQueueReceive+0x8e>
	__asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	61bb      	str	r3, [r7, #24]
}
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026ce:	f001 fe91 	bl	80043f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01f      	beq.n	800271e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026e2:	f000 f977 	bl	80029d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	1e5a      	subs	r2, r3, #1
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00f      	beq.n	8002716 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	3310      	adds	r3, #16
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 feba 	bl	8003474 <xTaskRemoveFromEventList>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002706:	4b3d      	ldr	r3, [pc, #244]	; (80027fc <xQueueReceive+0x1bc>)
 8002708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002716:	f001 fe9d 	bl	8004454 <vPortExitCritical>
				return pdPASS;
 800271a:	2301      	movs	r3, #1
 800271c:	e069      	b.n	80027f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002724:	f001 fe96 	bl	8004454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002728:	2300      	movs	r3, #0
 800272a:	e062      	b.n	80027f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fefe 	bl	8003538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800273c:	2301      	movs	r3, #1
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002740:	f001 fe88 	bl	8004454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002744:	f000 fc78 	bl	8003038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002748:	f001 fe54 	bl	80043f4 <vPortEnterCritical>
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002752:	b25b      	sxtb	r3, r3
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d103      	bne.n	8002762 <xQueueReceive+0x122>
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002768:	b25b      	sxtb	r3, r3
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d103      	bne.n	8002778 <xQueueReceive+0x138>
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002778:	f001 fe6c 	bl	8004454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800277c:	1d3a      	adds	r2, r7, #4
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f000 feed 	bl	8003564 <xTaskCheckForTimeOut>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d123      	bne.n	80027d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002792:	f000 f997 	bl	8002ac4 <prvIsQueueEmpty>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d017      	beq.n	80027cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fe15 	bl	80033d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ac:	f000 f938 	bl	8002a20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027b0:	f000 fc50 	bl	8003054 <xTaskResumeAll>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d189      	bne.n	80026ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <xQueueReceive+0x1bc>)
 80027bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	e780      	b.n	80026ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80027cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ce:	f000 f927 	bl	8002a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027d2:	f000 fc3f 	bl	8003054 <xTaskResumeAll>
 80027d6:	e77a      	b.n	80026ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80027d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027da:	f000 f921 	bl	8002a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027de:	f000 fc39 	bl	8003054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e4:	f000 f96e 	bl	8002ac4 <prvIsQueueEmpty>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f43f af6f 	beq.w	80026ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80027f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3730      	adds	r7, #48	; 0x30
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000ed04 	.word	0xe000ed04

08002800 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08e      	sub	sp, #56	; 0x38
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10a      	bne.n	800282c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	623b      	str	r3, [r7, #32]
}
 8002828:	bf00      	nop
 800282a:	e7fe      	b.n	800282a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d103      	bne.n	800283a <xQueueReceiveFromISR+0x3a>
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <xQueueReceiveFromISR+0x3e>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <xQueueReceiveFromISR+0x40>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	61fb      	str	r3, [r7, #28]
}
 8002856:	bf00      	nop
 8002858:	e7fe      	b.n	8002858 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800285a:	f001 fead 	bl	80045b8 <vPortValidateInterruptPriority>
	__asm volatile
 800285e:	f3ef 8211 	mrs	r2, BASEPRI
 8002862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	61ba      	str	r2, [r7, #24]
 8002874:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002876:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	2b00      	cmp	r3, #0
 8002884:	d02f      	beq.n	80028e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800288c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002894:	f000 f89e 	bl	80029d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	1e5a      	subs	r2, r3, #1
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80028a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d112      	bne.n	80028d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	3310      	adds	r3, #16
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fddc 	bl	8003474 <xTaskRemoveFromEventList>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00e      	beq.n	80028e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e007      	b.n	80028e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80028d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d4:	3301      	adds	r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	b25a      	sxtb	r2, r3
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80028e0:	2301      	movs	r3, #1
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
 80028e4:	e001      	b.n	80028ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f383 8811 	msr	BASEPRI, r3
}
 80028f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3738      	adds	r7, #56	; 0x38
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d14d      	bne.n	80029c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 ff7c 	bl	8003828 <xTaskPriorityDisinherit>
 8002930:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	e043      	b.n	80029c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d119      	bne.n	8002974 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6858      	ldr	r0, [r3, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	461a      	mov	r2, r3
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	f002 f882 	bl	8004a54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	441a      	add	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	429a      	cmp	r2, r3
 8002968:	d32b      	bcc.n	80029c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	e026      	b.n	80029c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68d8      	ldr	r0, [r3, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	461a      	mov	r2, r3
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	f002 f868 	bl	8004a54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	425b      	negs	r3, r3
 800298e:	441a      	add	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d207      	bcs.n	80029b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	425b      	negs	r3, r3
 80029aa:	441a      	add	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d105      	bne.n	80029c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	3b01      	subs	r3, #1
 80029c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80029ca:	697b      	ldr	r3, [r7, #20]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d018      	beq.n	8002a18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	441a      	add	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d303      	bcc.n	8002a08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68d9      	ldr	r1, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	461a      	mov	r2, r3
 8002a12:	6838      	ldr	r0, [r7, #0]
 8002a14:	f002 f81e 	bl	8004a54 <memcpy>
	}
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a28:	f001 fce4 	bl	80043f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a34:	e011      	b.n	8002a5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3324      	adds	r3, #36	; 0x24
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fd16 	bl	8003474 <xTaskRemoveFromEventList>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a4e:	f000 fdeb 	bl	8003628 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	dce9      	bgt.n	8002a36 <prvUnlockQueue+0x16>
 8002a62:	e000      	b.n	8002a66 <prvUnlockQueue+0x46>
					break;
 8002a64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	22ff      	movs	r2, #255	; 0xff
 8002a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a6e:	f001 fcf1 	bl	8004454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a72:	f001 fcbf 	bl	80043f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a7e:	e011      	b.n	8002aa4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3310      	adds	r3, #16
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fcf1 	bl	8003474 <xTaskRemoveFromEventList>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a98:	f000 fdc6 	bl	8003628 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a9c:	7bbb      	ldrb	r3, [r7, #14]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	dce9      	bgt.n	8002a80 <prvUnlockQueue+0x60>
 8002aac:	e000      	b.n	8002ab0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002aae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	22ff      	movs	r2, #255	; 0xff
 8002ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ab8:	f001 fccc 	bl	8004454 <vPortExitCritical>
}
 8002abc:	bf00      	nop
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002acc:	f001 fc92 	bl	80043f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e001      	b.n	8002ae2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ae2:	f001 fcb7 	bl	8004454 <vPortExitCritical>

	return xReturn;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002af8:	f001 fc7c 	bl	80043f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d102      	bne.n	8002b0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e001      	b.n	8002b12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b12:	f001 fc9f 	bl	8004454 <vPortExitCritical>

	return xReturn;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e014      	b.n	8002b5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b30:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <vQueueAddToRegistry+0x50>)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10b      	bne.n	8002b54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <vQueueAddToRegistry+0x50>)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <vQueueAddToRegistry+0x50>)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b52:	e006      	b.n	8002b62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b07      	cmp	r3, #7
 8002b5e:	d9e7      	bls.n	8002b30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20001070 	.word	0x20001070

08002b74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b84:	f001 fc36 	bl	80043f4 <vPortEnterCritical>
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d103      	bne.n	8002b9e <vQueueWaitForMessageRestricted+0x2a>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d103      	bne.n	8002bb4 <vQueueWaitForMessageRestricted+0x40>
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb4:	f001 fc4e 	bl	8004454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3324      	adds	r3, #36	; 0x24
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fc27 	bl	800341c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002bce:	6978      	ldr	r0, [r7, #20]
 8002bd0:	f7ff ff26 	bl	8002a20 <prvUnlockQueue>
	}
 8002bd4:	bf00      	nop
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08e      	sub	sp, #56	; 0x38
 8002be0:	af04      	add	r7, sp, #16
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	623b      	str	r3, [r7, #32]
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	61fb      	str	r3, [r7, #28]
}
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c22:	2354      	movs	r3, #84	; 0x54
 8002c24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b54      	cmp	r3, #84	; 0x54
 8002c2a:	d00a      	beq.n	8002c42 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	61bb      	str	r3, [r7, #24]
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01e      	beq.n	8002c88 <xTaskCreateStatic+0xac>
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c62:	2300      	movs	r3, #0
 8002c64:	9303      	str	r3, [sp, #12]
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	9302      	str	r3, [sp, #8]
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f850 	bl	8002d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c82:	f000 f8d5 	bl	8002e30 <prvAddNewTaskToReadyList>
 8002c86:	e001      	b.n	8002c8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c8c:	697b      	ldr	r3, [r7, #20]
	}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3728      	adds	r7, #40	; 0x28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b08c      	sub	sp, #48	; 0x30
 8002c9a:	af04      	add	r7, sp, #16
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 fcc4 	bl	8004638 <pvPortMalloc>
 8002cb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cb8:	2054      	movs	r0, #84	; 0x54
 8002cba:	f001 fcbd 	bl	8004638 <pvPortMalloc>
 8002cbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
 8002ccc:	e005      	b.n	8002cda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f001 fd7e 	bl	80047d0 <vPortFree>
 8002cd4:	e001      	b.n	8002cda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d017      	beq.n	8002d10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ce8:	88fa      	ldrh	r2, [r7, #6]
 8002cea:	2300      	movs	r3, #0
 8002cec:	9303      	str	r3, [sp, #12]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	9302      	str	r3, [sp, #8]
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f80e 	bl	8002d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d04:	69f8      	ldr	r0, [r7, #28]
 8002d06:	f000 f893 	bl	8002e30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e002      	b.n	8002d16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d16:	69bb      	ldr	r3, [r7, #24]
	}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f023 0307 	bic.w	r3, r3, #7
 8002d46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	617b      	str	r3, [r7, #20]
}
 8002d64:	bf00      	nop
 8002d66:	e7fe      	b.n	8002d66 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01f      	beq.n	8002dae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	e012      	b.n	8002d9a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	7819      	ldrb	r1, [r3, #0]
 8002d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	3334      	adds	r3, #52	; 0x34
 8002d84:	460a      	mov	r2, r1
 8002d86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	3301      	adds	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	d9e9      	bls.n	8002d74 <prvInitialiseNewTask+0x54>
 8002da0:	e000      	b.n	8002da4 <prvInitialiseNewTask+0x84>
			{
				break;
 8002da2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dac:	e003      	b.n	8002db6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	2b06      	cmp	r3, #6
 8002dba:	d901      	bls.n	8002dc0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dbc:	2306      	movs	r3, #6
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	2200      	movs	r2, #0
 8002dd0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff f8ca 	bl	8001f70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	3318      	adds	r3, #24
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f8c5 	bl	8001f70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	f1c3 0207 	rsb	r2, r3, #7
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	2200      	movs	r2, #0
 8002e00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	68f9      	ldr	r1, [r7, #12]
 8002e0e:	69b8      	ldr	r0, [r7, #24]
 8002e10:	f001 f9c2 	bl	8004198 <pxPortInitialiseStack>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e26:	bf00      	nop
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e38:	f001 fadc 	bl	80043f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <prvAddNewTaskToReadyList+0xb8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <prvAddNewTaskToReadyList+0xb8>)
 8002e44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e46:	4b29      	ldr	r3, [pc, #164]	; (8002eec <prvAddNewTaskToReadyList+0xbc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e4e:	4a27      	ldr	r2, [pc, #156]	; (8002eec <prvAddNewTaskToReadyList+0xbc>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e54:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <prvAddNewTaskToReadyList+0xb8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d110      	bne.n	8002e7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e5c:	f000 fc08 	bl	8003670 <prvInitialiseTaskLists>
 8002e60:	e00d      	b.n	8002e7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <prvAddNewTaskToReadyList+0xc0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <prvAddNewTaskToReadyList+0xbc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d802      	bhi.n	8002e7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e78:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <prvAddNewTaskToReadyList+0xbc>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <prvAddNewTaskToReadyList+0xc4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <prvAddNewTaskToReadyList+0xc4>)
 8002e86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <prvAddNewTaskToReadyList+0xc8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <prvAddNewTaskToReadyList+0xc8>)
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4a15      	ldr	r2, [pc, #84]	; (8002efc <prvAddNewTaskToReadyList+0xcc>)
 8002ea8:	441a      	add	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3304      	adds	r3, #4
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f7ff f86a 	bl	8001f8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002eb6:	f001 facd 	bl	8004454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <prvAddNewTaskToReadyList+0xc0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00e      	beq.n	8002ee0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <prvAddNewTaskToReadyList+0xbc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d207      	bcs.n	8002ee0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <prvAddNewTaskToReadyList+0xd0>)
 8002ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200011b0 	.word	0x200011b0
 8002eec:	200010b0 	.word	0x200010b0
 8002ef0:	200011bc 	.word	0x200011bc
 8002ef4:	200011cc 	.word	0x200011cc
 8002ef8:	200011b8 	.word	0x200011b8
 8002efc:	200010b4 	.word	0x200010b4
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d017      	beq.n	8002f46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <vTaskDelay+0x60>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <vTaskDelay+0x30>
	__asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	60bb      	str	r3, [r7, #8]
}
 8002f30:	bf00      	nop
 8002f32:	e7fe      	b.n	8002f32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f34:	f000 f880 	bl	8003038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f38:	2100      	movs	r1, #0
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fcfa 	bl	8003934 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f40:	f000 f888 	bl	8003054 <xTaskResumeAll>
 8002f44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <vTaskDelay+0x64>)
 8002f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200011d8 	.word	0x200011d8
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f7a:	463a      	mov	r2, r7
 8002f7c:	1d39      	adds	r1, r7, #4
 8002f7e:	f107 0308 	add.w	r3, r7, #8
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd faa6 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	9202      	str	r2, [sp, #8]
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	2300      	movs	r3, #0
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2300      	movs	r3, #0
 8002f98:	460a      	mov	r2, r1
 8002f9a:	4921      	ldr	r1, [pc, #132]	; (8003020 <vTaskStartScheduler+0xb4>)
 8002f9c:	4821      	ldr	r0, [pc, #132]	; (8003024 <vTaskStartScheduler+0xb8>)
 8002f9e:	f7ff fe1d 	bl	8002bdc <xTaskCreateStatic>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <vTaskStartScheduler+0xbc>)
 8002fa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <vTaskStartScheduler+0xbc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e001      	b.n	8002fba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fc0:	f000 fd1e 	bl	8003a00 <xTimerCreateTimerTask>
 8002fc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d116      	bne.n	8002ffa <vTaskStartScheduler+0x8e>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	613b      	str	r3, [r7, #16]
}
 8002fde:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <vTaskStartScheduler+0xc0>)
 8002fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <vTaskStartScheduler+0xc4>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <vTaskStartScheduler+0xc8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ff4:	f001 f95c 	bl	80042b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ff8:	e00e      	b.n	8003018 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d10a      	bne.n	8003018 <vTaskStartScheduler+0xac>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	60fb      	str	r3, [r7, #12]
}
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <vTaskStartScheduler+0xaa>
}
 8003018:	bf00      	nop
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	08004b10 	.word	0x08004b10
 8003024:	08003641 	.word	0x08003641
 8003028:	200011d4 	.word	0x200011d4
 800302c:	200011d0 	.word	0x200011d0
 8003030:	200011bc 	.word	0x200011bc
 8003034:	200011b4 	.word	0x200011b4

08003038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <vTaskSuspendAll+0x18>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	4a03      	ldr	r2, [pc, #12]	; (8003050 <vTaskSuspendAll+0x18>)
 8003044:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	200011d8 	.word	0x200011d8

08003054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003062:	4b41      	ldr	r3, [pc, #260]	; (8003168 <xTaskResumeAll+0x114>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <xTaskResumeAll+0x2c>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	603b      	str	r3, [r7, #0]
}
 800307c:	bf00      	nop
 800307e:	e7fe      	b.n	800307e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003080:	f001 f9b8 	bl	80043f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003084:	4b38      	ldr	r3, [pc, #224]	; (8003168 <xTaskResumeAll+0x114>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3b01      	subs	r3, #1
 800308a:	4a37      	ldr	r2, [pc, #220]	; (8003168 <xTaskResumeAll+0x114>)
 800308c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <xTaskResumeAll+0x114>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d161      	bne.n	800315a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003096:	4b35      	ldr	r3, [pc, #212]	; (800316c <xTaskResumeAll+0x118>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d05d      	beq.n	800315a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800309e:	e02e      	b.n	80030fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <xTaskResumeAll+0x11c>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3318      	adds	r3, #24
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe ffc9 	bl	8002044 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe ffc4 	bl	8002044 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	2201      	movs	r2, #1
 80030c2:	409a      	lsls	r2, r3
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <xTaskResumeAll+0x120>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	4a2a      	ldr	r2, [pc, #168]	; (8003174 <xTaskResumeAll+0x120>)
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4a27      	ldr	r2, [pc, #156]	; (8003178 <xTaskResumeAll+0x124>)
 80030dc:	441a      	add	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3304      	adds	r3, #4
 80030e2:	4619      	mov	r1, r3
 80030e4:	4610      	mov	r0, r2
 80030e6:	f7fe ff50 	bl	8001f8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ee:	4b23      	ldr	r3, [pc, #140]	; (800317c <xTaskResumeAll+0x128>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d302      	bcc.n	80030fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80030f8:	4b21      	ldr	r3, [pc, #132]	; (8003180 <xTaskResumeAll+0x12c>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <xTaskResumeAll+0x11c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1cc      	bne.n	80030a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800310c:	f000 fb4e 	bl	80037ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003110:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <xTaskResumeAll+0x130>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800311c:	f000 f846 	bl	80031ac <xTaskIncrementTick>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003126:	4b16      	ldr	r3, [pc, #88]	; (8003180 <xTaskResumeAll+0x12c>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f1      	bne.n	800311c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <xTaskResumeAll+0x130>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <xTaskResumeAll+0x12c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003146:	2301      	movs	r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <xTaskResumeAll+0x134>)
 800314c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800315a:	f001 f97b 	bl	8004454 <vPortExitCritical>

	return xAlreadyYielded;
 800315e:	68bb      	ldr	r3, [r7, #8]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200011d8 	.word	0x200011d8
 800316c:	200011b0 	.word	0x200011b0
 8003170:	20001170 	.word	0x20001170
 8003174:	200011b8 	.word	0x200011b8
 8003178:	200010b4 	.word	0x200010b4
 800317c:	200010b0 	.word	0x200010b0
 8003180:	200011c4 	.word	0x200011c4
 8003184:	200011c0 	.word	0x200011c0
 8003188:	e000ed04 	.word	0xe000ed04

0800318c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <xTaskGetTickCount+0x1c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003198:	687b      	ldr	r3, [r7, #4]
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	200011b4 	.word	0x200011b4

080031ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031b6:	4b4e      	ldr	r3, [pc, #312]	; (80032f0 <xTaskIncrementTick+0x144>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 808e 	bne.w	80032dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031c0:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <xTaskIncrementTick+0x148>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031c8:	4a4a      	ldr	r2, [pc, #296]	; (80032f4 <xTaskIncrementTick+0x148>)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d120      	bne.n	8003216 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80031d4:	4b48      	ldr	r3, [pc, #288]	; (80032f8 <xTaskIncrementTick+0x14c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	603b      	str	r3, [r7, #0]
}
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <xTaskIncrementTick+0x46>
 80031f4:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <xTaskIncrementTick+0x14c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	4b40      	ldr	r3, [pc, #256]	; (80032fc <xTaskIncrementTick+0x150>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a3e      	ldr	r2, [pc, #248]	; (80032f8 <xTaskIncrementTick+0x14c>)
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4a3e      	ldr	r2, [pc, #248]	; (80032fc <xTaskIncrementTick+0x150>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <xTaskIncrementTick+0x154>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	4a3c      	ldr	r2, [pc, #240]	; (8003300 <xTaskIncrementTick+0x154>)
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	f000 facb 	bl	80037ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <xTaskIncrementTick+0x158>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	429a      	cmp	r2, r3
 800321e:	d348      	bcc.n	80032b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003220:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <xTaskIncrementTick+0x14c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d104      	bne.n	8003234 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800322a:	4b36      	ldr	r3, [pc, #216]	; (8003304 <xTaskIncrementTick+0x158>)
 800322c:	f04f 32ff 	mov.w	r2, #4294967295
 8003230:	601a      	str	r2, [r3, #0]
					break;
 8003232:	e03e      	b.n	80032b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <xTaskIncrementTick+0x14c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d203      	bcs.n	8003254 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800324c:	4a2d      	ldr	r2, [pc, #180]	; (8003304 <xTaskIncrementTick+0x158>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003252:	e02e      	b.n	80032b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3304      	adds	r3, #4
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe fef3 	bl	8002044 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	2b00      	cmp	r3, #0
 8003264:	d004      	beq.n	8003270 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3318      	adds	r3, #24
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe feea 	bl	8002044 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	2201      	movs	r2, #1
 8003276:	409a      	lsls	r2, r3
 8003278:	4b23      	ldr	r3, [pc, #140]	; (8003308 <xTaskIncrementTick+0x15c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	4a22      	ldr	r2, [pc, #136]	; (8003308 <xTaskIncrementTick+0x15c>)
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4a1f      	ldr	r2, [pc, #124]	; (800330c <xTaskIncrementTick+0x160>)
 8003290:	441a      	add	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3304      	adds	r3, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f7fe fe76 	bl	8001f8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <xTaskIncrementTick+0x164>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3b9      	bcc.n	8003220 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b0:	e7b6      	b.n	8003220 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032b2:	4b17      	ldr	r3, [pc, #92]	; (8003310 <xTaskIncrementTick+0x164>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b8:	4914      	ldr	r1, [pc, #80]	; (800330c <xTaskIncrementTick+0x160>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d901      	bls.n	80032ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <xTaskIncrementTick+0x168>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80032d6:	2301      	movs	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	e004      	b.n	80032e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <xTaskIncrementTick+0x16c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a0d      	ldr	r2, [pc, #52]	; (8003318 <xTaskIncrementTick+0x16c>)
 80032e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032e6:	697b      	ldr	r3, [r7, #20]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200011d8 	.word	0x200011d8
 80032f4:	200011b4 	.word	0x200011b4
 80032f8:	20001168 	.word	0x20001168
 80032fc:	2000116c 	.word	0x2000116c
 8003300:	200011c8 	.word	0x200011c8
 8003304:	200011d0 	.word	0x200011d0
 8003308:	200011b8 	.word	0x200011b8
 800330c:	200010b4 	.word	0x200010b4
 8003310:	200010b0 	.word	0x200010b0
 8003314:	200011c4 	.word	0x200011c4
 8003318:	200011c0 	.word	0x200011c0

0800331c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003322:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <vTaskSwitchContext+0xa4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <vTaskSwitchContext+0xa8>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003330:	e03f      	b.n	80033b2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <vTaskSwitchContext+0xa8>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <vTaskSwitchContext+0xac>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	f1c3 031f 	rsb	r3, r3, #31
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	491f      	ldr	r1, [pc, #124]	; (80033cc <vTaskSwitchContext+0xb0>)
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	607b      	str	r3, [r7, #4]
}
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <vTaskSwitchContext+0x5a>
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <vTaskSwitchContext+0xb0>)
 8003384:	4413      	add	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	3308      	adds	r3, #8
 800339a:	429a      	cmp	r2, r3
 800339c:	d104      	bne.n	80033a8 <vTaskSwitchContext+0x8c>
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <vTaskSwitchContext+0xb4>)
 80033b0:	6013      	str	r3, [r2, #0]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	200011d8 	.word	0x200011d8
 80033c4:	200011c4 	.word	0x200011c4
 80033c8:	200011b8 	.word	0x200011b8
 80033cc:	200010b4 	.word	0x200010b4
 80033d0:	200010b0 	.word	0x200010b0

080033d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60fb      	str	r3, [r7, #12]
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <vTaskPlaceOnEventList+0x44>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3318      	adds	r3, #24
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fe fde5 	bl	8001fd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003408:	2101      	movs	r1, #1
 800340a:	6838      	ldr	r0, [r7, #0]
 800340c:	f000 fa92 	bl	8003934 <prvAddCurrentTaskToDelayedList>
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200010b0 	.word	0x200010b0

0800341c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	617b      	str	r3, [r7, #20]
}
 8003440:	bf00      	nop
 8003442:	e7fe      	b.n	8003442 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <vTaskPlaceOnEventListRestricted+0x54>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3318      	adds	r3, #24
 800344a:	4619      	mov	r1, r3
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7fe fd9c 	bl	8001f8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
 800345c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	68b8      	ldr	r0, [r7, #8]
 8003462:	f000 fa67 	bl	8003934 <prvAddCurrentTaskToDelayedList>
	}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200010b0 	.word	0x200010b0

08003474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	60fb      	str	r3, [r7, #12]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	3318      	adds	r3, #24
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe fdcd 	bl	8002044 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034aa:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <xTaskRemoveFromEventList+0xac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11c      	bne.n	80034ec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fdc4 	bl	8002044 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <xTaskRemoveFromEventList+0xb0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	4a16      	ldr	r2, [pc, #88]	; (8003524 <xTaskRemoveFromEventList+0xb0>)
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <xTaskRemoveFromEventList+0xb4>)
 80034dc:	441a      	add	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f7fe fd50 	bl	8001f8a <vListInsertEnd>
 80034ea:	e005      	b.n	80034f8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	3318      	adds	r3, #24
 80034f0:	4619      	mov	r1, r3
 80034f2:	480e      	ldr	r0, [pc, #56]	; (800352c <xTaskRemoveFromEventList+0xb8>)
 80034f4:	f7fe fd49 	bl	8001f8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <xTaskRemoveFromEventList+0xbc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	429a      	cmp	r2, r3
 8003504:	d905      	bls.n	8003512 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <xTaskRemoveFromEventList+0xc0>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e001      	b.n	8003516 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003516:	697b      	ldr	r3, [r7, #20]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200011d8 	.word	0x200011d8
 8003524:	200011b8 	.word	0x200011b8
 8003528:	200010b4 	.word	0x200010b4
 800352c:	20001170 	.word	0x20001170
 8003530:	200010b0 	.word	0x200010b0
 8003534:	200011c4 	.word	0x200011c4

08003538 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <vTaskInternalSetTimeOutState+0x24>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <vTaskInternalSetTimeOutState+0x28>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	200011c8 	.word	0x200011c8
 8003560:	200011b4 	.word	0x200011b4

08003564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	613b      	str	r3, [r7, #16]
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	60fb      	str	r3, [r7, #12]
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80035a6:	f000 ff25 	bl	80043f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035aa:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <xTaskCheckForTimeOut+0xbc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d102      	bne.n	80035ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	e023      	b.n	8003612 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <xTaskCheckForTimeOut+0xc0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d007      	beq.n	80035e6 <xTaskCheckForTimeOut+0x82>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d302      	bcc.n	80035e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035e0:	2301      	movs	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e015      	b.n	8003612 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d20b      	bcs.n	8003608 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	1ad2      	subs	r2, r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff9b 	bl	8003538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e004      	b.n	8003612 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800360e:	2301      	movs	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003612:	f000 ff1f 	bl	8004454 <vPortExitCritical>

	return xReturn;
 8003616:	69fb      	ldr	r3, [r7, #28]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200011b4 	.word	0x200011b4
 8003624:	200011c8 	.word	0x200011c8

08003628 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <vTaskMissedYield+0x14>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	200011c4 	.word	0x200011c4

08003640 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003648:	f000 f852 	bl	80036f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <prvIdleTask+0x28>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d9f9      	bls.n	8003648 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <prvIdleTask+0x2c>)
 8003656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003664:	e7f0      	b.n	8003648 <prvIdleTask+0x8>
 8003666:	bf00      	nop
 8003668:	200010b4 	.word	0x200010b4
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003676:	2300      	movs	r3, #0
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	e00c      	b.n	8003696 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <prvInitialiseTaskLists+0x60>)
 8003688:	4413      	add	r3, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fc50 	bl	8001f30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3301      	adds	r3, #1
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b06      	cmp	r3, #6
 800369a:	d9ef      	bls.n	800367c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800369c:	480d      	ldr	r0, [pc, #52]	; (80036d4 <prvInitialiseTaskLists+0x64>)
 800369e:	f7fe fc47 	bl	8001f30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036a2:	480d      	ldr	r0, [pc, #52]	; (80036d8 <prvInitialiseTaskLists+0x68>)
 80036a4:	f7fe fc44 	bl	8001f30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036a8:	480c      	ldr	r0, [pc, #48]	; (80036dc <prvInitialiseTaskLists+0x6c>)
 80036aa:	f7fe fc41 	bl	8001f30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036ae:	480c      	ldr	r0, [pc, #48]	; (80036e0 <prvInitialiseTaskLists+0x70>)
 80036b0:	f7fe fc3e 	bl	8001f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036b4:	480b      	ldr	r0, [pc, #44]	; (80036e4 <prvInitialiseTaskLists+0x74>)
 80036b6:	f7fe fc3b 	bl	8001f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <prvInitialiseTaskLists+0x78>)
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <prvInitialiseTaskLists+0x64>)
 80036be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <prvInitialiseTaskLists+0x7c>)
 80036c2:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <prvInitialiseTaskLists+0x68>)
 80036c4:	601a      	str	r2, [r3, #0]
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200010b4 	.word	0x200010b4
 80036d4:	20001140 	.word	0x20001140
 80036d8:	20001154 	.word	0x20001154
 80036dc:	20001170 	.word	0x20001170
 80036e0:	20001184 	.word	0x20001184
 80036e4:	2000119c 	.word	0x2000119c
 80036e8:	20001168 	.word	0x20001168
 80036ec:	2000116c 	.word	0x2000116c

080036f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036f6:	e019      	b.n	800372c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036f8:	f000 fe7c 	bl	80043f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036fc:	4b10      	ldr	r3, [pc, #64]	; (8003740 <prvCheckTasksWaitingTermination+0x50>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe fc9b 	bl	8002044 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <prvCheckTasksWaitingTermination+0x54>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3b01      	subs	r3, #1
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <prvCheckTasksWaitingTermination+0x54>)
 8003716:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <prvCheckTasksWaitingTermination+0x58>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3b01      	subs	r3, #1
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <prvCheckTasksWaitingTermination+0x58>)
 8003720:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003722:	f000 fe97 	bl	8004454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f810 	bl	800374c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <prvCheckTasksWaitingTermination+0x58>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e1      	bne.n	80036f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20001184 	.word	0x20001184
 8003744:	200011b0 	.word	0x200011b0
 8003748:	20001198 	.word	0x20001198

0800374c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4618      	mov	r0, r3
 8003764:	f001 f834 	bl	80047d0 <vPortFree>
				vPortFree( pxTCB );
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 f831 	bl	80047d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800376e:	e018      	b.n	80037a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003776:	2b01      	cmp	r3, #1
 8003778:	d103      	bne.n	8003782 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f001 f828 	bl	80047d0 <vPortFree>
	}
 8003780:	e00f      	b.n	80037a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003788:	2b02      	cmp	r3, #2
 800378a:	d00a      	beq.n	80037a2 <prvDeleteTCB+0x56>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	60fb      	str	r3, [r7, #12]
}
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <prvDeleteTCB+0x54>
	}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <prvResetNextTaskUnblockTime+0x38>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d104      	bne.n	80037c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <prvResetNextTaskUnblockTime+0x3c>)
 80037be:	f04f 32ff 	mov.w	r2, #4294967295
 80037c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037c4:	e008      	b.n	80037d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c6:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <prvResetNextTaskUnblockTime+0x38>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <prvResetNextTaskUnblockTime+0x3c>)
 80037d6:	6013      	str	r3, [r2, #0]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	20001168 	.word	0x20001168
 80037e8:	200011d0 	.word	0x200011d0

080037ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <xTaskGetSchedulerState+0x34>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037fa:	2301      	movs	r3, #1
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	e008      	b.n	8003812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <xTaskGetSchedulerState+0x38>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003808:	2302      	movs	r3, #2
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	e001      	b.n	8003812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003812:	687b      	ldr	r3, [r7, #4]
	}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	200011bc 	.word	0x200011bc
 8003824:	200011d8 	.word	0x200011d8

08003828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d06e      	beq.n	800391c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800383e:	4b3a      	ldr	r3, [pc, #232]	; (8003928 <xTaskPriorityDisinherit+0x100>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d00a      	beq.n	800385e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	60fb      	str	r3, [r7, #12]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	60bb      	str	r3, [r7, #8]
}
 8003878:	bf00      	nop
 800387a:	e7fe      	b.n	800387a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003880:	1e5a      	subs	r2, r3, #1
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	429a      	cmp	r2, r3
 8003890:	d044      	beq.n	800391c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003896:	2b00      	cmp	r3, #0
 8003898:	d140      	bne.n	800391c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	3304      	adds	r3, #4
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fbd0 	bl	8002044 <uxListRemove>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d115      	bne.n	80038d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ae:	491f      	ldr	r1, [pc, #124]	; (800392c <xTaskPriorityDisinherit+0x104>)
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <xTaskPriorityDisinherit+0xae>
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	2201      	movs	r2, #1
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	4b18      	ldr	r3, [pc, #96]	; (8003930 <xTaskPriorityDisinherit+0x108>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4013      	ands	r3, r2
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <xTaskPriorityDisinherit+0x108>)
 80038d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	f1c3 0207 	rsb	r2, r3, #7
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	2201      	movs	r2, #1
 80038f0:	409a      	lsls	r2, r3
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <xTaskPriorityDisinherit+0x108>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <xTaskPriorityDisinherit+0x108>)
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4a08      	ldr	r2, [pc, #32]	; (800392c <xTaskPriorityDisinherit+0x104>)
 800390a:	441a      	add	r2, r3
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	3304      	adds	r3, #4
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f7fe fb39 	bl	8001f8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003918:	2301      	movs	r3, #1
 800391a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800391c:	697b      	ldr	r3, [r7, #20]
	}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200010b0 	.word	0x200010b0
 800392c:	200010b4 	.word	0x200010b4
 8003930:	200011b8 	.word	0x200011b8

08003934 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3304      	adds	r3, #4
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fb7a 	bl	8002044 <uxListRemove>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003956:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	2201      	movs	r2, #1
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	4b21      	ldr	r3, [pc, #132]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4013      	ands	r3, r2
 800396a:	4a20      	ldr	r2, [pc, #128]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800396c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d10a      	bne.n	800398c <prvAddCurrentTaskToDelayedList+0x58>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3304      	adds	r3, #4
 8003982:	4619      	mov	r1, r3
 8003984:	481a      	ldr	r0, [pc, #104]	; (80039f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003986:	f7fe fb00 	bl	8001f8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800398a:	e026      	b.n	80039da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d209      	bcs.n	80039b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3304      	adds	r3, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f7fe fb0e 	bl	8001fd2 <vListInsert>
}
 80039b6:	e010      	b.n	80039da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f7fe fb04 	bl	8001fd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d202      	bcs.n	80039da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6013      	str	r3, [r2, #0]
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200011b4 	.word	0x200011b4
 80039e8:	200010b0 	.word	0x200010b0
 80039ec:	200011b8 	.word	0x200011b8
 80039f0:	2000119c 	.word	0x2000119c
 80039f4:	2000116c 	.word	0x2000116c
 80039f8:	20001168 	.word	0x20001168
 80039fc:	200011d0 	.word	0x200011d0

08003a00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a0a:	f000 fb85 	bl	8004118 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <xTimerCreateTimerTask+0x80>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d021      	beq.n	8003a5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a1e:	1d3a      	adds	r2, r7, #4
 8003a20:	f107 0108 	add.w	r1, r7, #8
 8003a24:	f107 030c 	add.w	r3, r7, #12
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fd6d 	bl	8000508 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	9202      	str	r2, [sp, #8]
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2302      	movs	r3, #2
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	460a      	mov	r2, r1
 8003a40:	4910      	ldr	r1, [pc, #64]	; (8003a84 <xTimerCreateTimerTask+0x84>)
 8003a42:	4811      	ldr	r0, [pc, #68]	; (8003a88 <xTimerCreateTimerTask+0x88>)
 8003a44:	f7ff f8ca 	bl	8002bdc <xTaskCreateStatic>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <xTimerCreateTimerTask+0x8c>)
 8003a4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <xTimerCreateTimerTask+0x8c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a56:	2301      	movs	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	613b      	str	r3, [r7, #16]
}
 8003a72:	bf00      	nop
 8003a74:	e7fe      	b.n	8003a74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a76:	697b      	ldr	r3, [r7, #20]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	2000120c 	.word	0x2000120c
 8003a84:	08004b18 	.word	0x08004b18
 8003a88:	08003cf9 	.word	0x08003cf9
 8003a8c:	20001210 	.word	0x20001210

08003a90 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003a9e:	2028      	movs	r0, #40	; 0x28
 8003aa0:	f000 fdca 	bl	8004638 <pvPortMalloc>
 8003aa4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f843 	bl	8003b4e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003ac8:	697b      	ldr	r3, [r7, #20]
	}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b08a      	sub	sp, #40	; 0x28
 8003ad6:	af02      	add	r7, sp, #8
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003ae0:	2328      	movs	r3, #40	; 0x28
 8003ae2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b28      	cmp	r3, #40	; 0x28
 8003ae8:	d00a      	beq.n	8003b00 <xTimerCreateStatic+0x2e>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	61bb      	str	r3, [r7, #24]
}
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <xTimerCreateStatic+0x4c>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	617b      	str	r3, [r7, #20]
}
 8003b1a:	bf00      	nop
 8003b1c:	e7fe      	b.n	8003b1c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00d      	beq.n	8003b44 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f805 	bl	8003b4e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003b44:	69fb      	ldr	r3, [r7, #28]
	}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	617b      	str	r3, [r7, #20]
}
 8003b74:	bf00      	nop
 8003b76:	e7fe      	b.n	8003b76 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01e      	beq.n	8003bbc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003b7e:	f000 facb 	bl	8004118 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	6a3a      	ldr	r2, [r7, #32]
 8003b98:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe f9e6 	bl	8001f70 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	; 0x28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	623b      	str	r3, [r7, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	e7fe      	b.n	8003bf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <xTimerGenericCommand+0x98>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d02a      	beq.n	8003c50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	dc18      	bgt.n	8003c3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c0c:	f7ff fdee 	bl	80037ec <xTaskGetSchedulerState>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d109      	bne.n	8003c2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <xTimerGenericCommand+0x98>)
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	f107 0114 	add.w	r1, r7, #20
 8003c1e:	2300      	movs	r3, #0
 8003c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c22:	f7fe fb73 	bl	800230c <xQueueGenericSend>
 8003c26:	6278      	str	r0, [r7, #36]	; 0x24
 8003c28:	e012      	b.n	8003c50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <xTimerGenericCommand+0x98>)
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	f107 0114 	add.w	r1, r7, #20
 8003c32:	2300      	movs	r3, #0
 8003c34:	2200      	movs	r2, #0
 8003c36:	f7fe fb69 	bl	800230c <xQueueGenericSend>
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24
 8003c3c:	e008      	b.n	8003c50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <xTimerGenericCommand+0x98>)
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	f107 0114 	add.w	r1, r7, #20
 8003c46:	2300      	movs	r3, #0
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	f7fe fc5d 	bl	8002508 <xQueueGenericSendFromISR>
 8003c4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3728      	adds	r7, #40	; 0x28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	2000120c 	.word	0x2000120c

08003c60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c6a:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <prvProcessExpiredTimer+0x94>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe f9e3 	bl	8002044 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d022      	beq.n	8003cd2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	18d1      	adds	r1, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	6978      	ldr	r0, [r7, #20]
 8003c9a:	f000 f8d1 	bl	8003e40 <prvInsertTimerInActiveList>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01f      	beq.n	8003ce4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	2100      	movs	r1, #0
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	f7ff ff88 	bl	8003bc4 <xTimerGenericCommand>
 8003cb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d113      	bne.n	8003ce4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	60fb      	str	r3, [r7, #12]
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	6978      	ldr	r0, [r7, #20]
 8003cea:	4798      	blx	r3
}
 8003cec:	bf00      	nop
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20001204 	.word	0x20001204

08003cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d00:	f107 0308 	add.w	r3, r7, #8
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f857 	bl	8003db8 <prvGetNextExpireTime>
 8003d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f803 	bl	8003d1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d16:	f000 f8d5 	bl	8003ec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d1a:	e7f1      	b.n	8003d00 <prvTimerTask+0x8>

08003d1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d26:	f7ff f987 	bl	8003038 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d2a:	f107 0308 	add.w	r3, r7, #8
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f866 	bl	8003e00 <prvSampleTimeNow>
 8003d34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d130      	bne.n	8003d9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <prvProcessTimerOrBlockTask+0x3c>
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d806      	bhi.n	8003d58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d4a:	f7ff f983 	bl	8003054 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ff85 	bl	8003c60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d56:	e024      	b.n	8003da2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d5e:	4b13      	ldr	r3, [pc, #76]	; (8003dac <prvProcessTimerOrBlockTask+0x90>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <prvProcessTimerOrBlockTask+0x50>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <prvProcessTimerOrBlockTask+0x52>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <prvProcessTimerOrBlockTask+0x94>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f7fe fef9 	bl	8002b74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d82:	f7ff f967 	bl	8003054 <xTaskResumeAll>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <prvProcessTimerOrBlockTask+0x98>)
 8003d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	f3bf 8f6f 	isb	sy
}
 8003d9c:	e001      	b.n	8003da2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d9e:	f7ff f959 	bl	8003054 <xTaskResumeAll>
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20001208 	.word	0x20001208
 8003db0:	2000120c 	.word	0x2000120c
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dc0:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <prvGetNextExpireTime+0x44>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <prvGetNextExpireTime+0x16>
 8003dca:	2201      	movs	r2, #1
 8003dcc:	e000      	b.n	8003dd0 <prvGetNextExpireTime+0x18>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <prvGetNextExpireTime+0x44>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	e001      	b.n	8003dec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003dec:	68fb      	ldr	r3, [r7, #12]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20001204 	.word	0x20001204

08003e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e08:	f7ff f9c0 	bl	800318c <xTaskGetTickCount>
 8003e0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <prvSampleTimeNow+0x3c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d205      	bcs.n	8003e24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e18:	f000 f91a 	bl	8004050 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e002      	b.n	8003e2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e2a:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <prvSampleTimeNow+0x3c>)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e30:	68fb      	ldr	r3, [r7, #12]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20001214 	.word	0x20001214

08003e40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d812      	bhi.n	8003e8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	1ad2      	subs	r2, r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d302      	bcc.n	8003e7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e01b      	b.n	8003eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <prvInsertTimerInActiveList+0x7c>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7fe f8a4 	bl	8001fd2 <vListInsert>
 8003e8a:	e012      	b.n	8003eb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d206      	bcs.n	8003ea2 <prvInsertTimerInActiveList+0x62>
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e007      	b.n	8003eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <prvInsertTimerInActiveList+0x80>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7fe f890 	bl	8001fd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003eb2:	697b      	ldr	r3, [r7, #20]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20001208 	.word	0x20001208
 8003ec0:	20001204 	.word	0x20001204

08003ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08c      	sub	sp, #48	; 0x30
 8003ec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eca:	e0ae      	b.n	800402a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f2c0 80aa 	blt.w	8004028 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe f8ad 	bl	8002044 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eea:	1d3b      	adds	r3, r7, #4
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff87 	bl	8003e00 <prvSampleTimeNow>
 8003ef2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b09      	cmp	r3, #9
 8003ef8:	f200 8097 	bhi.w	800402a <prvProcessReceivedCommands+0x166>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <prvProcessReceivedCommands+0x40>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	08003f2d 	.word	0x08003f2d
 8003f10:	08003fa1 	.word	0x08003fa1
 8003f14:	08003fb5 	.word	0x08003fb5
 8003f18:	08003fff 	.word	0x08003fff
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f2d 	.word	0x08003f2d
 8003f24:	08003fa1 	.word	0x08003fa1
 8003f28:	08003fb5 	.word	0x08003fb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	18d1      	adds	r1, r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a3a      	ldr	r2, [r7, #32]
 8003f4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f4c:	f7ff ff78 	bl	8003e40 <prvInsertTimerInActiveList>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d069      	beq.n	800402a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05e      	beq.n	800402a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	441a      	add	r2, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f7e:	f7ff fe21 	bl	8003bc4 <xTimerGenericCommand>
 8003f82:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d14f      	bne.n	800402a <prvProcessReceivedCommands+0x166>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	61bb      	str	r3, [r7, #24]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8003fb2:	e03a      	b.n	800402a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <prvProcessReceivedCommands+0x126>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	617b      	str	r3, [r7, #20]
}
 8003fe6:	bf00      	nop
 8003fe8:	e7fe      	b.n	8003fe8 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	18d1      	adds	r1, r2, r3
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	6a3a      	ldr	r2, [r7, #32]
 8003ff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ff8:	f7ff ff22 	bl	8003e40 <prvInsertTimerInActiveList>
					break;
 8003ffc:	e015      	b.n	800402a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800400c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800400e:	f000 fbdf 	bl	80047d0 <vPortFree>
 8004012:	e00a      	b.n	800402a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	b2da      	uxtb	r2, r3
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004026:	e000      	b.n	800402a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004028:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <prvProcessReceivedCommands+0x188>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f107 0108 	add.w	r1, r7, #8
 8004032:	2200      	movs	r2, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fb03 	bl	8002640 <xQueueReceive>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	f47f af45 	bne.w	8003ecc <prvProcessReceivedCommands+0x8>
	}
}
 8004042:	bf00      	nop
 8004044:	bf00      	nop
 8004046:	3728      	adds	r7, #40	; 0x28
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	2000120c 	.word	0x2000120c

08004050 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004056:	e048      	b.n	80040ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004058:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <prvSwitchTimerLists+0xc0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004062:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <prvSwitchTimerLists+0xc0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3304      	adds	r3, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f7fd ffe7 	bl	8002044 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02e      	beq.n	80040ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4413      	add	r3, r2
 8004094:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	429a      	cmp	r2, r3
 800409c:	d90e      	bls.n	80040bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040aa:	4b19      	ldr	r3, [pc, #100]	; (8004110 <prvSwitchTimerLists+0xc0>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f7fd ff8c 	bl	8001fd2 <vListInsert>
 80040ba:	e016      	b.n	80040ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2300      	movs	r3, #0
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	2100      	movs	r1, #0
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff fd7c 	bl	8003bc4 <xTimerGenericCommand>
 80040cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	603b      	str	r3, [r7, #0]
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <prvSwitchTimerLists+0xc0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1b1      	bne.n	8004058 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <prvSwitchTimerLists+0xc0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <prvSwitchTimerLists+0xc4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a04      	ldr	r2, [pc, #16]	; (8004110 <prvSwitchTimerLists+0xc0>)
 8004100:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <prvSwitchTimerLists+0xc4>)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20001204 	.word	0x20001204
 8004114:	20001208 	.word	0x20001208

08004118 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800411e:	f000 f969 	bl	80043f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <prvCheckForValidListAndQueue+0x60>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d120      	bne.n	800416c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800412a:	4814      	ldr	r0, [pc, #80]	; (800417c <prvCheckForValidListAndQueue+0x64>)
 800412c:	f7fd ff00 	bl	8001f30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004130:	4813      	ldr	r0, [pc, #76]	; (8004180 <prvCheckForValidListAndQueue+0x68>)
 8004132:	f7fd fefd 	bl	8001f30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004136:	4b13      	ldr	r3, [pc, #76]	; (8004184 <prvCheckForValidListAndQueue+0x6c>)
 8004138:	4a10      	ldr	r2, [pc, #64]	; (800417c <prvCheckForValidListAndQueue+0x64>)
 800413a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <prvCheckForValidListAndQueue+0x70>)
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <prvCheckForValidListAndQueue+0x68>)
 8004140:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004142:	2300      	movs	r3, #0
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <prvCheckForValidListAndQueue+0x74>)
 8004148:	4a11      	ldr	r2, [pc, #68]	; (8004190 <prvCheckForValidListAndQueue+0x78>)
 800414a:	210c      	movs	r1, #12
 800414c:	200a      	movs	r0, #10
 800414e:	f7fe f80b 	bl	8002168 <xQueueGenericCreateStatic>
 8004152:	4603      	mov	r3, r0
 8004154:	4a08      	ldr	r2, [pc, #32]	; (8004178 <prvCheckForValidListAndQueue+0x60>)
 8004156:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004158:	4b07      	ldr	r3, [pc, #28]	; (8004178 <prvCheckForValidListAndQueue+0x60>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <prvCheckForValidListAndQueue+0x60>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	490b      	ldr	r1, [pc, #44]	; (8004194 <prvCheckForValidListAndQueue+0x7c>)
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fcda 	bl	8002b20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800416c:	f000 f972 	bl	8004454 <vPortExitCritical>
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	2000120c 	.word	0x2000120c
 800417c:	200011dc 	.word	0x200011dc
 8004180:	200011f0 	.word	0x200011f0
 8004184:	20001204 	.word	0x20001204
 8004188:	20001208 	.word	0x20001208
 800418c:	20001290 	.word	0x20001290
 8004190:	20001218 	.word	0x20001218
 8004194:	08004b20 	.word	0x08004b20

08004198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3b04      	subs	r3, #4
 80041a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3b04      	subs	r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f023 0201 	bic.w	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3b04      	subs	r3, #4
 80041c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041c8:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <pxPortInitialiseStack+0x64>)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3b14      	subs	r3, #20
 80041d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3b04      	subs	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f06f 0202 	mvn.w	r2, #2
 80041e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3b20      	subs	r3, #32
 80041ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	08004201 	.word	0x08004201

08004200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <prvTaskExitError+0x54>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d00a      	beq.n	800422a <prvTaskExitError+0x2a>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60fb      	str	r3, [r7, #12]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <prvTaskExitError+0x28>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	60bb      	str	r3, [r7, #8]
}
 800423c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800423e:	bf00      	nop
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0fc      	beq.n	8004240 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	2000000c 	.word	0x2000000c
	...

08004260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <pxCurrentTCBConst2>)
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	6808      	ldr	r0, [r1, #0]
 8004266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426a:	f380 8809 	msr	PSP, r0
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8811 	msr	BASEPRI, r0
 800427a:	4770      	bx	lr
 800427c:	f3af 8000 	nop.w

08004280 <pxCurrentTCBConst2>:
 8004280:	200010b0 	.word	0x200010b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop

08004288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004288:	4808      	ldr	r0, [pc, #32]	; (80042ac <prvPortStartFirstTask+0x24>)
 800428a:	6800      	ldr	r0, [r0, #0]
 800428c:	6800      	ldr	r0, [r0, #0]
 800428e:	f380 8808 	msr	MSP, r0
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8814 	msr	CONTROL, r0
 800429a:	b662      	cpsie	i
 800429c:	b661      	cpsie	f
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	df00      	svc	0
 80042a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042aa:	bf00      	nop
 80042ac:	e000ed08 	.word	0xe000ed08

080042b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042b6:	4b46      	ldr	r3, [pc, #280]	; (80043d0 <xPortStartScheduler+0x120>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a46      	ldr	r2, [pc, #280]	; (80043d4 <xPortStartScheduler+0x124>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10a      	bne.n	80042d6 <xPortStartScheduler+0x26>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	613b      	str	r3, [r7, #16]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042d6:	4b3e      	ldr	r3, [pc, #248]	; (80043d0 <xPortStartScheduler+0x120>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3f      	ldr	r2, [pc, #252]	; (80043d8 <xPortStartScheduler+0x128>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10a      	bne.n	80042f6 <xPortStartScheduler+0x46>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	60fb      	str	r3, [r7, #12]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042f6:	4b39      	ldr	r3, [pc, #228]	; (80043dc <xPortStartScheduler+0x12c>)
 80042f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	22ff      	movs	r2, #255	; 0xff
 8004306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <xPortStartScheduler+0x130>)
 800431c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800431e:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <xPortStartScheduler+0x134>)
 8004320:	2207      	movs	r2, #7
 8004322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004324:	e009      	b.n	800433a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004326:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <xPortStartScheduler+0x134>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3b01      	subs	r3, #1
 800432c:	4a2d      	ldr	r2, [pc, #180]	; (80043e4 <xPortStartScheduler+0x134>)
 800432e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	b2db      	uxtb	r3, r3
 8004338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b80      	cmp	r3, #128	; 0x80
 8004344:	d0ef      	beq.n	8004326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004346:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <xPortStartScheduler+0x134>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1c3 0307 	rsb	r3, r3, #7
 800434e:	2b04      	cmp	r3, #4
 8004350:	d00a      	beq.n	8004368 <xPortStartScheduler+0xb8>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	60bb      	str	r3, [r7, #8]
}
 8004364:	bf00      	nop
 8004366:	e7fe      	b.n	8004366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004368:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <xPortStartScheduler+0x134>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <xPortStartScheduler+0x134>)
 8004370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004372:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <xPortStartScheduler+0x134>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800437a:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <xPortStartScheduler+0x134>)
 800437c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <xPortStartScheduler+0x138>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <xPortStartScheduler+0x138>)
 800438c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <xPortStartScheduler+0x138>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <xPortStartScheduler+0x138>)
 8004398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800439c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800439e:	f000 f8dd 	bl	800455c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <xPortStartScheduler+0x13c>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043a8:	f000 f8fc 	bl	80045a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <xPortStartScheduler+0x140>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0f      	ldr	r2, [pc, #60]	; (80043f0 <xPortStartScheduler+0x140>)
 80043b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043b8:	f7ff ff66 	bl	8004288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043bc:	f7fe ffae 	bl	800331c <vTaskSwitchContext>
	prvTaskExitError();
 80043c0:	f7ff ff1e 	bl	8004200 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	e000ed00 	.word	0xe000ed00
 80043d4:	410fc271 	.word	0x410fc271
 80043d8:	410fc270 	.word	0x410fc270
 80043dc:	e000e400 	.word	0xe000e400
 80043e0:	200012d8 	.word	0x200012d8
 80043e4:	200012dc 	.word	0x200012dc
 80043e8:	e000ed20 	.word	0xe000ed20
 80043ec:	2000000c 	.word	0x2000000c
 80043f0:	e000ef34 	.word	0xe000ef34

080043f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	607b      	str	r3, [r7, #4]
}
 800440c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <vPortEnterCritical+0x58>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	4a0d      	ldr	r2, [pc, #52]	; (800444c <vPortEnterCritical+0x58>)
 8004416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <vPortEnterCritical+0x58>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10f      	bne.n	8004440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <vPortEnterCritical+0x5c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <vPortEnterCritical+0x4c>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	603b      	str	r3, [r7, #0]
}
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <vPortEnterCritical+0x4a>
	}
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	2000000c 	.word	0x2000000c
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <vPortExitCritical+0x50>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <vPortExitCritical+0x24>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	607b      	str	r3, [r7, #4]
}
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <vPortExitCritical+0x50>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3b01      	subs	r3, #1
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <vPortExitCritical+0x50>)
 8004480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <vPortExitCritical+0x50>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <vPortExitCritical+0x42>
 800448a:	2300      	movs	r3, #0
 800448c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f383 8811 	msr	BASEPRI, r3
}
 8004494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	2000000c 	.word	0x2000000c
	...

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f01e 0f10 	tst.w	lr, #16
 80044c0:	bf08      	it	eq
 80044c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	6010      	str	r0, [r2, #0]
 80044cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044d4:	f380 8811 	msr	BASEPRI, r0
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f7fe ff1c 	bl	800331c <vTaskSwitchContext>
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f380 8811 	msr	BASEPRI, r0
 80044ec:	bc09      	pop	{r0, r3}
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	6808      	ldr	r0, [r1, #0]
 80044f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f6:	f01e 0f10 	tst.w	lr, #16
 80044fa:	bf08      	it	eq
 80044fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004500:	f380 8809 	msr	PSP, r0
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst>:
 8004510:	200010b0 	.word	0x200010b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
}
 8004530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004532:	f7fe fe3b 	bl	80031ac <xTaskIncrementTick>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <SysTick_Handler+0x40>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	2300      	movs	r3, #0
 8004546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f383 8811 	msr	BASEPRI, r3
}
 800454e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <vPortSetupTimerInterrupt+0x34>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <vPortSetupTimerInterrupt+0x38>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <vPortSetupTimerInterrupt+0x3c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a0a      	ldr	r2, [pc, #40]	; (800459c <vPortSetupTimerInterrupt+0x40>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <vPortSetupTimerInterrupt+0x44>)
 800457a:	3b01      	subs	r3, #1
 800457c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800457e:	4b04      	ldr	r3, [pc, #16]	; (8004590 <vPortSetupTimerInterrupt+0x34>)
 8004580:	2207      	movs	r2, #7
 8004582:	601a      	str	r2, [r3, #0]
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e010 	.word	0xe000e010
 8004594:	e000e018 	.word	0xe000e018
 8004598:	20000000 	.word	0x20000000
 800459c:	10624dd3 	.word	0x10624dd3
 80045a0:	e000e014 	.word	0xe000e014

080045a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045b4 <vPortEnableVFP+0x10>
 80045a8:	6801      	ldr	r1, [r0, #0]
 80045aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045ae:	6001      	str	r1, [r0, #0]
 80045b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045b2:	bf00      	nop
 80045b4:	e000ed88 	.word	0xe000ed88

080045b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045be:	f3ef 8305 	mrs	r3, IPSR
 80045c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d914      	bls.n	80045f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045ca:	4a17      	ldr	r2, [pc, #92]	; (8004628 <vPortValidateInterruptPriority+0x70>)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045d4:	4b15      	ldr	r3, [pc, #84]	; (800462c <vPortValidateInterruptPriority+0x74>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	7afa      	ldrb	r2, [r7, #11]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d20a      	bcs.n	80045f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
}
 80045f0:	bf00      	nop
 80045f2:	e7fe      	b.n	80045f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045f4:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <vPortValidateInterruptPriority+0x78>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <vPortValidateInterruptPriority+0x7c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d90a      	bls.n	800461a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	603b      	str	r3, [r7, #0]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <vPortValidateInterruptPriority+0x60>
	}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	e000e3f0 	.word	0xe000e3f0
 800462c:	200012d8 	.word	0x200012d8
 8004630:	e000ed0c 	.word	0xe000ed0c
 8004634:	200012dc 	.word	0x200012dc

08004638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004640:	2300      	movs	r3, #0
 8004642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004644:	f7fe fcf8 	bl	8003038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004648:	4b5b      	ldr	r3, [pc, #364]	; (80047b8 <pvPortMalloc+0x180>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004650:	f000 f920 	bl	8004894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <pvPortMalloc+0x184>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8093 	bne.w	8004788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01d      	beq.n	80046a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004668:	2208      	movs	r2, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	2b00      	cmp	r3, #0
 8004678:	d014      	beq.n	80046a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f023 0307 	bic.w	r3, r3, #7
 8004680:	3308      	adds	r3, #8
 8004682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <pvPortMalloc+0x6c>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	617b      	str	r3, [r7, #20]
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d06e      	beq.n	8004788 <pvPortMalloc+0x150>
 80046aa:	4b45      	ldr	r3, [pc, #276]	; (80047c0 <pvPortMalloc+0x188>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d869      	bhi.n	8004788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046b4:	4b43      	ldr	r3, [pc, #268]	; (80047c4 <pvPortMalloc+0x18c>)
 80046b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046b8:	4b42      	ldr	r3, [pc, #264]	; (80047c4 <pvPortMalloc+0x18c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046be:	e004      	b.n	80046ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d903      	bls.n	80046dc <pvPortMalloc+0xa4>
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f1      	bne.n	80046c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046dc:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <pvPortMalloc+0x180>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d050      	beq.n	8004788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2208      	movs	r2, #8
 80046ec:	4413      	add	r3, r2
 80046ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	1ad2      	subs	r2, r2, r3
 8004700:	2308      	movs	r3, #8
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	429a      	cmp	r2, r3
 8004706:	d91f      	bls.n	8004748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4413      	add	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <pvPortMalloc+0xf8>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	613b      	str	r3, [r7, #16]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004742:	69b8      	ldr	r0, [r7, #24]
 8004744:	f000 f908 	bl	8004958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004748:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <pvPortMalloc+0x188>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <pvPortMalloc+0x188>)
 8004754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004756:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <pvPortMalloc+0x188>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <pvPortMalloc+0x190>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d203      	bcs.n	800476a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004762:	4b17      	ldr	r3, [pc, #92]	; (80047c0 <pvPortMalloc+0x188>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <pvPortMalloc+0x190>)
 8004768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <pvPortMalloc+0x184>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	431a      	orrs	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <pvPortMalloc+0x194>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3301      	adds	r3, #1
 8004784:	4a11      	ldr	r2, [pc, #68]	; (80047cc <pvPortMalloc+0x194>)
 8004786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004788:	f7fe fc64 	bl	8003054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <pvPortMalloc+0x174>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60fb      	str	r3, [r7, #12]
}
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <pvPortMalloc+0x172>
	return pvReturn;
 80047ac:	69fb      	ldr	r3, [r7, #28]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3728      	adds	r7, #40	; 0x28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20004ee8 	.word	0x20004ee8
 80047bc:	20004efc 	.word	0x20004efc
 80047c0:	20004eec 	.word	0x20004eec
 80047c4:	20004ee0 	.word	0x20004ee0
 80047c8:	20004ef0 	.word	0x20004ef0
 80047cc:	20004ef4 	.word	0x20004ef4

080047d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04d      	beq.n	800487e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047e2:	2308      	movs	r3, #8
 80047e4:	425b      	negs	r3, r3
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4413      	add	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	4b24      	ldr	r3, [pc, #144]	; (8004888 <vPortFree+0xb8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <vPortFree+0x44>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60fb      	str	r3, [r7, #12]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <vPortFree+0x62>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	60bb      	str	r3, [r7, #8]
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <vPortFree+0xb8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01e      	beq.n	800487e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d11a      	bne.n	800487e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <vPortFree+0xb8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	43db      	mvns	r3, r3
 8004852:	401a      	ands	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004858:	f7fe fbee 	bl	8003038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <vPortFree+0xbc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4413      	add	r3, r2
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <vPortFree+0xbc>)
 8004868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800486a:	6938      	ldr	r0, [r7, #16]
 800486c:	f000 f874 	bl	8004958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <vPortFree+0xc0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	4a06      	ldr	r2, [pc, #24]	; (8004890 <vPortFree+0xc0>)
 8004878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800487a:	f7fe fbeb 	bl	8003054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800487e:	bf00      	nop
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20004efc 	.word	0x20004efc
 800488c:	20004eec 	.word	0x20004eec
 8004890:	20004ef8 	.word	0x20004ef8

08004894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800489a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800489e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048a0:	4b27      	ldr	r3, [pc, #156]	; (8004940 <prvHeapInit+0xac>)
 80048a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3307      	adds	r3, #7
 80048b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0307 	bic.w	r3, r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <prvHeapInit+0xac>)
 80048c4:	4413      	add	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048cc:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <prvHeapInit+0xb0>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <prvHeapInit+0xb0>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4413      	add	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048e0:	2208      	movs	r2, #8
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0307 	bic.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a15      	ldr	r2, [pc, #84]	; (8004948 <prvHeapInit+0xb4>)
 80048f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <prvHeapInit+0xb4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2200      	movs	r2, #0
 80048fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <prvHeapInit+0xb4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	1ad2      	subs	r2, r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <prvHeapInit+0xb4>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <prvHeapInit+0xb8>)
 8004922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4a09      	ldr	r2, [pc, #36]	; (8004950 <prvHeapInit+0xbc>)
 800492a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <prvHeapInit+0xc0>)
 800492e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004932:	601a      	str	r2, [r3, #0]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	200012e0 	.word	0x200012e0
 8004944:	20004ee0 	.word	0x20004ee0
 8004948:	20004ee8 	.word	0x20004ee8
 800494c:	20004ef0 	.word	0x20004ef0
 8004950:	20004eec 	.word	0x20004eec
 8004954:	20004efc 	.word	0x20004efc

08004958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004960:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <prvInsertBlockIntoFreeList+0xac>)
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e002      	b.n	800496c <prvInsertBlockIntoFreeList+0x14>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	429a      	cmp	r2, r3
 8004974:	d8f7      	bhi.n	8004966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4413      	add	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d108      	bne.n	800499a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	441a      	add	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	441a      	add	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d118      	bne.n	80049e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <prvInsertBlockIntoFreeList+0xb0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d00d      	beq.n	80049d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e008      	b.n	80049e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <prvInsertBlockIntoFreeList+0xb0>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e003      	b.n	80049e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d002      	beq.n	80049f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20004ee0 	.word	0x20004ee0
 8004a08:	20004ee8 	.word	0x20004ee8

08004a0c <__libc_init_array>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4d0d      	ldr	r5, [pc, #52]	; (8004a44 <__libc_init_array+0x38>)
 8004a10:	4c0d      	ldr	r4, [pc, #52]	; (8004a48 <__libc_init_array+0x3c>)
 8004a12:	1b64      	subs	r4, r4, r5
 8004a14:	10a4      	asrs	r4, r4, #2
 8004a16:	2600      	movs	r6, #0
 8004a18:	42a6      	cmp	r6, r4
 8004a1a:	d109      	bne.n	8004a30 <__libc_init_array+0x24>
 8004a1c:	4d0b      	ldr	r5, [pc, #44]	; (8004a4c <__libc_init_array+0x40>)
 8004a1e:	4c0c      	ldr	r4, [pc, #48]	; (8004a50 <__libc_init_array+0x44>)
 8004a20:	f000 f82e 	bl	8004a80 <_init>
 8004a24:	1b64      	subs	r4, r4, r5
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	2600      	movs	r6, #0
 8004a2a:	42a6      	cmp	r6, r4
 8004a2c:	d105      	bne.n	8004a3a <__libc_init_array+0x2e>
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a34:	4798      	blx	r3
 8004a36:	3601      	adds	r6, #1
 8004a38:	e7ee      	b.n	8004a18 <__libc_init_array+0xc>
 8004a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3e:	4798      	blx	r3
 8004a40:	3601      	adds	r6, #1
 8004a42:	e7f2      	b.n	8004a2a <__libc_init_array+0x1e>
 8004a44:	08004b48 	.word	0x08004b48
 8004a48:	08004b48 	.word	0x08004b48
 8004a4c:	08004b48 	.word	0x08004b48
 8004a50:	08004b4c 	.word	0x08004b4c

08004a54 <memcpy>:
 8004a54:	440a      	add	r2, r1
 8004a56:	4291      	cmp	r1, r2
 8004a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a5c:	d100      	bne.n	8004a60 <memcpy+0xc>
 8004a5e:	4770      	bx	lr
 8004a60:	b510      	push	{r4, lr}
 8004a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a6a:	4291      	cmp	r1, r2
 8004a6c:	d1f9      	bne.n	8004a62 <memcpy+0xe>
 8004a6e:	bd10      	pop	{r4, pc}

08004a70 <memset>:
 8004a70:	4402      	add	r2, r0
 8004a72:	4603      	mov	r3, r0
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d100      	bne.n	8004a7a <memset+0xa>
 8004a78:	4770      	bx	lr
 8004a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7e:	e7f9      	b.n	8004a74 <memset+0x4>

08004a80 <_init>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr

08004a8c <_fini>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr
