
keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f30  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080010d8  080010d8  000110d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800117c  0800117c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800117c  0800117c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800117c  0800117c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800117c  0800117c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001180  08001180  00011180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009a9  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000336  00000000  00000000  00020a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00020d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000e0  00000000  00000000  00020e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bda  00000000  00000000  00020f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013db  00000000  00000000  00023b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000092f1  00000000  00000000  00024f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002e216  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a1c  00000000  00000000  0002e268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080010c0 	.word	0x080010c0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	080010c0 	.word	0x080010c0

080001e8 <delay>:
 */

#include <stdint.h>
#include <stdio.h>
void delay (void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i<300000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	000493df 	.word	0x000493df

08000214 <main>:
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
    volatile *const pClkCtrlReg   = (uint32_t*) 0x40023830;
 800021a:	4b95      	ldr	r3, [pc, #596]	; (8000470 <main+0x25c>)
 800021c:	617b      	str	r3, [r7, #20]
    volatile *const pPortDModeRed = (uint32_t*) 0x40020C00;
 800021e:	4b95      	ldr	r3, [pc, #596]	; (8000474 <main+0x260>)
 8000220:	613b      	str	r3, [r7, #16]
    volatile *const pPortDOutRed  = (uint32_t*) 0x40020C14;
 8000222:	4b95      	ldr	r3, [pc, #596]	; (8000478 <main+0x264>)
 8000224:	60fb      	str	r3, [r7, #12]
    volatile *const pPortDInRed   = (uint32_t*) 0x40020C10;
 8000226:	4b95      	ldr	r3, [pc, #596]	; (800047c <main+0x268>)
 8000228:	60bb      	str	r3, [r7, #8]
    volatile *const pPortDPUPDR   = (uint32_t*) 0x40020C0C;
 800022a:	4b95      	ldr	r3, [pc, #596]	; (8000480 <main+0x26c>)
 800022c:	607b      	str	r3, [r7, #4]
    // enable portD
    *pClkCtrlReg |= (1<<3);
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0208 	orr.w	r2, r3, #8
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	601a      	str	r2, [r3, #0]
    // chonj che do model out put pin 0-3
    *pPortDModeRed &=~( 0xFF);
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	601a      	str	r2, [r3, #0]
    *pPortDModeRed |= 0x55;
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	601a      	str	r2, [r3, #0]
    // input pin 4-7
    *pPortDModeRed &= ~(0xFF<<8);
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	601a      	str	r2, [r3, #0]
    // chế độ đếm lên (pull up)
    *pPortDPUPDR |= (0x55<<8);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f443 42aa 	orr.w	r2, r3, #21760	; 0x5500
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	601a      	str	r2, [r3, #0]
    while(1) {
    // make all row HIGH
    *pPortDOutRed |= (0xF);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f043 020f 	orr.w	r2, r3, #15
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	601a      	str	r2, [r3, #0]
    // r1 low
    *pPortDOutRed &= ~(1<<0);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f023 0201 	bic.w	r2, r3, #1
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	601a      	str	r2, [r3, #0]
    if (!(*pPortDInRed &= ~(1<<4)))
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f023 0310 	bic.w	r3, r3, #16
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	6013      	str	r3, [r2, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d104      	bne.n	800029c <main+0x88>
    {
    	delay();
 8000292:	f7ff ffa9 	bl	80001e8 <delay>
    	printf("1\n");
 8000296:	487b      	ldr	r0, [pc, #492]	; (8000484 <main+0x270>)
 8000298:	f000 fa82 	bl	80007a0 <puts>
    }
    if (!(*pPortDInRed &= ~(1<<5)))
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f023 0320 	bic.w	r3, r3, #32
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	6013      	str	r3, [r2, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d104      	bne.n	80002b6 <main+0xa2>
        {
    		delay();
 80002ac:	f7ff ff9c 	bl	80001e8 <delay>
        	printf("2\n");
 80002b0:	4875      	ldr	r0, [pc, #468]	; (8000488 <main+0x274>)
 80002b2:	f000 fa75 	bl	80007a0 <puts>
        }
    if (!(*pPortDInRed &= ~(1<<6)))
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002be:	68ba      	ldr	r2, [r7, #8]
 80002c0:	6013      	str	r3, [r2, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d104      	bne.n	80002d0 <main+0xbc>
        {
    		delay();
 80002c6:	f7ff ff8f 	bl	80001e8 <delay>
        	printf("3\n");
 80002ca:	4870      	ldr	r0, [pc, #448]	; (800048c <main+0x278>)
 80002cc:	f000 fa68 	bl	80007a0 <puts>
        }
    if (!(*pPortDInRed &= ~(1<<7)))
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	6013      	str	r3, [r2, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d104      	bne.n	80002ea <main+0xd6>
        {
    		delay();
 80002e0:	f7ff ff82 	bl	80001e8 <delay>
        	printf("A\n");
 80002e4:	486a      	ldr	r0, [pc, #424]	; (8000490 <main+0x27c>)
 80002e6:	f000 fa5b 	bl	80007a0 <puts>
        }
    // make all row HIGH
      *pPortDOutRed |= (0xF);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f043 020f 	orr.w	r2, r3, #15
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	601a      	str	r2, [r3, #0]
      // r2 low
      *pPortDOutRed &= ~(1<<1);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f023 0202 	bic.w	r2, r3, #2
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	601a      	str	r2, [r3, #0]
      if (!(*pPortDInRed &= ~(1<<4)))
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f023 0310 	bic.w	r3, r3, #16
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d104      	bne.n	800031c <main+0x108>
      {
      	delay();
 8000312:	f7ff ff69 	bl	80001e8 <delay>
      	printf("4\n");
 8000316:	485f      	ldr	r0, [pc, #380]	; (8000494 <main+0x280>)
 8000318:	f000 fa42 	bl	80007a0 <puts>
      }
      if (!(*pPortDInRed &= ~(1<<5)))
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f023 0320 	bic.w	r3, r3, #32
 8000324:	68ba      	ldr	r2, [r7, #8]
 8000326:	6013      	str	r3, [r2, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d104      	bne.n	8000336 <main+0x122>
          {
      		delay();
 800032c:	f7ff ff5c 	bl	80001e8 <delay>
          	printf("5\n");
 8000330:	4859      	ldr	r0, [pc, #356]	; (8000498 <main+0x284>)
 8000332:	f000 fa35 	bl	80007a0 <puts>
          }
      if (!(*pPortDInRed &= ~(1<<6)))
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800033e:	68ba      	ldr	r2, [r7, #8]
 8000340:	6013      	str	r3, [r2, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d104      	bne.n	8000350 <main+0x13c>
          {
      		delay();
 8000346:	f7ff ff4f 	bl	80001e8 <delay>
          	printf("6\n");
 800034a:	4854      	ldr	r0, [pc, #336]	; (800049c <main+0x288>)
 800034c:	f000 fa28 	bl	80007a0 <puts>
          }
      if (!(*pPortDInRed &= ~(1<<7)))
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000358:	68ba      	ldr	r2, [r7, #8]
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d104      	bne.n	800036a <main+0x156>
          {
      		delay();
 8000360:	f7ff ff42 	bl	80001e8 <delay>
          	printf("b\n");
 8000364:	484e      	ldr	r0, [pc, #312]	; (80004a0 <main+0x28c>)
 8000366:	f000 fa1b 	bl	80007a0 <puts>
          }
      // make all row HIGH
        *pPortDOutRed |= (0xF);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f043 020f 	orr.w	r2, r3, #15
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	601a      	str	r2, [r3, #0]
        // r3 low
        *pPortDOutRed &= ~(1<<2);
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f023 0204 	bic.w	r2, r3, #4
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	601a      	str	r2, [r3, #0]
        if (!(*pPortDInRed &= ~(1<<4)))
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f023 0310 	bic.w	r3, r3, #16
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	6013      	str	r3, [r2, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d104      	bne.n	800039c <main+0x188>
        {
        	delay();
 8000392:	f7ff ff29 	bl	80001e8 <delay>
        	printf("7\n");
 8000396:	4843      	ldr	r0, [pc, #268]	; (80004a4 <main+0x290>)
 8000398:	f000 fa02 	bl	80007a0 <puts>
        }
        if (!(*pPortDInRed &= ~(1<<5)))
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f023 0320 	bic.w	r3, r3, #32
 80003a4:	68ba      	ldr	r2, [r7, #8]
 80003a6:	6013      	str	r3, [r2, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d104      	bne.n	80003b6 <main+0x1a2>
            {
        		delay();
 80003ac:	f7ff ff1c 	bl	80001e8 <delay>
            	printf("8\n");
 80003b0:	483d      	ldr	r0, [pc, #244]	; (80004a8 <main+0x294>)
 80003b2:	f000 f9f5 	bl	80007a0 <puts>
            }
        if (!(*pPortDInRed &= ~(1<<6)))
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003be:	68ba      	ldr	r2, [r7, #8]
 80003c0:	6013      	str	r3, [r2, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d104      	bne.n	80003d0 <main+0x1bc>
            {
        		delay();
 80003c6:	f7ff ff0f 	bl	80001e8 <delay>
            	printf("9\n");
 80003ca:	4838      	ldr	r0, [pc, #224]	; (80004ac <main+0x298>)
 80003cc:	f000 f9e8 	bl	80007a0 <puts>
            }
        if (!(*pPortDInRed &= ~(1<<7)))
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003d8:	68ba      	ldr	r2, [r7, #8]
 80003da:	6013      	str	r3, [r2, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d104      	bne.n	80003ea <main+0x1d6>
            {
        		delay();
 80003e0:	f7ff ff02 	bl	80001e8 <delay>
            	printf("C\n");
 80003e4:	4832      	ldr	r0, [pc, #200]	; (80004b0 <main+0x29c>)
 80003e6:	f000 f9db 	bl	80007a0 <puts>
            }
        // make all row HIGH
          *pPortDOutRed |= (0xF);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f043 020f 	orr.w	r2, r3, #15
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	601a      	str	r2, [r3, #0]
          // r4 low
          *pPortDOutRed &= ~(1<<3);
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 0208 	bic.w	r2, r3, #8
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	601a      	str	r2, [r3, #0]
          if (!(*pPortDInRed &= ~(1<<4)))
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f023 0310 	bic.w	r3, r3, #16
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	6013      	str	r3, [r2, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d104      	bne.n	800041c <main+0x208>
          {
          	delay();
 8000412:	f7ff fee9 	bl	80001e8 <delay>
          	printf("*\n");
 8000416:	4827      	ldr	r0, [pc, #156]	; (80004b4 <main+0x2a0>)
 8000418:	f000 f9c2 	bl	80007a0 <puts>
          }
          if (!(*pPortDInRed &= ~(1<<5)))
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f023 0320 	bic.w	r3, r3, #32
 8000424:	68ba      	ldr	r2, [r7, #8]
 8000426:	6013      	str	r3, [r2, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d104      	bne.n	8000436 <main+0x222>
              {
          		delay();
 800042c:	f7ff fedc 	bl	80001e8 <delay>
              	printf("0\n");
 8000430:	4821      	ldr	r0, [pc, #132]	; (80004b8 <main+0x2a4>)
 8000432:	f000 f9b5 	bl	80007a0 <puts>
              }
          if (!(*pPortDInRed &= ~(1<<6)))
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800043e:	68ba      	ldr	r2, [r7, #8]
 8000440:	6013      	str	r3, [r2, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d104      	bne.n	8000450 <main+0x23c>
              {
          		delay();
 8000446:	f7ff fecf 	bl	80001e8 <delay>
              	printf("#\n");
 800044a:	481c      	ldr	r0, [pc, #112]	; (80004bc <main+0x2a8>)
 800044c:	f000 f9a8 	bl	80007a0 <puts>
              }
          if (!(*pPortDInRed &= ~(1<<7)))
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	6013      	str	r3, [r2, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	f47f af04 	bne.w	800026a <main+0x56>
              {
          		delay();
 8000462:	f7ff fec1 	bl	80001e8 <delay>
              	printf("D\n");
 8000466:	4816      	ldr	r0, [pc, #88]	; (80004c0 <main+0x2ac>)
 8000468:	f000 f99a 	bl	80007a0 <puts>
    *pPortDOutRed |= (0xF);
 800046c:	e6fd      	b.n	800026a <main+0x56>
 800046e:	bf00      	nop
 8000470:	40023830 	.word	0x40023830
 8000474:	40020c00 	.word	0x40020c00
 8000478:	40020c14 	.word	0x40020c14
 800047c:	40020c10 	.word	0x40020c10
 8000480:	40020c0c 	.word	0x40020c0c
 8000484:	080010d8 	.word	0x080010d8
 8000488:	080010dc 	.word	0x080010dc
 800048c:	080010e0 	.word	0x080010e0
 8000490:	080010e4 	.word	0x080010e4
 8000494:	080010e8 	.word	0x080010e8
 8000498:	080010ec 	.word	0x080010ec
 800049c:	080010f0 	.word	0x080010f0
 80004a0:	080010f4 	.word	0x080010f4
 80004a4:	080010f8 	.word	0x080010f8
 80004a8:	080010fc 	.word	0x080010fc
 80004ac:	08001100 	.word	0x08001100
 80004b0:	08001104 	.word	0x08001104
 80004b4:	08001108 	.word	0x08001108
 80004b8:	0800110c 	.word	0x0800110c
 80004bc:	08001110 	.word	0x08001110
 80004c0:	08001114 	.word	0x08001114

080004c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	e00a      	b.n	80004ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004d6:	f3af 8000 	nop.w
 80004da:	4601      	mov	r1, r0
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	1c5a      	adds	r2, r3, #1
 80004e0:	60ba      	str	r2, [r7, #8]
 80004e2:	b2ca      	uxtb	r2, r1
 80004e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	3301      	adds	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	dbf0      	blt.n	80004d6 <_read+0x12>
  }

  return len;
 80004f4:	687b      	ldr	r3, [r7, #4]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b086      	sub	sp, #24
 8000502:	af00      	add	r7, sp, #0
 8000504:	60f8      	str	r0, [r7, #12]
 8000506:	60b9      	str	r1, [r7, #8]
 8000508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	e009      	b.n	8000524 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	60ba      	str	r2, [r7, #8]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	3301      	adds	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697a      	ldr	r2, [r7, #20]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	429a      	cmp	r2, r3
 800052a:	dbf1      	blt.n	8000510 <_write+0x12>
  }
  return len;
 800052c:	687b      	ldr	r3, [r7, #4]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <_close>:

int _close(int file)
{
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800055e:	605a      	str	r2, [r3, #4]
  return 0;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <_isatty>:

int _isatty(int file)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f000 f846 	bl	8000660 <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20020000 	.word	0x20020000
 8000600:	00000400 	.word	0x00000400
 8000604:	20000080 	.word	0x20000080
 8000608:	20000098 	.word	0x20000098

0800060c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000610:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <LoopForever+0xe>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	; (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800063a:	f000 f817 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fde9 	bl	8000214 <main>

08000642 <LoopForever>:

LoopForever:
  b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   r0, =_estack
 8000644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000650:	08001184 	.word	0x08001184
  ldr r2, =_sbss
 8000654:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000658:	20000094 	.word	0x20000094

0800065c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC_IRQHandler>
	...

08000660 <__errno>:
 8000660:	4b01      	ldr	r3, [pc, #4]	; (8000668 <__errno+0x8>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000000 	.word	0x20000000

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4d0d      	ldr	r5, [pc, #52]	; (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	; (80006a8 <__libc_init_array+0x3c>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2600      	movs	r6, #0
 8000678:	42a6      	cmp	r6, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4d0b      	ldr	r5, [pc, #44]	; (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	; (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 fd1e 	bl	80010c0 <_init>
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2600      	movs	r6, #0
 800068a:	42a6      	cmp	r6, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f855 3b04 	ldr.w	r3, [r5], #4
 8000694:	4798      	blx	r3
 8000696:	3601      	adds	r6, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f855 3b04 	ldr.w	r3, [r5], #4
 800069e:	4798      	blx	r3
 80006a0:	3601      	adds	r6, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	0800117c 	.word	0x0800117c
 80006a8:	0800117c 	.word	0x0800117c
 80006ac:	0800117c 	.word	0x0800117c
 80006b0:	08001180 	.word	0x08001180

080006b4 <memset>:
 80006b4:	4402      	add	r2, r0
 80006b6:	4603      	mov	r3, r0
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d100      	bne.n	80006be <memset+0xa>
 80006bc:	4770      	bx	lr
 80006be:	f803 1b01 	strb.w	r1, [r3], #1
 80006c2:	e7f9      	b.n	80006b8 <memset+0x4>

080006c4 <_puts_r>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	460e      	mov	r6, r1
 80006c8:	4605      	mov	r5, r0
 80006ca:	b118      	cbz	r0, 80006d4 <_puts_r+0x10>
 80006cc:	6983      	ldr	r3, [r0, #24]
 80006ce:	b90b      	cbnz	r3, 80006d4 <_puts_r+0x10>
 80006d0:	f000 fa48 	bl	8000b64 <__sinit>
 80006d4:	69ab      	ldr	r3, [r5, #24]
 80006d6:	68ac      	ldr	r4, [r5, #8]
 80006d8:	b913      	cbnz	r3, 80006e0 <_puts_r+0x1c>
 80006da:	4628      	mov	r0, r5
 80006dc:	f000 fa42 	bl	8000b64 <__sinit>
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <_puts_r+0xd0>)
 80006e2:	429c      	cmp	r4, r3
 80006e4:	d120      	bne.n	8000728 <_puts_r+0x64>
 80006e6:	686c      	ldr	r4, [r5, #4]
 80006e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006ea:	07db      	lsls	r3, r3, #31
 80006ec:	d405      	bmi.n	80006fa <_puts_r+0x36>
 80006ee:	89a3      	ldrh	r3, [r4, #12]
 80006f0:	0598      	lsls	r0, r3, #22
 80006f2:	d402      	bmi.n	80006fa <_puts_r+0x36>
 80006f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006f6:	f000 fad3 	bl	8000ca0 <__retarget_lock_acquire_recursive>
 80006fa:	89a3      	ldrh	r3, [r4, #12]
 80006fc:	0719      	lsls	r1, r3, #28
 80006fe:	d51d      	bpl.n	800073c <_puts_r+0x78>
 8000700:	6923      	ldr	r3, [r4, #16]
 8000702:	b1db      	cbz	r3, 800073c <_puts_r+0x78>
 8000704:	3e01      	subs	r6, #1
 8000706:	68a3      	ldr	r3, [r4, #8]
 8000708:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800070c:	3b01      	subs	r3, #1
 800070e:	60a3      	str	r3, [r4, #8]
 8000710:	bb39      	cbnz	r1, 8000762 <_puts_r+0x9e>
 8000712:	2b00      	cmp	r3, #0
 8000714:	da38      	bge.n	8000788 <_puts_r+0xc4>
 8000716:	4622      	mov	r2, r4
 8000718:	210a      	movs	r1, #10
 800071a:	4628      	mov	r0, r5
 800071c:	f000 f848 	bl	80007b0 <__swbuf_r>
 8000720:	3001      	adds	r0, #1
 8000722:	d011      	beq.n	8000748 <_puts_r+0x84>
 8000724:	250a      	movs	r5, #10
 8000726:	e011      	b.n	800074c <_puts_r+0x88>
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <_puts_r+0xd4>)
 800072a:	429c      	cmp	r4, r3
 800072c:	d101      	bne.n	8000732 <_puts_r+0x6e>
 800072e:	68ac      	ldr	r4, [r5, #8]
 8000730:	e7da      	b.n	80006e8 <_puts_r+0x24>
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <_puts_r+0xd8>)
 8000734:	429c      	cmp	r4, r3
 8000736:	bf08      	it	eq
 8000738:	68ec      	ldreq	r4, [r5, #12]
 800073a:	e7d5      	b.n	80006e8 <_puts_r+0x24>
 800073c:	4621      	mov	r1, r4
 800073e:	4628      	mov	r0, r5
 8000740:	f000 f888 	bl	8000854 <__swsetup_r>
 8000744:	2800      	cmp	r0, #0
 8000746:	d0dd      	beq.n	8000704 <_puts_r+0x40>
 8000748:	f04f 35ff 	mov.w	r5, #4294967295
 800074c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800074e:	07da      	lsls	r2, r3, #31
 8000750:	d405      	bmi.n	800075e <_puts_r+0x9a>
 8000752:	89a3      	ldrh	r3, [r4, #12]
 8000754:	059b      	lsls	r3, r3, #22
 8000756:	d402      	bmi.n	800075e <_puts_r+0x9a>
 8000758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800075a:	f000 faa2 	bl	8000ca2 <__retarget_lock_release_recursive>
 800075e:	4628      	mov	r0, r5
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	2b00      	cmp	r3, #0
 8000764:	da04      	bge.n	8000770 <_puts_r+0xac>
 8000766:	69a2      	ldr	r2, [r4, #24]
 8000768:	429a      	cmp	r2, r3
 800076a:	dc06      	bgt.n	800077a <_puts_r+0xb6>
 800076c:	290a      	cmp	r1, #10
 800076e:	d004      	beq.n	800077a <_puts_r+0xb6>
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	6022      	str	r2, [r4, #0]
 8000776:	7019      	strb	r1, [r3, #0]
 8000778:	e7c5      	b.n	8000706 <_puts_r+0x42>
 800077a:	4622      	mov	r2, r4
 800077c:	4628      	mov	r0, r5
 800077e:	f000 f817 	bl	80007b0 <__swbuf_r>
 8000782:	3001      	adds	r0, #1
 8000784:	d1bf      	bne.n	8000706 <_puts_r+0x42>
 8000786:	e7df      	b.n	8000748 <_puts_r+0x84>
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	250a      	movs	r5, #10
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	6022      	str	r2, [r4, #0]
 8000790:	701d      	strb	r5, [r3, #0]
 8000792:	e7db      	b.n	800074c <_puts_r+0x88>
 8000794:	0800113c 	.word	0x0800113c
 8000798:	0800115c 	.word	0x0800115c
 800079c:	0800111c 	.word	0x0800111c

080007a0 <puts>:
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <puts+0xc>)
 80007a2:	4601      	mov	r1, r0
 80007a4:	6818      	ldr	r0, [r3, #0]
 80007a6:	f7ff bf8d 	b.w	80006c4 <_puts_r>
 80007aa:	bf00      	nop
 80007ac:	20000000 	.word	0x20000000

080007b0 <__swbuf_r>:
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	460e      	mov	r6, r1
 80007b4:	4614      	mov	r4, r2
 80007b6:	4605      	mov	r5, r0
 80007b8:	b118      	cbz	r0, 80007c2 <__swbuf_r+0x12>
 80007ba:	6983      	ldr	r3, [r0, #24]
 80007bc:	b90b      	cbnz	r3, 80007c2 <__swbuf_r+0x12>
 80007be:	f000 f9d1 	bl	8000b64 <__sinit>
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <__swbuf_r+0x98>)
 80007c4:	429c      	cmp	r4, r3
 80007c6:	d12b      	bne.n	8000820 <__swbuf_r+0x70>
 80007c8:	686c      	ldr	r4, [r5, #4]
 80007ca:	69a3      	ldr	r3, [r4, #24]
 80007cc:	60a3      	str	r3, [r4, #8]
 80007ce:	89a3      	ldrh	r3, [r4, #12]
 80007d0:	071a      	lsls	r2, r3, #28
 80007d2:	d52f      	bpl.n	8000834 <__swbuf_r+0x84>
 80007d4:	6923      	ldr	r3, [r4, #16]
 80007d6:	b36b      	cbz	r3, 8000834 <__swbuf_r+0x84>
 80007d8:	6923      	ldr	r3, [r4, #16]
 80007da:	6820      	ldr	r0, [r4, #0]
 80007dc:	1ac0      	subs	r0, r0, r3
 80007de:	6963      	ldr	r3, [r4, #20]
 80007e0:	b2f6      	uxtb	r6, r6
 80007e2:	4283      	cmp	r3, r0
 80007e4:	4637      	mov	r7, r6
 80007e6:	dc04      	bgt.n	80007f2 <__swbuf_r+0x42>
 80007e8:	4621      	mov	r1, r4
 80007ea:	4628      	mov	r0, r5
 80007ec:	f000 f926 	bl	8000a3c <_fflush_r>
 80007f0:	bb30      	cbnz	r0, 8000840 <__swbuf_r+0x90>
 80007f2:	68a3      	ldr	r3, [r4, #8]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	60a3      	str	r3, [r4, #8]
 80007f8:	6823      	ldr	r3, [r4, #0]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	6022      	str	r2, [r4, #0]
 80007fe:	701e      	strb	r6, [r3, #0]
 8000800:	6963      	ldr	r3, [r4, #20]
 8000802:	3001      	adds	r0, #1
 8000804:	4283      	cmp	r3, r0
 8000806:	d004      	beq.n	8000812 <__swbuf_r+0x62>
 8000808:	89a3      	ldrh	r3, [r4, #12]
 800080a:	07db      	lsls	r3, r3, #31
 800080c:	d506      	bpl.n	800081c <__swbuf_r+0x6c>
 800080e:	2e0a      	cmp	r6, #10
 8000810:	d104      	bne.n	800081c <__swbuf_r+0x6c>
 8000812:	4621      	mov	r1, r4
 8000814:	4628      	mov	r0, r5
 8000816:	f000 f911 	bl	8000a3c <_fflush_r>
 800081a:	b988      	cbnz	r0, 8000840 <__swbuf_r+0x90>
 800081c:	4638      	mov	r0, r7
 800081e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <__swbuf_r+0x9c>)
 8000822:	429c      	cmp	r4, r3
 8000824:	d101      	bne.n	800082a <__swbuf_r+0x7a>
 8000826:	68ac      	ldr	r4, [r5, #8]
 8000828:	e7cf      	b.n	80007ca <__swbuf_r+0x1a>
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <__swbuf_r+0xa0>)
 800082c:	429c      	cmp	r4, r3
 800082e:	bf08      	it	eq
 8000830:	68ec      	ldreq	r4, [r5, #12]
 8000832:	e7ca      	b.n	80007ca <__swbuf_r+0x1a>
 8000834:	4621      	mov	r1, r4
 8000836:	4628      	mov	r0, r5
 8000838:	f000 f80c 	bl	8000854 <__swsetup_r>
 800083c:	2800      	cmp	r0, #0
 800083e:	d0cb      	beq.n	80007d8 <__swbuf_r+0x28>
 8000840:	f04f 37ff 	mov.w	r7, #4294967295
 8000844:	e7ea      	b.n	800081c <__swbuf_r+0x6c>
 8000846:	bf00      	nop
 8000848:	0800113c 	.word	0x0800113c
 800084c:	0800115c 	.word	0x0800115c
 8000850:	0800111c 	.word	0x0800111c

08000854 <__swsetup_r>:
 8000854:	4b32      	ldr	r3, [pc, #200]	; (8000920 <__swsetup_r+0xcc>)
 8000856:	b570      	push	{r4, r5, r6, lr}
 8000858:	681d      	ldr	r5, [r3, #0]
 800085a:	4606      	mov	r6, r0
 800085c:	460c      	mov	r4, r1
 800085e:	b125      	cbz	r5, 800086a <__swsetup_r+0x16>
 8000860:	69ab      	ldr	r3, [r5, #24]
 8000862:	b913      	cbnz	r3, 800086a <__swsetup_r+0x16>
 8000864:	4628      	mov	r0, r5
 8000866:	f000 f97d 	bl	8000b64 <__sinit>
 800086a:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <__swsetup_r+0xd0>)
 800086c:	429c      	cmp	r4, r3
 800086e:	d10f      	bne.n	8000890 <__swsetup_r+0x3c>
 8000870:	686c      	ldr	r4, [r5, #4]
 8000872:	89a3      	ldrh	r3, [r4, #12]
 8000874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000878:	0719      	lsls	r1, r3, #28
 800087a:	d42c      	bmi.n	80008d6 <__swsetup_r+0x82>
 800087c:	06dd      	lsls	r5, r3, #27
 800087e:	d411      	bmi.n	80008a4 <__swsetup_r+0x50>
 8000880:	2309      	movs	r3, #9
 8000882:	6033      	str	r3, [r6, #0]
 8000884:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000888:	81a3      	strh	r3, [r4, #12]
 800088a:	f04f 30ff 	mov.w	r0, #4294967295
 800088e:	e03e      	b.n	800090e <__swsetup_r+0xba>
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <__swsetup_r+0xd4>)
 8000892:	429c      	cmp	r4, r3
 8000894:	d101      	bne.n	800089a <__swsetup_r+0x46>
 8000896:	68ac      	ldr	r4, [r5, #8]
 8000898:	e7eb      	b.n	8000872 <__swsetup_r+0x1e>
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <__swsetup_r+0xd8>)
 800089c:	429c      	cmp	r4, r3
 800089e:	bf08      	it	eq
 80008a0:	68ec      	ldreq	r4, [r5, #12]
 80008a2:	e7e6      	b.n	8000872 <__swsetup_r+0x1e>
 80008a4:	0758      	lsls	r0, r3, #29
 80008a6:	d512      	bpl.n	80008ce <__swsetup_r+0x7a>
 80008a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008aa:	b141      	cbz	r1, 80008be <__swsetup_r+0x6a>
 80008ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008b0:	4299      	cmp	r1, r3
 80008b2:	d002      	beq.n	80008ba <__swsetup_r+0x66>
 80008b4:	4630      	mov	r0, r6
 80008b6:	f000 fa5b 	bl	8000d70 <_free_r>
 80008ba:	2300      	movs	r3, #0
 80008bc:	6363      	str	r3, [r4, #52]	; 0x34
 80008be:	89a3      	ldrh	r3, [r4, #12]
 80008c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008c4:	81a3      	strh	r3, [r4, #12]
 80008c6:	2300      	movs	r3, #0
 80008c8:	6063      	str	r3, [r4, #4]
 80008ca:	6923      	ldr	r3, [r4, #16]
 80008cc:	6023      	str	r3, [r4, #0]
 80008ce:	89a3      	ldrh	r3, [r4, #12]
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	81a3      	strh	r3, [r4, #12]
 80008d6:	6923      	ldr	r3, [r4, #16]
 80008d8:	b94b      	cbnz	r3, 80008ee <__swsetup_r+0x9a>
 80008da:	89a3      	ldrh	r3, [r4, #12]
 80008dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008e4:	d003      	beq.n	80008ee <__swsetup_r+0x9a>
 80008e6:	4621      	mov	r1, r4
 80008e8:	4630      	mov	r0, r6
 80008ea:	f000 fa01 	bl	8000cf0 <__smakebuf_r>
 80008ee:	89a0      	ldrh	r0, [r4, #12]
 80008f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008f4:	f010 0301 	ands.w	r3, r0, #1
 80008f8:	d00a      	beq.n	8000910 <__swsetup_r+0xbc>
 80008fa:	2300      	movs	r3, #0
 80008fc:	60a3      	str	r3, [r4, #8]
 80008fe:	6963      	ldr	r3, [r4, #20]
 8000900:	425b      	negs	r3, r3
 8000902:	61a3      	str	r3, [r4, #24]
 8000904:	6923      	ldr	r3, [r4, #16]
 8000906:	b943      	cbnz	r3, 800091a <__swsetup_r+0xc6>
 8000908:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800090c:	d1ba      	bne.n	8000884 <__swsetup_r+0x30>
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	0781      	lsls	r1, r0, #30
 8000912:	bf58      	it	pl
 8000914:	6963      	ldrpl	r3, [r4, #20]
 8000916:	60a3      	str	r3, [r4, #8]
 8000918:	e7f4      	b.n	8000904 <__swsetup_r+0xb0>
 800091a:	2000      	movs	r0, #0
 800091c:	e7f7      	b.n	800090e <__swsetup_r+0xba>
 800091e:	bf00      	nop
 8000920:	20000000 	.word	0x20000000
 8000924:	0800113c 	.word	0x0800113c
 8000928:	0800115c 	.word	0x0800115c
 800092c:	0800111c 	.word	0x0800111c

08000930 <__sflush_r>:
 8000930:	898a      	ldrh	r2, [r1, #12]
 8000932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000936:	4605      	mov	r5, r0
 8000938:	0710      	lsls	r0, r2, #28
 800093a:	460c      	mov	r4, r1
 800093c:	d458      	bmi.n	80009f0 <__sflush_r+0xc0>
 800093e:	684b      	ldr	r3, [r1, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	dc05      	bgt.n	8000950 <__sflush_r+0x20>
 8000944:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000946:	2b00      	cmp	r3, #0
 8000948:	dc02      	bgt.n	8000950 <__sflush_r+0x20>
 800094a:	2000      	movs	r0, #0
 800094c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000952:	2e00      	cmp	r6, #0
 8000954:	d0f9      	beq.n	800094a <__sflush_r+0x1a>
 8000956:	2300      	movs	r3, #0
 8000958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800095c:	682f      	ldr	r7, [r5, #0]
 800095e:	602b      	str	r3, [r5, #0]
 8000960:	d032      	beq.n	80009c8 <__sflush_r+0x98>
 8000962:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000964:	89a3      	ldrh	r3, [r4, #12]
 8000966:	075a      	lsls	r2, r3, #29
 8000968:	d505      	bpl.n	8000976 <__sflush_r+0x46>
 800096a:	6863      	ldr	r3, [r4, #4]
 800096c:	1ac0      	subs	r0, r0, r3
 800096e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000970:	b10b      	cbz	r3, 8000976 <__sflush_r+0x46>
 8000972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000974:	1ac0      	subs	r0, r0, r3
 8000976:	2300      	movs	r3, #0
 8000978:	4602      	mov	r2, r0
 800097a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800097c:	6a21      	ldr	r1, [r4, #32]
 800097e:	4628      	mov	r0, r5
 8000980:	47b0      	blx	r6
 8000982:	1c43      	adds	r3, r0, #1
 8000984:	89a3      	ldrh	r3, [r4, #12]
 8000986:	d106      	bne.n	8000996 <__sflush_r+0x66>
 8000988:	6829      	ldr	r1, [r5, #0]
 800098a:	291d      	cmp	r1, #29
 800098c:	d82c      	bhi.n	80009e8 <__sflush_r+0xb8>
 800098e:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <__sflush_r+0x108>)
 8000990:	40ca      	lsrs	r2, r1
 8000992:	07d6      	lsls	r6, r2, #31
 8000994:	d528      	bpl.n	80009e8 <__sflush_r+0xb8>
 8000996:	2200      	movs	r2, #0
 8000998:	6062      	str	r2, [r4, #4]
 800099a:	04d9      	lsls	r1, r3, #19
 800099c:	6922      	ldr	r2, [r4, #16]
 800099e:	6022      	str	r2, [r4, #0]
 80009a0:	d504      	bpl.n	80009ac <__sflush_r+0x7c>
 80009a2:	1c42      	adds	r2, r0, #1
 80009a4:	d101      	bne.n	80009aa <__sflush_r+0x7a>
 80009a6:	682b      	ldr	r3, [r5, #0]
 80009a8:	b903      	cbnz	r3, 80009ac <__sflush_r+0x7c>
 80009aa:	6560      	str	r0, [r4, #84]	; 0x54
 80009ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009ae:	602f      	str	r7, [r5, #0]
 80009b0:	2900      	cmp	r1, #0
 80009b2:	d0ca      	beq.n	800094a <__sflush_r+0x1a>
 80009b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009b8:	4299      	cmp	r1, r3
 80009ba:	d002      	beq.n	80009c2 <__sflush_r+0x92>
 80009bc:	4628      	mov	r0, r5
 80009be:	f000 f9d7 	bl	8000d70 <_free_r>
 80009c2:	2000      	movs	r0, #0
 80009c4:	6360      	str	r0, [r4, #52]	; 0x34
 80009c6:	e7c1      	b.n	800094c <__sflush_r+0x1c>
 80009c8:	6a21      	ldr	r1, [r4, #32]
 80009ca:	2301      	movs	r3, #1
 80009cc:	4628      	mov	r0, r5
 80009ce:	47b0      	blx	r6
 80009d0:	1c41      	adds	r1, r0, #1
 80009d2:	d1c7      	bne.n	8000964 <__sflush_r+0x34>
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0c4      	beq.n	8000964 <__sflush_r+0x34>
 80009da:	2b1d      	cmp	r3, #29
 80009dc:	d001      	beq.n	80009e2 <__sflush_r+0xb2>
 80009de:	2b16      	cmp	r3, #22
 80009e0:	d101      	bne.n	80009e6 <__sflush_r+0xb6>
 80009e2:	602f      	str	r7, [r5, #0]
 80009e4:	e7b1      	b.n	800094a <__sflush_r+0x1a>
 80009e6:	89a3      	ldrh	r3, [r4, #12]
 80009e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ec:	81a3      	strh	r3, [r4, #12]
 80009ee:	e7ad      	b.n	800094c <__sflush_r+0x1c>
 80009f0:	690f      	ldr	r7, [r1, #16]
 80009f2:	2f00      	cmp	r7, #0
 80009f4:	d0a9      	beq.n	800094a <__sflush_r+0x1a>
 80009f6:	0793      	lsls	r3, r2, #30
 80009f8:	680e      	ldr	r6, [r1, #0]
 80009fa:	bf08      	it	eq
 80009fc:	694b      	ldreq	r3, [r1, #20]
 80009fe:	600f      	str	r7, [r1, #0]
 8000a00:	bf18      	it	ne
 8000a02:	2300      	movne	r3, #0
 8000a04:	eba6 0807 	sub.w	r8, r6, r7
 8000a08:	608b      	str	r3, [r1, #8]
 8000a0a:	f1b8 0f00 	cmp.w	r8, #0
 8000a0e:	dd9c      	ble.n	800094a <__sflush_r+0x1a>
 8000a10:	6a21      	ldr	r1, [r4, #32]
 8000a12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a14:	4643      	mov	r3, r8
 8000a16:	463a      	mov	r2, r7
 8000a18:	4628      	mov	r0, r5
 8000a1a:	47b0      	blx	r6
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	dc06      	bgt.n	8000a2e <__sflush_r+0xfe>
 8000a20:	89a3      	ldrh	r3, [r4, #12]
 8000a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a26:	81a3      	strh	r3, [r4, #12]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	e78e      	b.n	800094c <__sflush_r+0x1c>
 8000a2e:	4407      	add	r7, r0
 8000a30:	eba8 0800 	sub.w	r8, r8, r0
 8000a34:	e7e9      	b.n	8000a0a <__sflush_r+0xda>
 8000a36:	bf00      	nop
 8000a38:	20400001 	.word	0x20400001

08000a3c <_fflush_r>:
 8000a3c:	b538      	push	{r3, r4, r5, lr}
 8000a3e:	690b      	ldr	r3, [r1, #16]
 8000a40:	4605      	mov	r5, r0
 8000a42:	460c      	mov	r4, r1
 8000a44:	b913      	cbnz	r3, 8000a4c <_fflush_r+0x10>
 8000a46:	2500      	movs	r5, #0
 8000a48:	4628      	mov	r0, r5
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	b118      	cbz	r0, 8000a56 <_fflush_r+0x1a>
 8000a4e:	6983      	ldr	r3, [r0, #24]
 8000a50:	b90b      	cbnz	r3, 8000a56 <_fflush_r+0x1a>
 8000a52:	f000 f887 	bl	8000b64 <__sinit>
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <_fflush_r+0x6c>)
 8000a58:	429c      	cmp	r4, r3
 8000a5a:	d11b      	bne.n	8000a94 <_fflush_r+0x58>
 8000a5c:	686c      	ldr	r4, [r5, #4]
 8000a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0ef      	beq.n	8000a46 <_fflush_r+0xa>
 8000a66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a68:	07d0      	lsls	r0, r2, #31
 8000a6a:	d404      	bmi.n	8000a76 <_fflush_r+0x3a>
 8000a6c:	0599      	lsls	r1, r3, #22
 8000a6e:	d402      	bmi.n	8000a76 <_fflush_r+0x3a>
 8000a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a72:	f000 f915 	bl	8000ca0 <__retarget_lock_acquire_recursive>
 8000a76:	4628      	mov	r0, r5
 8000a78:	4621      	mov	r1, r4
 8000a7a:	f7ff ff59 	bl	8000930 <__sflush_r>
 8000a7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a80:	07da      	lsls	r2, r3, #31
 8000a82:	4605      	mov	r5, r0
 8000a84:	d4e0      	bmi.n	8000a48 <_fflush_r+0xc>
 8000a86:	89a3      	ldrh	r3, [r4, #12]
 8000a88:	059b      	lsls	r3, r3, #22
 8000a8a:	d4dd      	bmi.n	8000a48 <_fflush_r+0xc>
 8000a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a8e:	f000 f908 	bl	8000ca2 <__retarget_lock_release_recursive>
 8000a92:	e7d9      	b.n	8000a48 <_fflush_r+0xc>
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <_fflush_r+0x70>)
 8000a96:	429c      	cmp	r4, r3
 8000a98:	d101      	bne.n	8000a9e <_fflush_r+0x62>
 8000a9a:	68ac      	ldr	r4, [r5, #8]
 8000a9c:	e7df      	b.n	8000a5e <_fflush_r+0x22>
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <_fflush_r+0x74>)
 8000aa0:	429c      	cmp	r4, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	68ec      	ldreq	r4, [r5, #12]
 8000aa6:	e7da      	b.n	8000a5e <_fflush_r+0x22>
 8000aa8:	0800113c 	.word	0x0800113c
 8000aac:	0800115c 	.word	0x0800115c
 8000ab0:	0800111c 	.word	0x0800111c

08000ab4 <std>:
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	b510      	push	{r4, lr}
 8000ab8:	4604      	mov	r4, r0
 8000aba:	e9c0 3300 	strd	r3, r3, [r0]
 8000abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ac2:	6083      	str	r3, [r0, #8]
 8000ac4:	8181      	strh	r1, [r0, #12]
 8000ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8000ac8:	81c2      	strh	r2, [r0, #14]
 8000aca:	6183      	str	r3, [r0, #24]
 8000acc:	4619      	mov	r1, r3
 8000ace:	2208      	movs	r2, #8
 8000ad0:	305c      	adds	r0, #92	; 0x5c
 8000ad2:	f7ff fdef 	bl	80006b4 <memset>
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <std+0x38>)
 8000ad8:	6263      	str	r3, [r4, #36]	; 0x24
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <std+0x3c>)
 8000adc:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <std+0x40>)
 8000ae0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <std+0x44>)
 8000ae4:	6224      	str	r4, [r4, #32]
 8000ae6:	6323      	str	r3, [r4, #48]	; 0x30
 8000ae8:	bd10      	pop	{r4, pc}
 8000aea:	bf00      	nop
 8000aec:	08000f51 	.word	0x08000f51
 8000af0:	08000f73 	.word	0x08000f73
 8000af4:	08000fab 	.word	0x08000fab
 8000af8:	08000fcf 	.word	0x08000fcf

08000afc <_cleanup_r>:
 8000afc:	4901      	ldr	r1, [pc, #4]	; (8000b04 <_cleanup_r+0x8>)
 8000afe:	f000 b8af 	b.w	8000c60 <_fwalk_reent>
 8000b02:	bf00      	nop
 8000b04:	08000a3d 	.word	0x08000a3d

08000b08 <__sfmoreglue>:
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	2268      	movs	r2, #104	; 0x68
 8000b0c:	1e4d      	subs	r5, r1, #1
 8000b0e:	4355      	muls	r5, r2
 8000b10:	460e      	mov	r6, r1
 8000b12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b16:	f000 f997 	bl	8000e48 <_malloc_r>
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	b140      	cbz	r0, 8000b30 <__sfmoreglue+0x28>
 8000b1e:	2100      	movs	r1, #0
 8000b20:	e9c0 1600 	strd	r1, r6, [r0]
 8000b24:	300c      	adds	r0, #12
 8000b26:	60a0      	str	r0, [r4, #8]
 8000b28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b2c:	f7ff fdc2 	bl	80006b4 <memset>
 8000b30:	4620      	mov	r0, r4
 8000b32:	bd70      	pop	{r4, r5, r6, pc}

08000b34 <__sfp_lock_acquire>:
 8000b34:	4801      	ldr	r0, [pc, #4]	; (8000b3c <__sfp_lock_acquire+0x8>)
 8000b36:	f000 b8b3 	b.w	8000ca0 <__retarget_lock_acquire_recursive>
 8000b3a:	bf00      	nop
 8000b3c:	20000085 	.word	0x20000085

08000b40 <__sfp_lock_release>:
 8000b40:	4801      	ldr	r0, [pc, #4]	; (8000b48 <__sfp_lock_release+0x8>)
 8000b42:	f000 b8ae 	b.w	8000ca2 <__retarget_lock_release_recursive>
 8000b46:	bf00      	nop
 8000b48:	20000085 	.word	0x20000085

08000b4c <__sinit_lock_acquire>:
 8000b4c:	4801      	ldr	r0, [pc, #4]	; (8000b54 <__sinit_lock_acquire+0x8>)
 8000b4e:	f000 b8a7 	b.w	8000ca0 <__retarget_lock_acquire_recursive>
 8000b52:	bf00      	nop
 8000b54:	20000086 	.word	0x20000086

08000b58 <__sinit_lock_release>:
 8000b58:	4801      	ldr	r0, [pc, #4]	; (8000b60 <__sinit_lock_release+0x8>)
 8000b5a:	f000 b8a2 	b.w	8000ca2 <__retarget_lock_release_recursive>
 8000b5e:	bf00      	nop
 8000b60:	20000086 	.word	0x20000086

08000b64 <__sinit>:
 8000b64:	b510      	push	{r4, lr}
 8000b66:	4604      	mov	r4, r0
 8000b68:	f7ff fff0 	bl	8000b4c <__sinit_lock_acquire>
 8000b6c:	69a3      	ldr	r3, [r4, #24]
 8000b6e:	b11b      	cbz	r3, 8000b78 <__sinit+0x14>
 8000b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b74:	f7ff bff0 	b.w	8000b58 <__sinit_lock_release>
 8000b78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b7c:	6523      	str	r3, [r4, #80]	; 0x50
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <__sinit+0x68>)
 8000b80:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <__sinit+0x6c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	bf04      	itt	eq
 8000b8a:	2301      	moveq	r3, #1
 8000b8c:	61a3      	streq	r3, [r4, #24]
 8000b8e:	4620      	mov	r0, r4
 8000b90:	f000 f820 	bl	8000bd4 <__sfp>
 8000b94:	6060      	str	r0, [r4, #4]
 8000b96:	4620      	mov	r0, r4
 8000b98:	f000 f81c 	bl	8000bd4 <__sfp>
 8000b9c:	60a0      	str	r0, [r4, #8]
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	f000 f818 	bl	8000bd4 <__sfp>
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60e0      	str	r0, [r4, #12]
 8000ba8:	2104      	movs	r1, #4
 8000baa:	6860      	ldr	r0, [r4, #4]
 8000bac:	f7ff ff82 	bl	8000ab4 <std>
 8000bb0:	68a0      	ldr	r0, [r4, #8]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2109      	movs	r1, #9
 8000bb6:	f7ff ff7d 	bl	8000ab4 <std>
 8000bba:	68e0      	ldr	r0, [r4, #12]
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	2112      	movs	r1, #18
 8000bc0:	f7ff ff78 	bl	8000ab4 <std>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61a3      	str	r3, [r4, #24]
 8000bc8:	e7d2      	b.n	8000b70 <__sinit+0xc>
 8000bca:	bf00      	nop
 8000bcc:	08001118 	.word	0x08001118
 8000bd0:	08000afd 	.word	0x08000afd

08000bd4 <__sfp>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	4607      	mov	r7, r0
 8000bd8:	f7ff ffac 	bl	8000b34 <__sfp_lock_acquire>
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <__sfp+0x84>)
 8000bde:	681e      	ldr	r6, [r3, #0]
 8000be0:	69b3      	ldr	r3, [r6, #24]
 8000be2:	b913      	cbnz	r3, 8000bea <__sfp+0x16>
 8000be4:	4630      	mov	r0, r6
 8000be6:	f7ff ffbd 	bl	8000b64 <__sinit>
 8000bea:	3648      	adds	r6, #72	; 0x48
 8000bec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	d503      	bpl.n	8000bfc <__sfp+0x28>
 8000bf4:	6833      	ldr	r3, [r6, #0]
 8000bf6:	b30b      	cbz	r3, 8000c3c <__sfp+0x68>
 8000bf8:	6836      	ldr	r6, [r6, #0]
 8000bfa:	e7f7      	b.n	8000bec <__sfp+0x18>
 8000bfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c00:	b9d5      	cbnz	r5, 8000c38 <__sfp+0x64>
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <__sfp+0x88>)
 8000c04:	60e3      	str	r3, [r4, #12]
 8000c06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c0a:	6665      	str	r5, [r4, #100]	; 0x64
 8000c0c:	f000 f847 	bl	8000c9e <__retarget_lock_init_recursive>
 8000c10:	f7ff ff96 	bl	8000b40 <__sfp_lock_release>
 8000c14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c1c:	6025      	str	r5, [r4, #0]
 8000c1e:	61a5      	str	r5, [r4, #24]
 8000c20:	2208      	movs	r2, #8
 8000c22:	4629      	mov	r1, r5
 8000c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c28:	f7ff fd44 	bl	80006b4 <memset>
 8000c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c34:	4620      	mov	r0, r4
 8000c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c38:	3468      	adds	r4, #104	; 0x68
 8000c3a:	e7d9      	b.n	8000bf0 <__sfp+0x1c>
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4638      	mov	r0, r7
 8000c40:	f7ff ff62 	bl	8000b08 <__sfmoreglue>
 8000c44:	4604      	mov	r4, r0
 8000c46:	6030      	str	r0, [r6, #0]
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d1d5      	bne.n	8000bf8 <__sfp+0x24>
 8000c4c:	f7ff ff78 	bl	8000b40 <__sfp_lock_release>
 8000c50:	230c      	movs	r3, #12
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	e7ee      	b.n	8000c34 <__sfp+0x60>
 8000c56:	bf00      	nop
 8000c58:	08001118 	.word	0x08001118
 8000c5c:	ffff0001 	.word	0xffff0001

08000c60 <_fwalk_reent>:
 8000c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c64:	4606      	mov	r6, r0
 8000c66:	4688      	mov	r8, r1
 8000c68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c72:	f1b9 0901 	subs.w	r9, r9, #1
 8000c76:	d505      	bpl.n	8000c84 <_fwalk_reent+0x24>
 8000c78:	6824      	ldr	r4, [r4, #0]
 8000c7a:	2c00      	cmp	r4, #0
 8000c7c:	d1f7      	bne.n	8000c6e <_fwalk_reent+0xe>
 8000c7e:	4638      	mov	r0, r7
 8000c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c84:	89ab      	ldrh	r3, [r5, #12]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d907      	bls.n	8000c9a <_fwalk_reent+0x3a>
 8000c8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	d003      	beq.n	8000c9a <_fwalk_reent+0x3a>
 8000c92:	4629      	mov	r1, r5
 8000c94:	4630      	mov	r0, r6
 8000c96:	47c0      	blx	r8
 8000c98:	4307      	orrs	r7, r0
 8000c9a:	3568      	adds	r5, #104	; 0x68
 8000c9c:	e7e9      	b.n	8000c72 <_fwalk_reent+0x12>

08000c9e <__retarget_lock_init_recursive>:
 8000c9e:	4770      	bx	lr

08000ca0 <__retarget_lock_acquire_recursive>:
 8000ca0:	4770      	bx	lr

08000ca2 <__retarget_lock_release_recursive>:
 8000ca2:	4770      	bx	lr

08000ca4 <__swhatbuf_r>:
 8000ca4:	b570      	push	{r4, r5, r6, lr}
 8000ca6:	460e      	mov	r6, r1
 8000ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cac:	2900      	cmp	r1, #0
 8000cae:	b096      	sub	sp, #88	; 0x58
 8000cb0:	4614      	mov	r4, r2
 8000cb2:	461d      	mov	r5, r3
 8000cb4:	da08      	bge.n	8000cc8 <__swhatbuf_r+0x24>
 8000cb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	602a      	str	r2, [r5, #0]
 8000cbe:	061a      	lsls	r2, r3, #24
 8000cc0:	d410      	bmi.n	8000ce4 <__swhatbuf_r+0x40>
 8000cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc6:	e00e      	b.n	8000ce6 <__swhatbuf_r+0x42>
 8000cc8:	466a      	mov	r2, sp
 8000cca:	f000 f9a7 	bl	800101c <_fstat_r>
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	dbf1      	blt.n	8000cb6 <__swhatbuf_r+0x12>
 8000cd2:	9a01      	ldr	r2, [sp, #4]
 8000cd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000cdc:	425a      	negs	r2, r3
 8000cde:	415a      	adcs	r2, r3
 8000ce0:	602a      	str	r2, [r5, #0]
 8000ce2:	e7ee      	b.n	8000cc2 <__swhatbuf_r+0x1e>
 8000ce4:	2340      	movs	r3, #64	; 0x40
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	6023      	str	r3, [r4, #0]
 8000cea:	b016      	add	sp, #88	; 0x58
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cf0 <__smakebuf_r>:
 8000cf0:	898b      	ldrh	r3, [r1, #12]
 8000cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cf4:	079d      	lsls	r5, r3, #30
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	d507      	bpl.n	8000d0c <__smakebuf_r+0x1c>
 8000cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d00:	6023      	str	r3, [r4, #0]
 8000d02:	6123      	str	r3, [r4, #16]
 8000d04:	2301      	movs	r3, #1
 8000d06:	6163      	str	r3, [r4, #20]
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}
 8000d0c:	ab01      	add	r3, sp, #4
 8000d0e:	466a      	mov	r2, sp
 8000d10:	f7ff ffc8 	bl	8000ca4 <__swhatbuf_r>
 8000d14:	9900      	ldr	r1, [sp, #0]
 8000d16:	4605      	mov	r5, r0
 8000d18:	4630      	mov	r0, r6
 8000d1a:	f000 f895 	bl	8000e48 <_malloc_r>
 8000d1e:	b948      	cbnz	r0, 8000d34 <__smakebuf_r+0x44>
 8000d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d24:	059a      	lsls	r2, r3, #22
 8000d26:	d4ef      	bmi.n	8000d08 <__smakebuf_r+0x18>
 8000d28:	f023 0303 	bic.w	r3, r3, #3
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	81a3      	strh	r3, [r4, #12]
 8000d32:	e7e3      	b.n	8000cfc <__smakebuf_r+0xc>
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <__smakebuf_r+0x7c>)
 8000d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d38:	89a3      	ldrh	r3, [r4, #12]
 8000d3a:	6020      	str	r0, [r4, #0]
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	81a3      	strh	r3, [r4, #12]
 8000d42:	9b00      	ldr	r3, [sp, #0]
 8000d44:	6163      	str	r3, [r4, #20]
 8000d46:	9b01      	ldr	r3, [sp, #4]
 8000d48:	6120      	str	r0, [r4, #16]
 8000d4a:	b15b      	cbz	r3, 8000d64 <__smakebuf_r+0x74>
 8000d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d50:	4630      	mov	r0, r6
 8000d52:	f000 f975 	bl	8001040 <_isatty_r>
 8000d56:	b128      	cbz	r0, 8000d64 <__smakebuf_r+0x74>
 8000d58:	89a3      	ldrh	r3, [r4, #12]
 8000d5a:	f023 0303 	bic.w	r3, r3, #3
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	81a3      	strh	r3, [r4, #12]
 8000d64:	89a0      	ldrh	r0, [r4, #12]
 8000d66:	4305      	orrs	r5, r0
 8000d68:	81a5      	strh	r5, [r4, #12]
 8000d6a:	e7cd      	b.n	8000d08 <__smakebuf_r+0x18>
 8000d6c:	08000afd 	.word	0x08000afd

08000d70 <_free_r>:
 8000d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d044      	beq.n	8000e00 <_free_r+0x90>
 8000d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d7a:	9001      	str	r0, [sp, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8000d82:	bfb8      	it	lt
 8000d84:	18e4      	addlt	r4, r4, r3
 8000d86:	f000 f97d 	bl	8001084 <__malloc_lock>
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <_free_r+0x94>)
 8000d8c:	9801      	ldr	r0, [sp, #4]
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	b933      	cbnz	r3, 8000da0 <_free_r+0x30>
 8000d92:	6063      	str	r3, [r4, #4]
 8000d94:	6014      	str	r4, [r2, #0]
 8000d96:	b003      	add	sp, #12
 8000d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d9c:	f000 b978 	b.w	8001090 <__malloc_unlock>
 8000da0:	42a3      	cmp	r3, r4
 8000da2:	d908      	bls.n	8000db6 <_free_r+0x46>
 8000da4:	6825      	ldr	r5, [r4, #0]
 8000da6:	1961      	adds	r1, r4, r5
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf01      	itttt	eq
 8000dac:	6819      	ldreq	r1, [r3, #0]
 8000dae:	685b      	ldreq	r3, [r3, #4]
 8000db0:	1949      	addeq	r1, r1, r5
 8000db2:	6021      	streq	r1, [r4, #0]
 8000db4:	e7ed      	b.n	8000d92 <_free_r+0x22>
 8000db6:	461a      	mov	r2, r3
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	b10b      	cbz	r3, 8000dc0 <_free_r+0x50>
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d9fa      	bls.n	8000db6 <_free_r+0x46>
 8000dc0:	6811      	ldr	r1, [r2, #0]
 8000dc2:	1855      	adds	r5, r2, r1
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	d10b      	bne.n	8000de0 <_free_r+0x70>
 8000dc8:	6824      	ldr	r4, [r4, #0]
 8000dca:	4421      	add	r1, r4
 8000dcc:	1854      	adds	r4, r2, r1
 8000dce:	42a3      	cmp	r3, r4
 8000dd0:	6011      	str	r1, [r2, #0]
 8000dd2:	d1e0      	bne.n	8000d96 <_free_r+0x26>
 8000dd4:	681c      	ldr	r4, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	6053      	str	r3, [r2, #4]
 8000dda:	4421      	add	r1, r4
 8000ddc:	6011      	str	r1, [r2, #0]
 8000dde:	e7da      	b.n	8000d96 <_free_r+0x26>
 8000de0:	d902      	bls.n	8000de8 <_free_r+0x78>
 8000de2:	230c      	movs	r3, #12
 8000de4:	6003      	str	r3, [r0, #0]
 8000de6:	e7d6      	b.n	8000d96 <_free_r+0x26>
 8000de8:	6825      	ldr	r5, [r4, #0]
 8000dea:	1961      	adds	r1, r4, r5
 8000dec:	428b      	cmp	r3, r1
 8000dee:	bf04      	itt	eq
 8000df0:	6819      	ldreq	r1, [r3, #0]
 8000df2:	685b      	ldreq	r3, [r3, #4]
 8000df4:	6063      	str	r3, [r4, #4]
 8000df6:	bf04      	itt	eq
 8000df8:	1949      	addeq	r1, r1, r5
 8000dfa:	6021      	streq	r1, [r4, #0]
 8000dfc:	6054      	str	r4, [r2, #4]
 8000dfe:	e7ca      	b.n	8000d96 <_free_r+0x26>
 8000e00:	b003      	add	sp, #12
 8000e02:	bd30      	pop	{r4, r5, pc}
 8000e04:	20000088 	.word	0x20000088

08000e08 <sbrk_aligned>:
 8000e08:	b570      	push	{r4, r5, r6, lr}
 8000e0a:	4e0e      	ldr	r6, [pc, #56]	; (8000e44 <sbrk_aligned+0x3c>)
 8000e0c:	460c      	mov	r4, r1
 8000e0e:	6831      	ldr	r1, [r6, #0]
 8000e10:	4605      	mov	r5, r0
 8000e12:	b911      	cbnz	r1, 8000e1a <sbrk_aligned+0x12>
 8000e14:	f000 f88c 	bl	8000f30 <_sbrk_r>
 8000e18:	6030      	str	r0, [r6, #0]
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f000 f887 	bl	8000f30 <_sbrk_r>
 8000e22:	1c43      	adds	r3, r0, #1
 8000e24:	d00a      	beq.n	8000e3c <sbrk_aligned+0x34>
 8000e26:	1cc4      	adds	r4, r0, #3
 8000e28:	f024 0403 	bic.w	r4, r4, #3
 8000e2c:	42a0      	cmp	r0, r4
 8000e2e:	d007      	beq.n	8000e40 <sbrk_aligned+0x38>
 8000e30:	1a21      	subs	r1, r4, r0
 8000e32:	4628      	mov	r0, r5
 8000e34:	f000 f87c 	bl	8000f30 <_sbrk_r>
 8000e38:	3001      	adds	r0, #1
 8000e3a:	d101      	bne.n	8000e40 <sbrk_aligned+0x38>
 8000e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8000e40:	4620      	mov	r0, r4
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
 8000e44:	2000008c 	.word	0x2000008c

08000e48 <_malloc_r>:
 8000e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e4c:	1ccd      	adds	r5, r1, #3
 8000e4e:	f025 0503 	bic.w	r5, r5, #3
 8000e52:	3508      	adds	r5, #8
 8000e54:	2d0c      	cmp	r5, #12
 8000e56:	bf38      	it	cc
 8000e58:	250c      	movcc	r5, #12
 8000e5a:	2d00      	cmp	r5, #0
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	db01      	blt.n	8000e64 <_malloc_r+0x1c>
 8000e60:	42a9      	cmp	r1, r5
 8000e62:	d905      	bls.n	8000e70 <_malloc_r+0x28>
 8000e64:	230c      	movs	r3, #12
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	2600      	movs	r6, #0
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e70:	4e2e      	ldr	r6, [pc, #184]	; (8000f2c <_malloc_r+0xe4>)
 8000e72:	f000 f907 	bl	8001084 <__malloc_lock>
 8000e76:	6833      	ldr	r3, [r6, #0]
 8000e78:	461c      	mov	r4, r3
 8000e7a:	bb34      	cbnz	r4, 8000eca <_malloc_r+0x82>
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	4638      	mov	r0, r7
 8000e80:	f7ff ffc2 	bl	8000e08 <sbrk_aligned>
 8000e84:	1c43      	adds	r3, r0, #1
 8000e86:	4604      	mov	r4, r0
 8000e88:	d14d      	bne.n	8000f26 <_malloc_r+0xde>
 8000e8a:	6834      	ldr	r4, [r6, #0]
 8000e8c:	4626      	mov	r6, r4
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d140      	bne.n	8000f14 <_malloc_r+0xcc>
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	4631      	mov	r1, r6
 8000e96:	4638      	mov	r0, r7
 8000e98:	eb04 0803 	add.w	r8, r4, r3
 8000e9c:	f000 f848 	bl	8000f30 <_sbrk_r>
 8000ea0:	4580      	cmp	r8, r0
 8000ea2:	d13a      	bne.n	8000f1a <_malloc_r+0xd2>
 8000ea4:	6821      	ldr	r1, [r4, #0]
 8000ea6:	3503      	adds	r5, #3
 8000ea8:	1a6d      	subs	r5, r5, r1
 8000eaa:	f025 0503 	bic.w	r5, r5, #3
 8000eae:	3508      	adds	r5, #8
 8000eb0:	2d0c      	cmp	r5, #12
 8000eb2:	bf38      	it	cc
 8000eb4:	250c      	movcc	r5, #12
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	4638      	mov	r0, r7
 8000eba:	f7ff ffa5 	bl	8000e08 <sbrk_aligned>
 8000ebe:	3001      	adds	r0, #1
 8000ec0:	d02b      	beq.n	8000f1a <_malloc_r+0xd2>
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	442b      	add	r3, r5
 8000ec6:	6023      	str	r3, [r4, #0]
 8000ec8:	e00e      	b.n	8000ee8 <_malloc_r+0xa0>
 8000eca:	6822      	ldr	r2, [r4, #0]
 8000ecc:	1b52      	subs	r2, r2, r5
 8000ece:	d41e      	bmi.n	8000f0e <_malloc_r+0xc6>
 8000ed0:	2a0b      	cmp	r2, #11
 8000ed2:	d916      	bls.n	8000f02 <_malloc_r+0xba>
 8000ed4:	1961      	adds	r1, r4, r5
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	6025      	str	r5, [r4, #0]
 8000eda:	bf18      	it	ne
 8000edc:	6059      	strne	r1, [r3, #4]
 8000ede:	6863      	ldr	r3, [r4, #4]
 8000ee0:	bf08      	it	eq
 8000ee2:	6031      	streq	r1, [r6, #0]
 8000ee4:	5162      	str	r2, [r4, r5]
 8000ee6:	604b      	str	r3, [r1, #4]
 8000ee8:	4638      	mov	r0, r7
 8000eea:	f104 060b 	add.w	r6, r4, #11
 8000eee:	f000 f8cf 	bl	8001090 <__malloc_unlock>
 8000ef2:	f026 0607 	bic.w	r6, r6, #7
 8000ef6:	1d23      	adds	r3, r4, #4
 8000ef8:	1af2      	subs	r2, r6, r3
 8000efa:	d0b6      	beq.n	8000e6a <_malloc_r+0x22>
 8000efc:	1b9b      	subs	r3, r3, r6
 8000efe:	50a3      	str	r3, [r4, r2]
 8000f00:	e7b3      	b.n	8000e6a <_malloc_r+0x22>
 8000f02:	6862      	ldr	r2, [r4, #4]
 8000f04:	42a3      	cmp	r3, r4
 8000f06:	bf0c      	ite	eq
 8000f08:	6032      	streq	r2, [r6, #0]
 8000f0a:	605a      	strne	r2, [r3, #4]
 8000f0c:	e7ec      	b.n	8000ee8 <_malloc_r+0xa0>
 8000f0e:	4623      	mov	r3, r4
 8000f10:	6864      	ldr	r4, [r4, #4]
 8000f12:	e7b2      	b.n	8000e7a <_malloc_r+0x32>
 8000f14:	4634      	mov	r4, r6
 8000f16:	6876      	ldr	r6, [r6, #4]
 8000f18:	e7b9      	b.n	8000e8e <_malloc_r+0x46>
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4638      	mov	r0, r7
 8000f20:	f000 f8b6 	bl	8001090 <__malloc_unlock>
 8000f24:	e7a1      	b.n	8000e6a <_malloc_r+0x22>
 8000f26:	6025      	str	r5, [r4, #0]
 8000f28:	e7de      	b.n	8000ee8 <_malloc_r+0xa0>
 8000f2a:	bf00      	nop
 8000f2c:	20000088 	.word	0x20000088

08000f30 <_sbrk_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	4d06      	ldr	r5, [pc, #24]	; (8000f4c <_sbrk_r+0x1c>)
 8000f34:	2300      	movs	r3, #0
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	602b      	str	r3, [r5, #0]
 8000f3c:	f7ff fb30 	bl	80005a0 <_sbrk>
 8000f40:	1c43      	adds	r3, r0, #1
 8000f42:	d102      	bne.n	8000f4a <_sbrk_r+0x1a>
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	b103      	cbz	r3, 8000f4a <_sbrk_r+0x1a>
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}
 8000f4c:	20000090 	.word	0x20000090

08000f50 <__sread>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	460c      	mov	r4, r1
 8000f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f58:	f000 f8a0 	bl	800109c <_read_r>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	bfab      	itete	ge
 8000f60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f62:	89a3      	ldrhlt	r3, [r4, #12]
 8000f64:	181b      	addge	r3, r3, r0
 8000f66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f6a:	bfac      	ite	ge
 8000f6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f6e:	81a3      	strhlt	r3, [r4, #12]
 8000f70:	bd10      	pop	{r4, pc}

08000f72 <__swrite>:
 8000f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f76:	461f      	mov	r7, r3
 8000f78:	898b      	ldrh	r3, [r1, #12]
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	4605      	mov	r5, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	4616      	mov	r6, r2
 8000f82:	d505      	bpl.n	8000f90 <__swrite+0x1e>
 8000f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f88:	2302      	movs	r3, #2
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f000 f868 	bl	8001060 <_lseek_r>
 8000f90:	89a3      	ldrh	r3, [r4, #12]
 8000f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f9a:	81a3      	strh	r3, [r4, #12]
 8000f9c:	4632      	mov	r2, r6
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa6:	f000 b817 	b.w	8000fd8 <_write_r>

08000faa <__sseek>:
 8000faa:	b510      	push	{r4, lr}
 8000fac:	460c      	mov	r4, r1
 8000fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fb2:	f000 f855 	bl	8001060 <_lseek_r>
 8000fb6:	1c43      	adds	r3, r0, #1
 8000fb8:	89a3      	ldrh	r3, [r4, #12]
 8000fba:	bf15      	itete	ne
 8000fbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fc6:	81a3      	strheq	r3, [r4, #12]
 8000fc8:	bf18      	it	ne
 8000fca:	81a3      	strhne	r3, [r4, #12]
 8000fcc:	bd10      	pop	{r4, pc}

08000fce <__sclose>:
 8000fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fd2:	f000 b813 	b.w	8000ffc <_close_r>
	...

08000fd8 <_write_r>:
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	4d07      	ldr	r5, [pc, #28]	; (8000ff8 <_write_r+0x20>)
 8000fdc:	4604      	mov	r4, r0
 8000fde:	4608      	mov	r0, r1
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	602a      	str	r2, [r5, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f7ff fa89 	bl	80004fe <_write>
 8000fec:	1c43      	adds	r3, r0, #1
 8000fee:	d102      	bne.n	8000ff6 <_write_r+0x1e>
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	b103      	cbz	r3, 8000ff6 <_write_r+0x1e>
 8000ff4:	6023      	str	r3, [r4, #0]
 8000ff6:	bd38      	pop	{r3, r4, r5, pc}
 8000ff8:	20000090 	.word	0x20000090

08000ffc <_close_r>:
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4d06      	ldr	r5, [pc, #24]	; (8001018 <_close_r+0x1c>)
 8001000:	2300      	movs	r3, #0
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	f7ff fa95 	bl	8000536 <_close>
 800100c:	1c43      	adds	r3, r0, #1
 800100e:	d102      	bne.n	8001016 <_close_r+0x1a>
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	b103      	cbz	r3, 8001016 <_close_r+0x1a>
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	bd38      	pop	{r3, r4, r5, pc}
 8001018:	20000090 	.word	0x20000090

0800101c <_fstat_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d07      	ldr	r5, [pc, #28]	; (800103c <_fstat_r+0x20>)
 8001020:	2300      	movs	r3, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	4611      	mov	r1, r2
 8001028:	602b      	str	r3, [r5, #0]
 800102a:	f7ff fa90 	bl	800054e <_fstat>
 800102e:	1c43      	adds	r3, r0, #1
 8001030:	d102      	bne.n	8001038 <_fstat_r+0x1c>
 8001032:	682b      	ldr	r3, [r5, #0]
 8001034:	b103      	cbz	r3, 8001038 <_fstat_r+0x1c>
 8001036:	6023      	str	r3, [r4, #0]
 8001038:	bd38      	pop	{r3, r4, r5, pc}
 800103a:	bf00      	nop
 800103c:	20000090 	.word	0x20000090

08001040 <_isatty_r>:
 8001040:	b538      	push	{r3, r4, r5, lr}
 8001042:	4d06      	ldr	r5, [pc, #24]	; (800105c <_isatty_r+0x1c>)
 8001044:	2300      	movs	r3, #0
 8001046:	4604      	mov	r4, r0
 8001048:	4608      	mov	r0, r1
 800104a:	602b      	str	r3, [r5, #0]
 800104c:	f7ff fa8f 	bl	800056e <_isatty>
 8001050:	1c43      	adds	r3, r0, #1
 8001052:	d102      	bne.n	800105a <_isatty_r+0x1a>
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	b103      	cbz	r3, 800105a <_isatty_r+0x1a>
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	20000090 	.word	0x20000090

08001060 <_lseek_r>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4d07      	ldr	r5, [pc, #28]	; (8001080 <_lseek_r+0x20>)
 8001064:	4604      	mov	r4, r0
 8001066:	4608      	mov	r0, r1
 8001068:	4611      	mov	r1, r2
 800106a:	2200      	movs	r2, #0
 800106c:	602a      	str	r2, [r5, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	f7ff fa88 	bl	8000584 <_lseek>
 8001074:	1c43      	adds	r3, r0, #1
 8001076:	d102      	bne.n	800107e <_lseek_r+0x1e>
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	b103      	cbz	r3, 800107e <_lseek_r+0x1e>
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	bd38      	pop	{r3, r4, r5, pc}
 8001080:	20000090 	.word	0x20000090

08001084 <__malloc_lock>:
 8001084:	4801      	ldr	r0, [pc, #4]	; (800108c <__malloc_lock+0x8>)
 8001086:	f7ff be0b 	b.w	8000ca0 <__retarget_lock_acquire_recursive>
 800108a:	bf00      	nop
 800108c:	20000084 	.word	0x20000084

08001090 <__malloc_unlock>:
 8001090:	4801      	ldr	r0, [pc, #4]	; (8001098 <__malloc_unlock+0x8>)
 8001092:	f7ff be06 	b.w	8000ca2 <__retarget_lock_release_recursive>
 8001096:	bf00      	nop
 8001098:	20000084 	.word	0x20000084

0800109c <_read_r>:
 800109c:	b538      	push	{r3, r4, r5, lr}
 800109e:	4d07      	ldr	r5, [pc, #28]	; (80010bc <_read_r+0x20>)
 80010a0:	4604      	mov	r4, r0
 80010a2:	4608      	mov	r0, r1
 80010a4:	4611      	mov	r1, r2
 80010a6:	2200      	movs	r2, #0
 80010a8:	602a      	str	r2, [r5, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	f7ff fa0a 	bl	80004c4 <_read>
 80010b0:	1c43      	adds	r3, r0, #1
 80010b2:	d102      	bne.n	80010ba <_read_r+0x1e>
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	b103      	cbz	r3, 80010ba <_read_r+0x1e>
 80010b8:	6023      	str	r3, [r4, #0]
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
 80010bc:	20000090 	.word	0x20000090

080010c0 <_init>:
 80010c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c2:	bf00      	nop
 80010c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010c6:	bc08      	pop	{r3}
 80010c8:	469e      	mov	lr, r3
 80010ca:	4770      	bx	lr

080010cc <_fini>:
 80010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ce:	bf00      	nop
 80010d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010d2:	bc08      	pop	{r3}
 80010d4:	469e      	mov	lr, r3
 80010d6:	4770      	bx	lr
