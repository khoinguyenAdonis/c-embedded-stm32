/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
typedef struct {
	uint8_t 	user_id;
	uint16_t	remain_time;
	uint8_t		has_scanner[10];
}TestQueueStruct_t;
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
uint32_t count = 0;
#define MAX_TIMEOUT			0xFFFFFFFF
#define QUEUE_DEMO_INTERGER	0
#define QUEUE_DEMO_POINTER 0
#define QUEUE_DEMO_STRUCT 1
static uint32_t data = 5;
static uint32_t recv = 0;
/* USER CODE END Variables */
osThreadId queueProducerHandle;
uint32_t queueProducerBuffer[ 256 ];
osStaticThreadDef_t queueProducerControlBlock;
osThreadId queuCustomerHandle;
uint32_t queuCustomerBuffer[ 256 ];
osStaticThreadDef_t queuCustomerControlBlock;
osMessageQId myQueueHandle;
uint8_t myQueueBuffer[ 10 * sizeof( uint32_t ) ];
osStaticMessageQDef_t myQueueControlBlock;
osTimerId myTimer01Handle;
osStaticTimerDef_t myTimer01ControlBlock;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void QueueProducerRun(void const * argument);
void QueuCustomerRun(void const * argument);
void Callback01(void const * argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* GetTimerTaskMemory prototype (linked to static allocation support) */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
}
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
  /* place for user code */
}
/* USER CODE END GET_TIMER_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerStaticDef(myTimer01, Callback01, &myTimer01ControlBlock);
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue */
  osMessageQStaticDef(myQueue, 10, uint32_t, myQueueBuffer, &myQueueControlBlock);
  myQueueHandle = osMessageCreate(osMessageQ(myQueue), NULL);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of queueProducer */
  osThreadStaticDef(queueProducer, QueueProducerRun, osPriorityNormal, 0, 256, queueProducerBuffer, &queueProducerControlBlock);
  queueProducerHandle = osThreadCreate(osThread(queueProducer), NULL);

  /* definition and creation of queuCustomer */
  osThreadStaticDef(queuCustomer, QueuCustomerRun, osPriorityIdle, 0, 256, queuCustomerBuffer, &queuCustomerControlBlock);
  queuCustomerHandle = osThreadCreate(osThread(queuCustomer), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}

/* USER CODE BEGIN Header_QueueProducerRun */
/**

  * @brief  Function implementing the queueProducer thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_QueueProducerRun */
void QueueProducerRun(void const * argument)
{
  /* USER CODE BEGIN QueueProducerRun */

  /* Infinite loop */
  for(;;)
  {
#if QUEUE_DEMO_INTERGER
	  osMessagePut(myQueueHandle,data, MAX_TIMEOUT);
#endif



#if QUEUE_DEMO_POINTER
	  uint32_t *ptr;
	  ptr = (uint32_t)&data;
	  osMessagePut(myQueueHandle,ptr, MAX_TIMEOUT);
#endif



#if QUEUE_DEMO_STRUCT
	  TestQueueStruct_t stranmitcustomer;
	  stranmitcustomer.user_id = 122;
	  stranmitcustomer.has_scanner[10] = "ok";
	  osMessagePut(myQueueHandle,(uint32_t)&stranmitcustomer, MAX_TIMEOUT);
#endif
    osDelay(200);
  }
  /* USER CODE END QueueProducerRun */
}

/* USER CODE BEGIN Header_QueuCustomerRun */
/**
* @brief Function implementing the queuCustomer thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_QueuCustomerRun */
void QueuCustomerRun(void const * argument)
{
  /* USER CODE BEGIN QueuCustomerRun */

	osEvent ret;
  /* Infinite loop */
  for(;;)
  {
#if QUEUE_DEMO_INTERGER

	ret = osMessageGet(myQueueHandle,MAX_TIMEOUT);
//	if (ret.status == osOK)
	{
		recv = ret.value.v;
	}
#endif



#if QUEUE_DEMO_POINTER

	ret = osMessageGet(myQueueHandle,MAX_TIMEOUT);
	recv = *((uint32_t*)ret.value.v); // ret.value.v kieu void nen doi ve uint32_t
#endif
#if QUEUE_DEMO_STRUCT
	TestQueueStruct_t recvcustomer;
	ret = osMessageGet(myQueueHandle,MAX_TIMEOUT);
	memcpy(&recvcustomer,ret.value.v,sizeof(TestQueueStruct_t));
#endif
    osDelay(300);
  }
  /* USER CODE END QueuCustomerRun */
}

/* Callback01 function */
void Callback01(void const * argument)
{
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */
