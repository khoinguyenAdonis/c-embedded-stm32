
FREERTOS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d0  080055d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d8  080055d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d8  080055d8  000155d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080055e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000045f8  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004608  20004608  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011aeb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cbc  00000000  00000000  00031b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  000347e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f00  00000000  00000000  00035830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f1b  00000000  00000000  00036730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a0d  00000000  00000000  0005864b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0d3f  00000000  00000000  0006a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ad97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042ec  00000000  00000000  0013ade8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005520 	.word	0x08005520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005520 	.word	0x08005520

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000084 	.word	0x20000084
 8000504:	200000d8 	.word	0x200000d8

08000508 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetTimerTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetTimerTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000526:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	200002d8 	.word	0x200002d8
 8000538:	2000032c 	.word	0x2000032c

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b092      	sub	sp, #72	; 0x48
 8000540:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinary01Handle */
  osSemaphoreStaticDef(myBinary01Handle, &myBinary01HandleControlBlock);
 8000542:	2300      	movs	r3, #0
 8000544:	643b      	str	r3, [r7, #64]	; 0x40
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <MX_FREERTOS_Init+0x9c>)
 8000548:	647b      	str	r3, [r7, #68]	; 0x44
  myBinary01Handle = osSemaphoreCreate(osSemaphore(myBinary01Handle), 1);
 800054a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800054e:	2101      	movs	r1, #1
 8000550:	4618      	mov	r0, r3
 8000552:	f001 fde5 	bl	8002120 <osSemaphoreCreate>
 8000556:	4603      	mov	r3, r0
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <MX_FREERTOS_Init+0xa0>)
 800055a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <MX_FREERTOS_Init+0xa4>)
 800055e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000560:	2300      	movs	r3, #0
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000568:	2200      	movs	r2, #0
 800056a:	2101      	movs	r1, #1
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fd5f 	bl	8002030 <osTimerCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <MX_FREERTOS_Init+0xa8>)
 8000576:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */

  /* add queues, ... */
  demoqueue = osMessageCreate (osMessageQ(demoqueueDef),NULL);
 8000578:	2100      	movs	r1, #0
 800057a:	481b      	ldr	r0, [pc, #108]	; (80005e8 <MX_FREERTOS_Init+0xac>)
 800057c:	f001 fe86 	bl	800228c <osMessageCreate>
 8000580:	4603      	mov	r3, r0
 8000582:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <MX_FREERTOS_Init+0xb0>)
 8000584:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_FREERTOS_Init+0xb4>)
 8000588:	f107 041c 	add.w	r4, r7, #28
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fce4 	bl	8001f6e <osThreadCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <MX_FREERTOS_Init+0xb8>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(defaultTask2, StartMonitorTask, osPriorityNormal, 0, 128);
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <MX_FREERTOS_Init+0xbc>)
 80005ae:	463c      	mov	r4, r7
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask2), NULL);
 80005be:	463b      	mov	r3, r7
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fcd3 	bl	8001f6e <osThreadCreate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <MX_FREERTOS_Init+0xb8>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005ce:	bf00      	nop
 80005d0:	3748      	adds	r7, #72	; 0x48
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bdb0      	pop	{r4, r5, r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000003c 	.word	0x2000003c
 80005dc:	20000038 	.word	0x20000038
 80005e0:	08000645 	.word	0x08000645
 80005e4:	20000034 	.word	0x20000034
 80005e8:	080055a8 	.word	0x080055a8
 80005ec:	2000002c 	.word	0x2000002c
 80005f0:	08005554 	.word	0x08005554
 80005f4:	20000030 	.word	0x20000030
 80005f8:	08005570 	.word	0x08005570

080005fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  uint32_t cnt = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  uint32_t* loadcounter = (uint32_t*)argument;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreWait(myBinary01Handle,0xFFFFFFF);
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <StartDefaultTask+0x40>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fdb5 	bl	8002184 <osSemaphoreWait>
    osMessagePut(demoqueue,cnt,0);
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <StartDefaultTask+0x44>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	68f9      	ldr	r1, [r7, #12]
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fe5a 	bl	80022dc <osMessagePut>
    *loadcounter = cnt++;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	60fa      	str	r2, [r7, #12]
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	6013      	str	r3, [r2, #0]
    osDelay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f001 fce7 	bl	8002006 <osDelay>
    osSemaphoreWait(myBinary01Handle,0xFFFFFFF);
 8000638:	e7e8      	b.n	800060c <StartDefaultTask+0x10>
 800063a:	bf00      	nop
 800063c:	20000038 	.word	0x20000038
 8000640:	2000002c 	.word	0x2000002c

08000644 <Callback01>:
  /* USER CODE END StartDefaultTask */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	asm("nop");
 800064c:	bf00      	nop
  /* USER CODE END Callback01 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <StartMonitorTask>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartMonitorTask(void *argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	osTimerStart(myTimer01Handle, 1000);
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <StartMonitorTask+0x3c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fd13 	bl	8002098 <osTimerStart>
  uint32_t data = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  osEvent event;
  /* Infinite loop */
  for(;;)
  {
   event = osMessageGet (demoqueue,0);
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <StartMonitorTask+0x40>)
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fe6b 	bl	800235c <osMessageGet>
   if (event.status == osOK )
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d101      	bne.n	8000690 <StartMonitorTask+0x34>
   {
    data = event.value.v;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	617b      	str	r3, [r7, #20]
   }
    osDelay(10);
 8000690:	200a      	movs	r0, #10
 8000692:	f001 fcb8 	bl	8002006 <osDelay>
   event = osMessageGet (demoqueue,0);
 8000696:	e7ee      	b.n	8000676 <StartMonitorTask+0x1a>
 8000698:	20000034 	.word	0x20000034
 800069c:	2000002c 	.word	0x2000002c

080006a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_GPIO_Init+0x9c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a1f      	ldr	r2, [pc, #124]	; (800073c <MX_GPIO_Init+0x9c>)
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_GPIO_Init+0x9c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0310 	and.w	r3, r3, #16
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0x9c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_GPIO_Init+0x9c>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_GPIO_Init+0x9c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_GPIO_Init+0x9c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <MX_GPIO_Init+0x9c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_GPIO_Init+0x9c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800070a:	2310      	movs	r3, #16
 800070c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4619      	mov	r1, r3
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <MX_GPIO_Init+0xa0>)
 8000720:	f000 fad0 	bl	8000cc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2105      	movs	r1, #5
 8000728:	200a      	movs	r0, #10
 800072a:	f000 faa1 	bl	8000c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800072e:	200a      	movs	r0, #10
 8000730:	f000 faba 	bl	8000ca8 <HAL_NVIC_EnableIRQ>

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40021000 	.word	0x40021000

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 f998 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f808 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f7ff ffa6 	bl	80006a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000754:	f7ff fef2 	bl	800053c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000758:	f001 fc02 	bl	8001f60 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800075c:	e7fe      	b.n	800075c <main+0x18>
	...

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fece 	bl	8005510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b27      	ldr	r3, [pc, #156]	; (8000828 <SystemClock_Config+0xc8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a26      	ldr	r2, [pc, #152]	; (8000828 <SystemClock_Config+0xc8>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b24      	ldr	r3, [pc, #144]	; (8000828 <SystemClock_Config+0xc8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <SystemClock_Config+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a20      	ldr	r2, [pc, #128]	; (800082c <SystemClock_Config+0xcc>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <SystemClock_Config+0xcc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007d4:	2348      	movs	r3, #72	; 0x48
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fc2d 	bl	8001044 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f0:	f000 f82d 	bl	800084e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2102      	movs	r1, #2
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fe8f 	bl	8001534 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800081c:	f000 f817 	bl	800084e <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	; 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000840:	d101      	bne.n	8000846 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000842:	f000 f93d 	bl	8000ac0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000852:	b672      	cpsid	i
}
 8000854:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000856:	e7fe      	b.n	8000856 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_MspInit+0x54>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <HAL_MspInit+0x54>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_MspInit+0x54>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_MspInit+0x54>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	210f      	movs	r1, #15
 800089a:	f06f 0001 	mvn.w	r0, #1
 800089e:	f000 f9e7 	bl	8000c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <HAL_InitTick+0xe8>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a33      	ldr	r2, [pc, #204]	; (8000998 <HAL_InitTick+0xe8>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <HAL_InitTick+0xe8>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008dc:	f107 0210 	add.w	r2, r7, #16
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 f830 	bl	800194c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d103      	bne.n	80008fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f6:	f001 f815 	bl	8001924 <HAL_RCC_GetPCLK1Freq>
 80008fa:	6378      	str	r0, [r7, #52]	; 0x34
 80008fc:	e004      	b.n	8000908 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008fe:	f001 f811 	bl	8001924 <HAL_RCC_GetPCLK1Freq>
 8000902:	4603      	mov	r3, r0
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090a:	4a24      	ldr	r2, [pc, #144]	; (800099c <HAL_InitTick+0xec>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	0c9b      	lsrs	r3, r3, #18
 8000912:	3b01      	subs	r3, #1
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <HAL_InitTick+0xf0>)
 8000918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <HAL_InitTick+0xf0>)
 8000920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000924:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <HAL_InitTick+0xf0>)
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_InitTick+0xf0>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_InitTick+0xf0>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_InitTick+0xf0>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800093e:	4818      	ldr	r0, [pc, #96]	; (80009a0 <HAL_InitTick+0xf0>)
 8000940:	f001 f836 	bl	80019b0 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800094a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800094e:	2b00      	cmp	r3, #0
 8000950:	d11b      	bne.n	800098a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000952:	4813      	ldr	r0, [pc, #76]	; (80009a0 <HAL_InitTick+0xf0>)
 8000954:	f001 f886 	bl	8001a64 <HAL_TIM_Base_Start_IT>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800095e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000962:	2b00      	cmp	r3, #0
 8000964:	d111      	bne.n	800098a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000966:	201c      	movs	r0, #28
 8000968:	f000 f99e 	bl	8000ca8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b0f      	cmp	r3, #15
 8000970:	d808      	bhi.n	8000984 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000972:	2200      	movs	r2, #0
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	201c      	movs	r0, #28
 8000978:	f000 f97a 	bl	8000c70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_InitTick+0xf4>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	e002      	b.n	800098a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800098a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800098e:	4618      	mov	r0, r3
 8000990:	3738      	adds	r7, #56	; 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	431bde83 	.word	0x431bde83
 80009a0:	2000072c 	.word	0x2000072c
 80009a4:	20000004 	.word	0x20000004

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80009d8:	2010      	movs	r0, #16
 80009da:	f000 fb0f 	bl	8000ffc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  osSemaphoreRelease(myBinary01Handle);
 80009de:	4b03      	ldr	r3, [pc, #12]	; (80009ec <EXTI4_IRQHandler+0x18>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fc1c 	bl	8002220 <osSemaphoreRelease>
  /* USER CODE END EXTI4_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000038 	.word	0x20000038

080009f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <TIM2_IRQHandler+0x10>)
 80009f6:	f001 f8a5 	bl	8001b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000072c 	.word	0x2000072c

08000a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2e:	490e      	ldr	r1, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a44:	4c0b      	ldr	r4, [pc, #44]	; (8000a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a52:	f7ff ffd7 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f004 fd29 	bl	80054ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fe73 	bl	8000744 <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a6c:	080055e0 	.word	0x080055e0
  ldr r2, =_sbss
 8000a70:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a74:	20004608 	.word	0x20004608

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <HAL_Init+0x40>)
 8000a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_Init+0x40>)
 8000a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x40>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f8d8 	bl	8000c5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f7ff ff00 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff fed2 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023c00 	.word	0x40023c00

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000774 	.word	0x20000774

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000774 	.word	0x20000774

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	; 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ff4c 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c82:	f7ff ff61 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000c86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	6978      	ldr	r0, [r7, #20]
 8000c8e:	f7ff ffb1 	bl	8000bf4 <NVIC_EncodePriority>
 8000c92:	4602      	mov	r2, r0
 8000c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff80 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff54 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	e16b      	b.n	8000fb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	f040 815a 	bne.w	8000fb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d005      	beq.n	8000d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d130      	bne.n	8000d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	f003 0201 	and.w	r2, r3, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d017      	beq.n	8000db4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d123      	bne.n	8000e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0203 	and.w	r2, r3, #3
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80b4 	beq.w	8000fb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b60      	ldr	r3, [pc, #384]	; (8000fd0 <HAL_GPIO_Init+0x30c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4a5f      	ldr	r2, [pc, #380]	; (8000fd0 <HAL_GPIO_Init+0x30c>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e58:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	; (8000fd0 <HAL_GPIO_Init+0x30c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e66:	4a5b      	ldr	r2, [pc, #364]	; (8000fd4 <HAL_GPIO_Init+0x310>)
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a52      	ldr	r2, [pc, #328]	; (8000fd8 <HAL_GPIO_Init+0x314>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d02b      	beq.n	8000eea <HAL_GPIO_Init+0x226>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a51      	ldr	r2, [pc, #324]	; (8000fdc <HAL_GPIO_Init+0x318>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d025      	beq.n	8000ee6 <HAL_GPIO_Init+0x222>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a50      	ldr	r2, [pc, #320]	; (8000fe0 <HAL_GPIO_Init+0x31c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d01f      	beq.n	8000ee2 <HAL_GPIO_Init+0x21e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4f      	ldr	r2, [pc, #316]	; (8000fe4 <HAL_GPIO_Init+0x320>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d019      	beq.n	8000ede <HAL_GPIO_Init+0x21a>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4e      	ldr	r2, [pc, #312]	; (8000fe8 <HAL_GPIO_Init+0x324>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d013      	beq.n	8000eda <HAL_GPIO_Init+0x216>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4d      	ldr	r2, [pc, #308]	; (8000fec <HAL_GPIO_Init+0x328>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d00d      	beq.n	8000ed6 <HAL_GPIO_Init+0x212>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4c      	ldr	r2, [pc, #304]	; (8000ff0 <HAL_GPIO_Init+0x32c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x20e>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4b      	ldr	r2, [pc, #300]	; (8000ff4 <HAL_GPIO_Init+0x330>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_GPIO_Init+0x20a>
 8000eca:	2307      	movs	r3, #7
 8000ecc:	e00e      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ece:	2308      	movs	r3, #8
 8000ed0:	e00c      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	e00a      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	e008      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e004      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x228>
 8000eea:	2300      	movs	r3, #0
 8000eec:	69fa      	ldr	r2, [r7, #28]
 8000eee:	f002 0203 	and.w	r2, r2, #3
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	4093      	lsls	r3, r2
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000efc:	4935      	ldr	r1, [pc, #212]	; (8000fd4 <HAL_GPIO_Init+0x310>)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0a:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f2e:	4a32      	ldr	r2, [pc, #200]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f82:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <HAL_GPIO_Init+0x334>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	2b0f      	cmp	r3, #15
 8000fbc:	f67f ae90 	bls.w	8000ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40013800 	.word	0x40013800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	40020c00 	.word	0x40020c00
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40021400 	.word	0x40021400
 8000ff0:	40021800 	.word	0x40021800
 8000ff4:	40021c00 	.word	0x40021c00
 8000ff8:	40013c00 	.word	0x40013c00

08000ffc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f806 	bl	800102c <HAL_GPIO_EXTI_Callback>
  }
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40013c00 	.word	0x40013c00

0800102c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e267      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d075      	beq.n	800114e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001062:	4b88      	ldr	r3, [pc, #544]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b04      	cmp	r3, #4
 800106c:	d00c      	beq.n	8001088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106e:	4b85      	ldr	r3, [pc, #532]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001076:	2b08      	cmp	r3, #8
 8001078:	d112      	bne.n	80010a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107a:	4b82      	ldr	r3, [pc, #520]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001086:	d10b      	bne.n	80010a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	4b7e      	ldr	r3, [pc, #504]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d05b      	beq.n	800114c <HAL_RCC_OscConfig+0x108>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d157      	bne.n	800114c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e242      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d106      	bne.n	80010b8 <HAL_RCC_OscConfig+0x74>
 80010aa:	4b76      	ldr	r3, [pc, #472]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a75      	ldr	r2, [pc, #468]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e01d      	b.n	80010f4 <HAL_RCC_OscConfig+0xb0>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x98>
 80010c2:	4b70      	ldr	r3, [pc, #448]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6f      	ldr	r2, [pc, #444]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b6d      	ldr	r3, [pc, #436]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a6c      	ldr	r2, [pc, #432]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e00b      	b.n	80010f4 <HAL_RCC_OscConfig+0xb0>
 80010dc:	4b69      	ldr	r3, [pc, #420]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a68      	ldr	r2, [pc, #416]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b66      	ldr	r3, [pc, #408]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a65      	ldr	r2, [pc, #404]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d013      	beq.n	8001124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fcf4 	bl	8000ae8 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fcf0 	bl	8000ae8 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	; 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e207      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	4b5b      	ldr	r3, [pc, #364]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0xc0>
 8001122:	e014      	b.n	800114e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fce0 	bl	8000ae8 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fcdc 	bl	8000ae8 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e1f3      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113e:	4b51      	ldr	r3, [pc, #324]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0xe8>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d063      	beq.n	8001222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800115a:	4b4a      	ldr	r3, [pc, #296]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800116e:	2b08      	cmp	r3, #8
 8001170:	d11c      	bne.n	80011ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001172:	4b44      	ldr	r3, [pc, #272]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d116      	bne.n	80011ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	4b41      	ldr	r3, [pc, #260]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <HAL_RCC_OscConfig+0x152>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d001      	beq.n	8001196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e1c7      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4937      	ldr	r1, [pc, #220]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	e03a      	b.n	8001222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d020      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b4:	4b34      	ldr	r3, [pc, #208]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ba:	f7ff fc95 	bl	8000ae8 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff fc91 	bl	8000ae8 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e1a8      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4925      	ldr	r1, [pc, #148]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	600b      	str	r3, [r1, #0]
 80011f4:	e015      	b.n	8001222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc74 	bl	8000ae8 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff fc70 	bl	8000ae8 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e187      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d036      	beq.n	800129c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d016      	beq.n	8001264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_RCC_OscConfig+0x248>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff fc54 	bl	8000ae8 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fc50 	bl	8000ae8 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e167      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_RCC_OscConfig+0x240>)
 8001258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x200>
 8001262:	e01b      	b.n	800129c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_RCC_OscConfig+0x248>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fc3d 	bl	8000ae8 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	e00e      	b.n	8001290 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff fc39 	bl	8000ae8 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d907      	bls.n	8001290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e150      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
 8001284:	40023800 	.word	0x40023800
 8001288:	42470000 	.word	0x42470000
 800128c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1ea      	bne.n	8001272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 8097 	beq.w	80013d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ae:	4b81      	ldr	r3, [pc, #516]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b7d      	ldr	r3, [pc, #500]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a7c      	ldr	r2, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d6:	2301      	movs	r3, #1
 80012d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b77      	ldr	r3, [pc, #476]	; (80014b8 <HAL_RCC_OscConfig+0x474>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e6:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <HAL_RCC_OscConfig+0x474>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a73      	ldr	r2, [pc, #460]	; (80014b8 <HAL_RCC_OscConfig+0x474>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fbf9 	bl	8000ae8 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fa:	f7ff fbf5 	bl	8000ae8 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e10c      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	4b6a      	ldr	r3, [pc, #424]	; (80014b8 <HAL_RCC_OscConfig+0x474>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x2ea>
 8001320:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001324:	4a63      	ldr	r2, [pc, #396]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6713      	str	r3, [r2, #112]	; 0x70
 800132c:	e01c      	b.n	8001368 <HAL_RCC_OscConfig+0x324>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b05      	cmp	r3, #5
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x30c>
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	4a5e      	ldr	r2, [pc, #376]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6713      	str	r3, [r2, #112]	; 0x70
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6713      	str	r3, [r2, #112]	; 0x70
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0x324>
 8001350:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001354:	4a57      	ldr	r2, [pc, #348]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	6713      	str	r3, [r2, #112]	; 0x70
 800135c:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 800135e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001360:	4a54      	ldr	r2, [pc, #336]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001362:	f023 0304 	bic.w	r3, r3, #4
 8001366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d015      	beq.n	800139c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001370:	f7ff fbba 	bl	8000ae8 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001376:	e00a      	b.n	800138e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001378:	f7ff fbb6 	bl	8000ae8 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f241 3288 	movw	r2, #5000	; 0x1388
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e0cb      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138e:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0ee      	beq.n	8001378 <HAL_RCC_OscConfig+0x334>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff fba4 	bl	8000ae8 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fba0 	bl	8000ae8 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e0b5      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ba:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ee      	bne.n	80013a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d105      	bne.n	80013d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a38      	ldr	r2, [pc, #224]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80a1 	beq.w	8001524 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013e2:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d05c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d141      	bne.n	800147a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f6:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_RCC_OscConfig+0x478>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb74 	bl	8000ae8 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fb70 	bl	8000ae8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e087      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69da      	ldr	r2, [r3, #28]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	085b      	lsrs	r3, r3, #1
 800143a:	3b01      	subs	r3, #1
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	061b      	lsls	r3, r3, #24
 8001446:	491b      	ldr	r1, [pc, #108]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_RCC_OscConfig+0x478>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fb49 	bl	8000ae8 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fb45 	bl	8000ae8 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e05c      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x416>
 8001478:	e054      	b.n	8001524 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_RCC_OscConfig+0x478>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fb32 	bl	8000ae8 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fb2e 	bl	8000ae8 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e045      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RCC_OscConfig+0x470>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x444>
 80014a6:	e03d      	b.n	8001524 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e038      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000
 80014bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_RCC_OscConfig+0x4ec>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d028      	beq.n	8001520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d121      	bne.n	8001520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d11a      	bne.n	8001520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014f0:	4013      	ands	r3, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d111      	bne.n	8001520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	085b      	lsrs	r3, r3, #1
 8001508:	3b01      	subs	r3, #1
 800150a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d107      	bne.n	8001520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0cc      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001548:	4b68      	ldr	r3, [pc, #416]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d90c      	bls.n	8001570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	4b63      	ldr	r3, [pc, #396]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0b8      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	494d      	ldr	r1, [pc, #308]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d044      	beq.n	8001654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d119      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d003      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e06f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e067      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f023 0203 	bic.w	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4934      	ldr	r1, [pc, #208]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001624:	f7ff fa60 	bl	8000ae8 <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	e00a      	b.n	8001642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162c:	f7ff fa5c 	bl	8000ae8 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e04f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 020c 	and.w	r2, r3, #12
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	429a      	cmp	r2, r3
 8001652:	d1eb      	bne.n	800162c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d20c      	bcs.n	800167c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e032      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4916      	ldr	r1, [pc, #88]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	490e      	ldr	r1, [pc, #56]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ba:	f000 f821 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	490a      	ldr	r1, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	5ccb      	ldrb	r3, [r1, r3]
 80016ce:	fa22 f303 	lsr.w	r3, r2, r3
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1c8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f8e8 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00
 80016f0:	40023800 	.word	0x40023800
 80016f4:	080055b8 	.word	0x080055b8
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001704:	b094      	sub	sp, #80	; 0x50
 8001706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
 800170c:	2300      	movs	r3, #0
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001710:	2300      	movs	r3, #0
 8001712:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001718:	4b79      	ldr	r3, [pc, #484]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d00d      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x40>
 8001724:	2b08      	cmp	r3, #8
 8001726:	f200 80e1 	bhi.w	80018ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x34>
 800172e:	2b04      	cmp	r3, #4
 8001730:	d003      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x3a>
 8001732:	e0db      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001734:	4b73      	ldr	r3, [pc, #460]	; (8001904 <HAL_RCC_GetSysClockFreq+0x204>)
 8001736:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001738:	e0db      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800173a:	4b73      	ldr	r3, [pc, #460]	; (8001908 <HAL_RCC_GetSysClockFreq+0x208>)
 800173c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800173e:	e0d8      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001740:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174a:	4b6d      	ldr	r3, [pc, #436]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d063      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001756:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	2200      	movs	r2, #0
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001760:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
 800176a:	2300      	movs	r3, #0
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
 800176e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001772:	4622      	mov	r2, r4
 8001774:	462b      	mov	r3, r5
 8001776:	f04f 0000 	mov.w	r0, #0
 800177a:	f04f 0100 	mov.w	r1, #0
 800177e:	0159      	lsls	r1, r3, #5
 8001780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001784:	0150      	lsls	r0, r2, #5
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4621      	mov	r1, r4
 800178c:	1a51      	subs	r1, r2, r1
 800178e:	6139      	str	r1, [r7, #16]
 8001790:	4629      	mov	r1, r5
 8001792:	eb63 0301 	sbc.w	r3, r3, r1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017a4:	4659      	mov	r1, fp
 80017a6:	018b      	lsls	r3, r1, #6
 80017a8:	4651      	mov	r1, sl
 80017aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ae:	4651      	mov	r1, sl
 80017b0:	018a      	lsls	r2, r1, #6
 80017b2:	4651      	mov	r1, sl
 80017b4:	ebb2 0801 	subs.w	r8, r2, r1
 80017b8:	4659      	mov	r1, fp
 80017ba:	eb63 0901 	sbc.w	r9, r3, r1
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017d2:	4690      	mov	r8, r2
 80017d4:	4699      	mov	r9, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	eb18 0303 	adds.w	r3, r8, r3
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	462b      	mov	r3, r5
 80017e0:	eb49 0303 	adc.w	r3, r9, r3
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017f2:	4629      	mov	r1, r5
 80017f4:	024b      	lsls	r3, r1, #9
 80017f6:	4621      	mov	r1, r4
 80017f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017fc:	4621      	mov	r1, r4
 80017fe:	024a      	lsls	r2, r1, #9
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001806:	2200      	movs	r2, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
 800180a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800180c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001810:	f7fe fcde 	bl	80001d0 <__aeabi_uldivmod>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4613      	mov	r3, r2
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800181c:	e058      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	099b      	lsrs	r3, r3, #6
 8001824:	2200      	movs	r2, #0
 8001826:	4618      	mov	r0, r3
 8001828:	4611      	mov	r1, r2
 800182a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
 8001834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001838:	4642      	mov	r2, r8
 800183a:	464b      	mov	r3, r9
 800183c:	f04f 0000 	mov.w	r0, #0
 8001840:	f04f 0100 	mov.w	r1, #0
 8001844:	0159      	lsls	r1, r3, #5
 8001846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800184a:	0150      	lsls	r0, r2, #5
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4641      	mov	r1, r8
 8001852:	ebb2 0a01 	subs.w	sl, r2, r1
 8001856:	4649      	mov	r1, r9
 8001858:	eb63 0b01 	sbc.w	fp, r3, r1
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800186c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001870:	ebb2 040a 	subs.w	r4, r2, sl
 8001874:	eb63 050b 	sbc.w	r5, r3, fp
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	00eb      	lsls	r3, r5, #3
 8001882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001886:	00e2      	lsls	r2, r4, #3
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	4643      	mov	r3, r8
 800188e:	18e3      	adds	r3, r4, r3
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	464b      	mov	r3, r9
 8001894:	eb45 0303 	adc.w	r3, r5, r3
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018a6:	4629      	mov	r1, r5
 80018a8:	028b      	lsls	r3, r1, #10
 80018aa:	4621      	mov	r1, r4
 80018ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b0:	4621      	mov	r1, r4
 80018b2:	028a      	lsls	r2, r1, #10
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ba:	2200      	movs	r2, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	61fa      	str	r2, [r7, #28]
 80018c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018c4:	f7fe fc84 	bl	80001d0 <__aeabi_uldivmod>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4613      	mov	r3, r2
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	3301      	adds	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ea:	e002      	b.n	80018f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_RCC_GetSysClockFreq+0x204>)
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3750      	adds	r7, #80	; 0x50
 80018f8:	46bd      	mov	sp, r7
 80018fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	00f42400 	.word	0x00f42400
 8001908:	007a1200 	.word	0x007a1200

0800190c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_RCC_GetHCLKFreq+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000000 	.word	0x20000000

08001924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001928:	f7ff fff0 	bl	800190c <HAL_RCC_GetHCLKFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	0a9b      	lsrs	r3, r3, #10
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	4903      	ldr	r1, [pc, #12]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	080055c8 	.word	0x080055c8

0800194c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	220f      	movs	r2, #15
 800195a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_RCC_GetClockConfig+0x5c>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0203 	and.w	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_RCC_GetClockConfig+0x5c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <HAL_RCC_GetClockConfig+0x60>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0207 	and.w	r2, r3, #7
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e041      	b.n	8001a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d106      	bne.n	80019dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f839 	bl	8001a4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3304      	adds	r3, #4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f000 f9d8 	bl	8001da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d001      	beq.n	8001a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e04e      	b.n	8001b1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d022      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x80>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa6:	d01d      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x80>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_TIM_Base_Start_IT+0xc8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d018      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x80>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d013      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x80>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00e      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x80>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x80>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d004      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x80>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d111      	bne.n	8001b08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d010      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b06:	e007      	b.n	8001b18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40000400 	.word	0x40000400
 8001b30:	40000800 	.word	0x40000800
 8001b34:	40000c00 	.word	0x40000c00
 8001b38:	40010400 	.word	0x40010400
 8001b3c:	40014000 	.word	0x40014000
 8001b40:	40001800 	.word	0x40001800

08001b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d122      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d11b      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0202 	mvn.w	r2, #2
 8001b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8ee 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 8001b8c:	e005      	b.n	8001b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f8e0 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8f1 	bl	8001d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d122      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d11b      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0204 	mvn.w	r2, #4
 8001bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f8c4 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 8001be0:	e005      	b.n	8001bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8b6 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8c7 	bl	8001d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d122      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d11b      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0208 	mvn.w	r2, #8
 8001c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f89a 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f88c 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f89d 	bl	8001d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d122      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b10      	cmp	r3, #16
 8001c62:	d11b      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0210 	mvn.w	r2, #16
 8001c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2208      	movs	r2, #8
 8001c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f870 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 8001c88:	e005      	b.n	8001c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f862 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f873 	bl	8001d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d107      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0201 	mvn.w	r2, #1
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe fdb4 	bl	8000830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	2b80      	cmp	r3, #128	; 0x80
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce0:	2b80      	cmp	r3, #128	; 0x80
 8001ce2:	d107      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f902 	bl	8001ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	d10e      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0c:	2b40      	cmp	r3, #64	; 0x40
 8001d0e:	d107      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f838 	bl	8001d90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d10e      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d107      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0220 	mvn.w	r2, #32
 8001d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8cc 	bl	8001ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a40      	ldr	r2, [pc, #256]	; (8001eb8 <TIM_Base_SetConfig+0x114>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d013      	beq.n	8001de4 <TIM_Base_SetConfig+0x40>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc2:	d00f      	beq.n	8001de4 <TIM_Base_SetConfig+0x40>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a3d      	ldr	r2, [pc, #244]	; (8001ebc <TIM_Base_SetConfig+0x118>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00b      	beq.n	8001de4 <TIM_Base_SetConfig+0x40>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a3c      	ldr	r2, [pc, #240]	; (8001ec0 <TIM_Base_SetConfig+0x11c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <TIM_Base_SetConfig+0x40>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a3b      	ldr	r2, [pc, #236]	; (8001ec4 <TIM_Base_SetConfig+0x120>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d003      	beq.n	8001de4 <TIM_Base_SetConfig+0x40>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <TIM_Base_SetConfig+0x124>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d108      	bne.n	8001df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <TIM_Base_SetConfig+0x114>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d02b      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e04:	d027      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a2c      	ldr	r2, [pc, #176]	; (8001ebc <TIM_Base_SetConfig+0x118>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d023      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <TIM_Base_SetConfig+0x11c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <TIM_Base_SetConfig+0x120>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01b      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <TIM_Base_SetConfig+0x124>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d017      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <TIM_Base_SetConfig+0x128>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <TIM_Base_SetConfig+0x12c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00f      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <TIM_Base_SetConfig+0x130>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00b      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a25      	ldr	r2, [pc, #148]	; (8001ed8 <TIM_Base_SetConfig+0x134>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a24      	ldr	r2, [pc, #144]	; (8001edc <TIM_Base_SetConfig+0x138>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d003      	beq.n	8001e56 <TIM_Base_SetConfig+0xb2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <TIM_Base_SetConfig+0x13c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d108      	bne.n	8001e68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <TIM_Base_SetConfig+0x114>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <TIM_Base_SetConfig+0xf8>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <TIM_Base_SetConfig+0x124>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d103      	bne.n	8001ea4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	615a      	str	r2, [r3, #20]
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	40000c00 	.word	0x40000c00
 8001ec8:	40010400 	.word	0x40010400
 8001ecc:	40014000 	.word	0x40014000
 8001ed0:	40014400 	.word	0x40014400
 8001ed4:	40014800 	.word	0x40014800
 8001ed8:	40001800 	.word	0x40001800
 8001edc:	40001c00 	.word	0x40001c00
 8001ee0:	40002000 	.word	0x40002000

08001ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1e:	2b84      	cmp	r3, #132	; 0x84
 8001f20:	d005      	beq.n	8001f2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	3303      	adds	r3, #3
 8001f2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f42:	f3ef 8305 	mrs	r3, IPSR
 8001f46:	607b      	str	r3, [r7, #4]
  return(result);
 8001f48:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f64:	f001 fc3c 	bl	80037e0 <vTaskStartScheduler>
  
  return osOK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f70:	b089      	sub	sp, #36	; 0x24
 8001f72:	af04      	add	r7, sp, #16
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <osThreadCreate+0x54>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01c      	beq.n	8001fc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685c      	ldr	r4, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681d      	ldr	r5, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691e      	ldr	r6, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ffb6 	bl	8001f0c <makeFreeRtosPriority>
 8001fa0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001faa:	9202      	str	r2, [sp, #8]
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	9100      	str	r1, [sp, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4632      	mov	r2, r6
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f001 fa4a 	bl	8003450 <xTaskCreateStatic>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e01c      	b.n	8001ffc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685c      	ldr	r4, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fce:	b29e      	uxth	r6, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff98 	bl	8001f0c <makeFreeRtosPriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	9200      	str	r2, [sp, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	4632      	mov	r2, r6
 8001fea:	4629      	mov	r1, r5
 8001fec:	4620      	mov	r0, r4
 8001fee:	f001 fa8c 	bl	800350a <xTaskCreate>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d001      	beq.n	8001ffc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002006 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <osDelay+0x16>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	e000      	b.n	800201e <osDelay+0x18>
 800201c:	2301      	movs	r3, #1
 800201e:	4618      	mov	r0, r3
 8002020:	f001 fbaa 	bl	8003778 <vTaskDelay>
  
  return osOK;
 8002024:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	460b      	mov	r3, r1
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d013      	beq.n	800206e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002046:	7afb      	ldrb	r3, [r7, #11]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <osTimerCreate+0x20>
 800204c:	2101      	movs	r1, #1
 800204e:	e000      	b.n	8002052 <osTimerCreate+0x22>
 8002050:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800205a:	9201      	str	r2, [sp, #4]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	460a      	mov	r2, r1
 8002062:	2101      	movs	r1, #1
 8002064:	480b      	ldr	r0, [pc, #44]	; (8002094 <osTimerCreate+0x64>)
 8002066:	f002 fa86 	bl	8004576 <xTimerCreateStatic>
 800206a:	4603      	mov	r3, r0
 800206c:	e00e      	b.n	800208c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <osTimerCreate+0x48>
 8002074:	2201      	movs	r2, #1
 8002076:	e000      	b.n	800207a <osTimerCreate+0x4a>
 8002078:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2101      	movs	r1, #1
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <osTimerCreate+0x64>)
 8002086:	f002 fa55 	bl	8004534 <xTimerCreate>
 800208a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	0800558c 	.word	0x0800558c

08002098 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af02      	add	r7, sp, #8
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <osTimerStart+0x20>
    ticks = 1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80020b8:	f7ff ff40 	bl	8001f3c <inHandlerMode>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01a      	beq.n	80020f8 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	2200      	movs	r2, #0
 80020c8:	9200      	str	r2, [sp, #0]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	2109      	movs	r1, #9
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f002 faca 	bl	8004668 <xTimerGenericCommand>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d002      	beq.n	80020e0 <osTimerStart+0x48>
    {
      result = osErrorOS;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e018      	b.n	8002112 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d015      	beq.n	8002112 <osTimerStart+0x7a>
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <osTimerStart+0x84>)
 80020e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f3bf 8f4f 	dsb	sy
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	e00c      	b.n	8002112 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80020f8:	2300      	movs	r3, #0
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2300      	movs	r3, #0
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	2104      	movs	r1, #4
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f002 fab0 	bl	8004668 <xTimerGenericCommand>
 8002108:	4603      	mov	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	d001      	beq.n	8002112 <osTimerStart+0x7a>
      result = osErrorOS;
 800210e:	23ff      	movs	r3, #255	; 0xff
 8002110:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002112:	697b      	ldr	r3, [r7, #20]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	e000ed04 	.word	0xe000ed04

08002120 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af02      	add	r7, sp, #8
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00f      	beq.n	8002152 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10a      	bne.n	800214e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2203      	movs	r2, #3
 800213e:	9200      	str	r2, [sp, #0]
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	2001      	movs	r0, #1
 8002146:	f000 fa99 	bl	800267c <xQueueGenericCreateStatic>
 800214a:	4603      	mov	r3, r0
 800214c:	e016      	b.n	800217c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800214e:	2300      	movs	r3, #0
 8002150:	e014      	b.n	800217c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d110      	bne.n	800217a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002158:	2203      	movs	r2, #3
 800215a:	2100      	movs	r1, #0
 800215c:	2001      	movs	r0, #1
 800215e:	f000 fb05 	bl	800276c <xQueueGenericCreate>
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <osSemaphoreCreate+0x56>
 800216a:	2300      	movs	r3, #0
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fb55 	bl	8002820 <xQueueGenericSend>
      return sema;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	e000      	b.n	800217c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800217a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	e03a      	b.n	8002212 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d103      	bne.n	80021b0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e009      	b.n	80021c4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <osSemaphoreWait+0x40>
      ticks = 1;
 80021c0:	2301      	movs	r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80021c4:	f7ff feba 	bl	8001f3c <inHandlerMode>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d017      	beq.n	80021fe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	461a      	mov	r2, r3
 80021d4:	2100      	movs	r1, #0
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 ff34 	bl	8003044 <xQueueReceiveFromISR>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d001      	beq.n	80021e6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80021e2:	23ff      	movs	r3, #255	; 0xff
 80021e4:	e015      	b.n	8002212 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d011      	beq.n	8002210 <osSemaphoreWait+0x8c>
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <osSemaphoreWait+0x98>)
 80021ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	e008      	b.n	8002210 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80021fe:	68f9      	ldr	r1, [r7, #12]
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fe13 	bl	8002e2c <xQueueSemaphoreTake>
 8002206:	4603      	mov	r3, r0
 8002208:	2b01      	cmp	r3, #1
 800220a:	d001      	beq.n	8002210 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800220c:	23ff      	movs	r3, #255	; 0xff
 800220e:	e000      	b.n	8002212 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000ed04 	.word	0xe000ed04

08002220 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002230:	f7ff fe84 	bl	8001f3c <inHandlerMode>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d016      	beq.n	8002268 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fc86 	bl	8002b52 <xQueueGiveFromISR>
 8002246:	4603      	mov	r3, r0
 8002248:	2b01      	cmp	r3, #1
 800224a:	d001      	beq.n	8002250 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800224c:	23ff      	movs	r3, #255	; 0xff
 800224e:	e017      	b.n	8002280 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d013      	beq.n	800227e <osSemaphoreRelease+0x5e>
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <osSemaphoreRelease+0x68>)
 8002258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	f3bf 8f6f 	isb	sy
 8002266:	e00a      	b.n	800227e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002268:	2300      	movs	r3, #0
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fad6 	bl	8002820 <xQueueGenericSend>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	d001      	beq.n	800227e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800227a:	23ff      	movs	r3, #255	; 0xff
 800227c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800227e:	68fb      	ldr	r3, [r7, #12]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b085      	sub	sp, #20
 8002290:	af02      	add	r7, sp, #8
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d011      	beq.n	80022c2 <osMessageCreate+0x36>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00d      	beq.n	80022c2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2400      	movs	r4, #0
 80022b8:	9400      	str	r4, [sp, #0]
 80022ba:	f000 f9df 	bl	800267c <xQueueGenericCreateStatic>
 80022be:	4603      	mov	r3, r0
 80022c0:	e008      	b.n	80022d4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	4619      	mov	r1, r3
 80022ce:	f000 fa4d 	bl	800276c <xQueueGenericCreate>
 80022d2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}

080022dc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <osMessagePut+0x1e>
    ticks = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80022fa:	f7ff fe1f 	bl	8001f3c <inHandlerMode>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d018      	beq.n	8002336 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002304:	f107 0210 	add.w	r2, r7, #16
 8002308:	f107 0108 	add.w	r1, r7, #8
 800230c:	2300      	movs	r3, #0
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fb84 	bl	8002a1c <xQueueGenericSendFromISR>
 8002314:	4603      	mov	r3, r0
 8002316:	2b01      	cmp	r3, #1
 8002318:	d001      	beq.n	800231e <osMessagePut+0x42>
      return osErrorOS;
 800231a:	23ff      	movs	r3, #255	; 0xff
 800231c:	e018      	b.n	8002350 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d014      	beq.n	800234e <osMessagePut+0x72>
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <osMessagePut+0x7c>)
 8002326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	e00b      	b.n	800234e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002336:	f107 0108 	add.w	r1, r7, #8
 800233a:	2300      	movs	r3, #0
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fa6e 	bl	8002820 <xQueueGenericSend>
 8002344:	4603      	mov	r3, r0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d001      	beq.n	800234e <osMessagePut+0x72>
      return osErrorOS;
 800234a:	23ff      	movs	r3, #255	; 0xff
 800234c:	e000      	b.n	8002350 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	e000ed04 	.word	0xe000ed04

0800235c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b08b      	sub	sp, #44	; 0x2c
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	617b      	str	r3, [r7, #20]
    return event;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	461c      	mov	r4, r3
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800238a:	e054      	b.n	8002436 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239a:	d103      	bne.n	80023a4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	e009      	b.n	80023b8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <osMessageGet+0x5c>
      ticks = 1;
 80023b4:	2301      	movs	r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80023b8:	f7ff fdc0 	bl	8001f3c <inHandlerMode>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d01c      	beq.n	80023fc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80023c2:	f107 0220 	add.w	r2, r7, #32
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	3304      	adds	r3, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	68b8      	ldr	r0, [r7, #8]
 80023d0:	f000 fe38 	bl	8003044 <xQueueReceiveFromISR>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d102      	bne.n	80023e0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80023da:	2310      	movs	r3, #16
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e001      	b.n	80023e4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01d      	beq.n	8002426 <osMessageGet+0xca>
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <osMessageGet+0xe4>)
 80023ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	f3bf 8f4f 	dsb	sy
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	e014      	b.n	8002426 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	3304      	adds	r3, #4
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	68b8      	ldr	r0, [r7, #8]
 8002408:	f000 fc30 	bl	8002c6c <xQueueReceive>
 800240c:	4603      	mov	r3, r0
 800240e:	2b01      	cmp	r3, #1
 8002410:	d102      	bne.n	8002418 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002412:	2310      	movs	r3, #16
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e006      	b.n	8002426 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <osMessageGet+0xc6>
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <osMessageGet+0xc8>
 8002422:	2340      	movs	r3, #64	; 0x40
 8002424:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	461c      	mov	r4, r3
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	372c      	adds	r7, #44	; 0x2c
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}
 800243e:	bf00      	nop
 8002440:	e000ed04 	.word	0xe000ed04

08002444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f103 0208 	add.w	r2, r3, #8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f103 0208 	add.w	r2, r3, #8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f103 0208 	add.w	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d103      	bne.n	8002506 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e00c      	b.n	8002520 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3308      	adds	r3, #8
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e002      	b.n	8002514 <vListInsert+0x2e>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	429a      	cmp	r2, r3
 800251e:	d2f6      	bcs.n	800250e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	601a      	str	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6892      	ldr	r2, [r2, #8]
 800256e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6852      	ldr	r2, [r2, #4]
 8002578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d103      	bne.n	800258c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10a      	bne.n	80025d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025d2:	bf00      	nop
 80025d4:	e7fe      	b.n	80025d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025d6:	f002 fc5d 	bl	8004e94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	441a      	add	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	3b01      	subs	r3, #1
 8002608:	68f9      	ldr	r1, [r7, #12]
 800260a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	441a      	add	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	22ff      	movs	r2, #255	; 0xff
 800261a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	22ff      	movs	r2, #255	; 0xff
 8002622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d114      	bne.n	8002656 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01a      	beq.n	800266a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3310      	adds	r3, #16
 8002638:	4618      	mov	r0, r3
 800263a:	f001 fb55 	bl	8003ce8 <xTaskRemoveFromEventList>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d012      	beq.n	800266a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <xQueueGenericReset+0xcc>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	e009      	b.n	800266a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3310      	adds	r3, #16
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fef2 	bl	8002444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3324      	adds	r3, #36	; 0x24
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff feed 	bl	8002444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800266a:	f002 fc43 	bl	8004ef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	e000ed04 	.word	0xe000ed04

0800267c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08e      	sub	sp, #56	; 0x38
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026a2:	bf00      	nop
 80026a4:	e7fe      	b.n	80026a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10a      	bne.n	80026c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026be:	bf00      	nop
 80026c0:	e7fe      	b.n	80026c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <xQueueGenericCreateStatic+0x52>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <xQueueGenericCreateStatic+0x56>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <xQueueGenericCreateStatic+0x58>
 80026d2:	2300      	movs	r3, #0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	623b      	str	r3, [r7, #32]
}
 80026ea:	bf00      	nop
 80026ec:	e7fe      	b.n	80026ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d102      	bne.n	80026fa <xQueueGenericCreateStatic+0x7e>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <xQueueGenericCreateStatic+0x82>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <xQueueGenericCreateStatic+0x84>
 80026fe:	2300      	movs	r3, #0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	61fb      	str	r3, [r7, #28]
}
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800271a:	2348      	movs	r3, #72	; 0x48
 800271c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b48      	cmp	r3, #72	; 0x48
 8002722:	d00a      	beq.n	800273a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	61bb      	str	r3, [r7, #24]
}
 8002736:	bf00      	nop
 8002738:	e7fe      	b.n	8002738 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800273a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800274e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f83f 	bl	80027e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002764:	4618      	mov	r0, r3
 8002766:	3730      	adds	r7, #48	; 0x30
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	4613      	mov	r3, r2
 8002778:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	613b      	str	r3, [r7, #16]
}
 8002792:	bf00      	nop
 8002794:	e7fe      	b.n	8002794 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	3348      	adds	r3, #72	; 0x48
 80027a4:	4618      	mov	r0, r3
 80027a6:	f002 fc97 	bl	80050d8 <pvPortMalloc>
 80027aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d011      	beq.n	80027d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3348      	adds	r3, #72	; 0x48
 80027ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f805 	bl	80027e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027d6:	69bb      	ldr	r3, [r7, #24]
	}
 80027d8:	4618      	mov	r0, r3
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e002      	b.n	8002802 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800280e:	2101      	movs	r1, #1
 8002810:	69b8      	ldr	r0, [r7, #24]
 8002812:	f7ff fecb 	bl	80025ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08e      	sub	sp, #56	; 0x38
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueGenericSend+0x32>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d103      	bne.n	8002860 <xQueueGenericSend+0x40>
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <xQueueGenericSend+0x44>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <xQueueGenericSend+0x46>
 8002864:	2300      	movs	r3, #0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <xQueueGenericSend+0x60>
	__asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800287c:	bf00      	nop
 800287e:	e7fe      	b.n	800287e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d103      	bne.n	800288e <xQueueGenericSend+0x6e>
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <xQueueGenericSend+0x72>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <xQueueGenericSend+0x74>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <xQueueGenericSend+0x8e>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	623b      	str	r3, [r7, #32]
}
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028ae:	f001 fbd7 	bl	8004060 <xTaskGetSchedulerState>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <xQueueGenericSend+0x9e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <xQueueGenericSend+0xa2>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <xQueueGenericSend+0xa4>
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <xQueueGenericSend+0xbe>
	__asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	61fb      	str	r3, [r7, #28]
}
 80028da:	bf00      	nop
 80028dc:	e7fe      	b.n	80028dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028de:	f002 fad9 	bl	8004e94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <xQueueGenericSend+0xd4>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d129      	bne.n	8002948 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028fa:	f000 fc3b 	bl	8003174 <prvCopyDataToQueue>
 80028fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	2b00      	cmp	r3, #0
 8002906:	d010      	beq.n	800292a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	3324      	adds	r3, #36	; 0x24
 800290c:	4618      	mov	r0, r3
 800290e:	f001 f9eb 	bl	8003ce8 <xTaskRemoveFromEventList>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002918:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <xQueueGenericSend+0x1f8>)
 800291a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	e00a      	b.n	8002940 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <xQueueGenericSend+0x1f8>)
 8002932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002940:	f002 fad8 	bl	8004ef4 <vPortExitCritical>
				return pdPASS;
 8002944:	2301      	movs	r3, #1
 8002946:	e063      	b.n	8002a10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800294e:	f002 fad1 	bl	8004ef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002952:	2300      	movs	r3, #0
 8002954:	e05c      	b.n	8002a10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4618      	mov	r0, r3
 8002962:	f001 fa23 	bl	8003dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002966:	2301      	movs	r3, #1
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800296a:	f002 fac3 	bl	8004ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800296e:	f000 ff9d 	bl	80038ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002972:	f002 fa8f 	bl	8004e94 <vPortEnterCritical>
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800297c:	b25b      	sxtb	r3, r3
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002982:	d103      	bne.n	800298c <xQueueGenericSend+0x16c>
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002992:	b25b      	sxtb	r3, r3
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d103      	bne.n	80029a2 <xQueueGenericSend+0x182>
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a2:	f002 faa7 	bl	8004ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029a6:	1d3a      	adds	r2, r7, #4
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f001 fa12 	bl	8003dd8 <xTaskCheckForTimeOut>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d124      	bne.n	8002a04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029bc:	f000 fcd2 	bl	8003364 <prvIsQueueFull>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d018      	beq.n	80029f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	3310      	adds	r3, #16
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 f93a 	bl	8003c48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029d6:	f000 fc5d 	bl	8003294 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029da:	f000 ff75 	bl	80038c8 <xTaskResumeAll>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f47f af7c 	bne.w	80028de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <xQueueGenericSend+0x1f8>)
 80029e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	e772      	b.n	80028de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029fa:	f000 fc4b 	bl	8003294 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029fe:	f000 ff63 	bl	80038c8 <xTaskResumeAll>
 8002a02:	e76c      	b.n	80028de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a06:	f000 fc45 	bl	8003294 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a0a:	f000 ff5d 	bl	80038c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3738      	adds	r7, #56	; 0x38
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	e000ed04 	.word	0xe000ed04

08002a1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b090      	sub	sp, #64	; 0x40
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d103      	bne.n	8002a58 <xQueueGenericSendFromISR+0x3c>
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <xQueueGenericSendFromISR+0x40>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <xQueueGenericSendFromISR+0x42>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a74:	bf00      	nop
 8002a76:	e7fe      	b.n	8002a76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d103      	bne.n	8002a86 <xQueueGenericSendFromISR+0x6a>
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <xQueueGenericSendFromISR+0x6e>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <xQueueGenericSendFromISR+0x70>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	623b      	str	r3, [r7, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	e7fe      	b.n	8002aa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002aa6:	f002 fad7 	bl	8005058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002aaa:	f3ef 8211 	mrs	r2, BASEPRI
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	61fa      	str	r2, [r7, #28]
 8002ac0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d302      	bcc.n	8002ad8 <xQueueGenericSendFromISR+0xbc>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d12f      	bne.n	8002b38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002aee:	f000 fb41 	bl	8003174 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002af2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afa:	d112      	bne.n	8002b22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d016      	beq.n	8002b32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	3324      	adds	r3, #36	; 0x24
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 f8ed 	bl	8003ce8 <xTaskRemoveFromEventList>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e007      	b.n	8002b32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b26:	3301      	adds	r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	b25a      	sxtb	r2, r3
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002b32:	2301      	movs	r3, #1
 8002b34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002b36:	e001      	b.n	8002b3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3740      	adds	r7, #64	; 0x40
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b08e      	sub	sp, #56	; 0x38
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	623b      	str	r3, [r7, #32]
}
 8002b78:	bf00      	nop
 8002b7a:	e7fe      	b.n	8002b7a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <xQueueGiveFromISR+0x48>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	61fb      	str	r3, [r7, #28]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <xQueueGiveFromISR+0x58>
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <xQueueGiveFromISR+0x5c>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <xQueueGiveFromISR+0x5e>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <xQueueGiveFromISR+0x78>
	__asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	61bb      	str	r3, [r7, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	e7fe      	b.n	8002bc8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bca:	f002 fa45 	bl	8005058 <vPortValidateInterruptPriority>
	__asm volatile
 8002bce:	f3ef 8211 	mrs	r2, BASEPRI
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	617a      	str	r2, [r7, #20]
 8002be4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002be6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d22b      	bcs.n	8002c52 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d112      	bne.n	8002c3c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	3324      	adds	r3, #36	; 0x24
 8002c22:	4618      	mov	r0, r3
 8002c24:	f001 f860 	bl	8003ce8 <xTaskRemoveFromEventList>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00e      	beq.n	8002c4c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e007      	b.n	8002c4c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c40:	3301      	adds	r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	b25a      	sxtb	r2, r3
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c50:	e001      	b.n	8002c56 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f383 8811 	msr	BASEPRI, r3
}
 8002c60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3738      	adds	r7, #56	; 0x38
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	; 0x30
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <xQueueReceive+0x30>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	623b      	str	r3, [r7, #32]
}
 8002c98:	bf00      	nop
 8002c9a:	e7fe      	b.n	8002c9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <xQueueReceive+0x3e>
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <xQueueReceive+0x42>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <xQueueReceive+0x44>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <xQueueReceive+0x5e>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	61fb      	str	r3, [r7, #28]
}
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cca:	f001 f9c9 	bl	8004060 <xTaskGetSchedulerState>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <xQueueReceive+0x6e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <xQueueReceive+0x72>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <xQueueReceive+0x74>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <xQueueReceive+0x8e>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	61bb      	str	r3, [r7, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cfa:	f002 f8cb 	bl	8004e94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01f      	beq.n	8002d4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d0e:	f000 fa9b 	bl	8003248 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	1e5a      	subs	r2, r3, #1
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00f      	beq.n	8002d42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	3310      	adds	r3, #16
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 ffde 	bl	8003ce8 <xTaskRemoveFromEventList>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <xQueueReceive+0x1bc>)
 8002d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d42:	f002 f8d7 	bl	8004ef4 <vPortExitCritical>
				return pdPASS;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e069      	b.n	8002e1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d50:	f002 f8d0 	bl	8004ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e062      	b.n	8002e1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d5e:	f107 0310 	add.w	r3, r7, #16
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 f822 	bl	8003dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d6c:	f002 f8c2 	bl	8004ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d70:	f000 fd9c 	bl	80038ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d74:	f002 f88e 	bl	8004e94 <vPortEnterCritical>
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d7e:	b25b      	sxtb	r3, r3
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d103      	bne.n	8002d8e <xQueueReceive+0x122>
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d94:	b25b      	sxtb	r3, r3
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9a:	d103      	bne.n	8002da4 <xQueueReceive+0x138>
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da4:	f002 f8a6 	bl	8004ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002da8:	1d3a      	adds	r2, r7, #4
 8002daa:	f107 0310 	add.w	r3, r7, #16
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 f811 	bl	8003dd8 <xTaskCheckForTimeOut>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d123      	bne.n	8002e04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dbe:	f000 fabb 	bl	8003338 <prvIsQueueEmpty>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	3324      	adds	r3, #36	; 0x24
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 ff39 	bl	8003c48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd8:	f000 fa5c 	bl	8003294 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ddc:	f000 fd74 	bl	80038c8 <xTaskResumeAll>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d189      	bne.n	8002cfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <xQueueReceive+0x1bc>)
 8002de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	e780      	b.n	8002cfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfa:	f000 fa4b 	bl	8003294 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dfe:	f000 fd63 	bl	80038c8 <xTaskResumeAll>
 8002e02:	e77a      	b.n	8002cfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e06:	f000 fa45 	bl	8003294 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e0a:	f000 fd5d 	bl	80038c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e10:	f000 fa92 	bl	8003338 <prvIsQueueEmpty>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f43f af6f 	beq.w	8002cfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3730      	adds	r7, #48	; 0x30
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000ed04 	.word	0xe000ed04

08002e2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08e      	sub	sp, #56	; 0x38
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	623b      	str	r3, [r7, #32]
}
 8002e5a:	bf00      	nop
 8002e5c:	e7fe      	b.n	8002e5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	61fb      	str	r3, [r7, #28]
}
 8002e78:	bf00      	nop
 8002e7a:	e7fe      	b.n	8002e7a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e7c:	f001 f8f0 	bl	8004060 <xTaskGetSchedulerState>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <xQueueSemaphoreTake+0x60>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <xQueueSemaphoreTake+0x64>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <xQueueSemaphoreTake+0x66>
 8002e90:	2300      	movs	r3, #0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	61bb      	str	r3, [r7, #24]
}
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eac:	f001 fff2 	bl	8004e94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d024      	beq.n	8002f06 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002ecc:	f001 fa70 	bl	80043b0 <pvTaskIncrementMutexHeldCount>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00f      	beq.n	8002efe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	3310      	adds	r3, #16
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 ff00 	bl	8003ce8 <xTaskRemoveFromEventList>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002eee:	4b54      	ldr	r3, [pc, #336]	; (8003040 <xQueueSemaphoreTake+0x214>)
 8002ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002efe:	f001 fff9 	bl	8004ef4 <vPortExitCritical>
				return pdPASS;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e097      	b.n	8003036 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d111      	bne.n	8002f30 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	617b      	str	r3, [r7, #20]
}
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f28:	f001 ffe4 	bl	8004ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e082      	b.n	8003036 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f36:	f107 030c 	add.w	r3, r7, #12
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 ff36 	bl	8003dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f44:	f001 ffd6 	bl	8004ef4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f48:	f000 fcb0 	bl	80038ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f4c:	f001 ffa2 	bl	8004e94 <vPortEnterCritical>
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f56:	b25b      	sxtb	r3, r3
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d103      	bne.n	8002f66 <xQueueSemaphoreTake+0x13a>
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f72:	d103      	bne.n	8002f7c <xQueueSemaphoreTake+0x150>
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f7c:	f001 ffba 	bl	8004ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f80:	463a      	mov	r2, r7
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 ff25 	bl	8003dd8 <xTaskCheckForTimeOut>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d132      	bne.n	8002ffa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f96:	f000 f9cf 	bl	8003338 <prvIsQueueEmpty>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d026      	beq.n	8002fee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002fa8:	f001 ff74 	bl	8004e94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 f873 	bl	800409c <xTaskPriorityInherit>
 8002fb6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002fb8:	f001 ff9c 	bl	8004ef4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	3324      	adds	r3, #36	; 0x24
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fe3f 	bl	8003c48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fcc:	f000 f962 	bl	8003294 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fd0:	f000 fc7a 	bl	80038c8 <xTaskResumeAll>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f47f af68 	bne.w	8002eac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <xQueueSemaphoreTake+0x214>)
 8002fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	e75e      	b.n	8002eac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002fee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ff0:	f000 f950 	bl	8003294 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ff4:	f000 fc68 	bl	80038c8 <xTaskResumeAll>
 8002ff8:	e758      	b.n	8002eac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002ffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ffc:	f000 f94a 	bl	8003294 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003000:	f000 fc62 	bl	80038c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003006:	f000 f997 	bl	8003338 <prvIsQueueEmpty>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	f43f af4d 	beq.w	8002eac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003018:	f001 ff3c 	bl	8004e94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800301c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800301e:	f000 f891 	bl	8003144 <prvGetDisinheritPriorityAfterTimeout>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800302a:	4618      	mov	r0, r3
 800302c:	f001 f932 	bl	8004294 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003030:	f001 ff60 	bl	8004ef4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003034:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003036:	4618      	mov	r0, r3
 8003038:	3738      	adds	r7, #56	; 0x38
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08e      	sub	sp, #56	; 0x38
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	623b      	str	r3, [r7, #32]
}
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <xQueueReceiveFromISR+0x3a>
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <xQueueReceiveFromISR+0x3e>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <xQueueReceiveFromISR+0x40>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	61fb      	str	r3, [r7, #28]
}
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800309e:	f001 ffdb 	bl	8005058 <vPortValidateInterruptPriority>
	__asm volatile
 80030a2:	f3ef 8211 	mrs	r2, BASEPRI
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	61ba      	str	r2, [r7, #24]
 80030b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80030ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d02f      	beq.n	800312a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d8:	f000 f8b6 	bl	8003248 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	1e5a      	subs	r2, r3, #1
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80030e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d112      	bne.n	8003114 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	3310      	adds	r3, #16
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fdf4 	bl	8003ce8 <xTaskRemoveFromEventList>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00e      	beq.n	8003124 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e007      	b.n	8003124 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003118:	3301      	adds	r3, #1
 800311a:	b2db      	uxtb	r3, r3
 800311c:	b25a      	sxtb	r2, r3
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003124:	2301      	movs	r3, #1
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
 8003128:	e001      	b.n	800312e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800312a:	2300      	movs	r3, #0
 800312c:	637b      	str	r3, [r7, #52]	; 0x34
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003130:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f383 8811 	msr	BASEPRI, r3
}
 8003138:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800313a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800313c:	4618      	mov	r0, r3
 800313e:	3738      	adds	r7, #56	; 0x38
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1c3 0307 	rsb	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e001      	b.n	8003166 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003166:	68fb      	ldr	r3, [r7, #12]
	}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d14d      	bne.n	8003236 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fff2 	bl	8004188 <xTaskPriorityDisinherit>
 80031a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e043      	b.n	8003236 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d119      	bne.n	80031e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6858      	ldr	r0, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	461a      	mov	r2, r3
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	f002 f998 	bl	80054f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	441a      	add	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d32b      	bcc.n	8003236 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	e026      	b.n	8003236 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68d8      	ldr	r0, [r3, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	461a      	mov	r2, r3
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	f002 f97e 	bl	80054f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	425b      	negs	r3, r3
 8003202:	441a      	add	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d207      	bcs.n	8003224 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	425b      	negs	r3, r3
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d105      	bne.n	8003236 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	3b01      	subs	r3, #1
 8003234:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800323e:	697b      	ldr	r3, [r7, #20]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d018      	beq.n	800328c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	441a      	add	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	d303      	bcc.n	800327c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68d9      	ldr	r1, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	461a      	mov	r2, r3
 8003286:	6838      	ldr	r0, [r7, #0]
 8003288:	f002 f934 	bl	80054f4 <memcpy>
	}
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800329c:	f001 fdfa 	bl	8004e94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032a8:	e011      	b.n	80032ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3324      	adds	r3, #36	; 0x24
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fd16 	bl	8003ce8 <xTaskRemoveFromEventList>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032c2:	f000 fdeb 	bl	8003e9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	dce9      	bgt.n	80032aa <prvUnlockQueue+0x16>
 80032d6:	e000      	b.n	80032da <prvUnlockQueue+0x46>
					break;
 80032d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	22ff      	movs	r2, #255	; 0xff
 80032de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032e2:	f001 fe07 	bl	8004ef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032e6:	f001 fdd5 	bl	8004e94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032f2:	e011      	b.n	8003318 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d012      	beq.n	8003322 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3310      	adds	r3, #16
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fcf1 	bl	8003ce8 <xTaskRemoveFromEventList>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800330c:	f000 fdc6 	bl	8003e9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003310:	7bbb      	ldrb	r3, [r7, #14]
 8003312:	3b01      	subs	r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800331c:	2b00      	cmp	r3, #0
 800331e:	dce9      	bgt.n	80032f4 <prvUnlockQueue+0x60>
 8003320:	e000      	b.n	8003324 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003322:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	22ff      	movs	r2, #255	; 0xff
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800332c:	f001 fde2 	bl	8004ef4 <vPortExitCritical>
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003340:	f001 fda8 	bl	8004e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	2b00      	cmp	r3, #0
 800334a:	d102      	bne.n	8003352 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800334c:	2301      	movs	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e001      	b.n	8003356 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003356:	f001 fdcd 	bl	8004ef4 <vPortExitCritical>

	return xReturn;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800336c:	f001 fd92 	bl	8004e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003378:	429a      	cmp	r2, r3
 800337a:	d102      	bne.n	8003382 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800337c:	2301      	movs	r3, #1
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e001      	b.n	8003386 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003386:	f001 fdb5 	bl	8004ef4 <vPortExitCritical>

	return xReturn;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e014      	b.n	80033ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033a4:	4a0f      	ldr	r2, [pc, #60]	; (80033e4 <vQueueAddToRegistry+0x50>)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033b0:	490c      	ldr	r1, [pc, #48]	; (80033e4 <vQueueAddToRegistry+0x50>)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <vQueueAddToRegistry+0x50>)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033c6:	e006      	b.n	80033d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3301      	adds	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b07      	cmp	r3, #7
 80033d2:	d9e7      	bls.n	80033a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000778 	.word	0x20000778

080033e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033f8:	f001 fd4c 	bl	8004e94 <vPortEnterCritical>
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003402:	b25b      	sxtb	r3, r3
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d103      	bne.n	8003412 <vQueueWaitForMessageRestricted+0x2a>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003418:	b25b      	sxtb	r3, r3
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341e:	d103      	bne.n	8003428 <vQueueWaitForMessageRestricted+0x40>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003428:	f001 fd64 	bl	8004ef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	3324      	adds	r3, #36	; 0x24
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fc27 	bl	8003c90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003442:	6978      	ldr	r0, [r7, #20]
 8003444:	f7ff ff26 	bl	8003294 <prvUnlockQueue>
	}
 8003448:	bf00      	nop
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08e      	sub	sp, #56	; 0x38
 8003454:	af04      	add	r7, sp, #16
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	623b      	str	r3, [r7, #32]
}
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <xTaskCreateStatic+0x46>
	__asm volatile
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	61fb      	str	r3, [r7, #28]
}
 8003492:	bf00      	nop
 8003494:	e7fe      	b.n	8003494 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003496:	2354      	movs	r3, #84	; 0x54
 8003498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b54      	cmp	r3, #84	; 0x54
 800349e:	d00a      	beq.n	80034b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	61bb      	str	r3, [r7, #24]
}
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01e      	beq.n	80034fc <xTaskCreateStatic+0xac>
 80034be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034d6:	2300      	movs	r3, #0
 80034d8:	9303      	str	r3, [sp, #12]
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	9302      	str	r3, [sp, #8]
 80034de:	f107 0314 	add.w	r3, r7, #20
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f850 	bl	8003594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034f6:	f000 f8d5 	bl	80036a4 <prvAddNewTaskToReadyList>
 80034fa:	e001      	b.n	8003500 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003500:	697b      	ldr	r3, [r7, #20]
	}
 8003502:	4618      	mov	r0, r3
 8003504:	3728      	adds	r7, #40	; 0x28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800350a:	b580      	push	{r7, lr}
 800350c:	b08c      	sub	sp, #48	; 0x30
 800350e:	af04      	add	r7, sp, #16
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fdda 	bl	80050d8 <pvPortMalloc>
 8003524:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800352c:	2054      	movs	r0, #84	; 0x54
 800352e:	f001 fdd3 	bl	80050d8 <pvPortMalloc>
 8003532:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
 8003540:	e005      	b.n	800354e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003542:	6978      	ldr	r0, [r7, #20]
 8003544:	f001 fe94 	bl	8005270 <vPortFree>
 8003548:	e001      	b.n	800354e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d017      	beq.n	8003584 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	2300      	movs	r3, #0
 8003560:	9303      	str	r3, [sp, #12]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	9302      	str	r3, [sp, #8]
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f80e 	bl	8003594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003578:	69f8      	ldr	r0, [r7, #28]
 800357a:	f000 f893 	bl	80036a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800357e:	2301      	movs	r3, #1
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	e002      	b.n	800358a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
 8003588:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800358a:	69bb      	ldr	r3, [r7, #24]
	}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035ac:	3b01      	subs	r3, #1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f023 0307 	bic.w	r3, r3, #7
 80035ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	617b      	str	r3, [r7, #20]
}
 80035d8:	bf00      	nop
 80035da:	e7fe      	b.n	80035da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01f      	beq.n	8003622 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
 80035e6:	e012      	b.n	800360e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	7819      	ldrb	r1, [r3, #0]
 80035f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	3334      	adds	r3, #52	; 0x34
 80035f8:	460a      	mov	r2, r1
 80035fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d006      	beq.n	8003616 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	3301      	adds	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	2b0f      	cmp	r3, #15
 8003612:	d9e9      	bls.n	80035e8 <prvInitialiseNewTask+0x54>
 8003614:	e000      	b.n	8003618 <prvInitialiseNewTask+0x84>
			{
				break;
 8003616:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003620:	e003      	b.n	800362a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	2b06      	cmp	r3, #6
 800362e:	d901      	bls.n	8003634 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003630:	2306      	movs	r3, #6
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800363e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	2200      	movs	r2, #0
 8003644:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	3304      	adds	r3, #4
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe ff1a 	bl	8002484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	3318      	adds	r3, #24
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe ff15 	bl	8002484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	f1c3 0207 	rsb	r2, r3, #7
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800366e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	2200      	movs	r2, #0
 8003674:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	69b8      	ldr	r0, [r7, #24]
 8003684:	f001 fada 	bl	8004c3c <pxPortInitialiseStack>
 8003688:	4602      	mov	r2, r0
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800369a:	bf00      	nop
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036ac:	f001 fbf2 	bl	8004e94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036b0:	4b2a      	ldr	r3, [pc, #168]	; (800375c <prvAddNewTaskToReadyList+0xb8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	4a29      	ldr	r2, [pc, #164]	; (800375c <prvAddNewTaskToReadyList+0xb8>)
 80036b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036ba:	4b29      	ldr	r3, [pc, #164]	; (8003760 <prvAddNewTaskToReadyList+0xbc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036c2:	4a27      	ldr	r2, [pc, #156]	; (8003760 <prvAddNewTaskToReadyList+0xbc>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036c8:	4b24      	ldr	r3, [pc, #144]	; (800375c <prvAddNewTaskToReadyList+0xb8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d110      	bne.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036d0:	f000 fc08 	bl	8003ee4 <prvInitialiseTaskLists>
 80036d4:	e00d      	b.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <prvAddNewTaskToReadyList+0xc0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <prvAddNewTaskToReadyList+0xbc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d802      	bhi.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036ec:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <prvAddNewTaskToReadyList+0xbc>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036f2:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <prvAddNewTaskToReadyList+0xc4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3301      	adds	r3, #1
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <prvAddNewTaskToReadyList+0xc4>)
 80036fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	2201      	movs	r2, #1
 8003702:	409a      	lsls	r2, r3
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <prvAddNewTaskToReadyList+0xc8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4313      	orrs	r3, r2
 800370a:	4a18      	ldr	r2, [pc, #96]	; (800376c <prvAddNewTaskToReadyList+0xc8>)
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <prvAddNewTaskToReadyList+0xcc>)
 800371c:	441a      	add	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f7fe feba 	bl	800249e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800372a:	f001 fbe3 	bl	8004ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <prvAddNewTaskToReadyList+0xc0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00e      	beq.n	8003754 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <prvAddNewTaskToReadyList+0xbc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	429a      	cmp	r2, r3
 8003742:	d207      	bcs.n	8003754 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <prvAddNewTaskToReadyList+0xd0>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200008b8 	.word	0x200008b8
 8003760:	200007b8 	.word	0x200007b8
 8003764:	200008c4 	.word	0x200008c4
 8003768:	200008d4 	.word	0x200008d4
 800376c:	200008c0 	.word	0x200008c0
 8003770:	200007bc 	.word	0x200007bc
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d017      	beq.n	80037ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <vTaskDelay+0x60>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <vTaskDelay+0x30>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	60bb      	str	r3, [r7, #8]
}
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037a8:	f000 f880 	bl	80038ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037ac:	2100      	movs	r1, #0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fe12 	bl	80043d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037b4:	f000 f888 	bl	80038c8 <xTaskResumeAll>
 80037b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d107      	bne.n	80037d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <vTaskDelay+0x64>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	200008e0 	.word	0x200008e0
 80037dc:	e000ed04 	.word	0xe000ed04

080037e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037ee:	463a      	mov	r2, r7
 80037f0:	1d39      	adds	r1, r7, #4
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc fe6c 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037fc:	6839      	ldr	r1, [r7, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	9202      	str	r2, [sp, #8]
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	2300      	movs	r3, #0
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	2300      	movs	r3, #0
 800380c:	460a      	mov	r2, r1
 800380e:	4921      	ldr	r1, [pc, #132]	; (8003894 <vTaskStartScheduler+0xb4>)
 8003810:	4821      	ldr	r0, [pc, #132]	; (8003898 <vTaskStartScheduler+0xb8>)
 8003812:	f7ff fe1d 	bl	8003450 <xTaskCreateStatic>
 8003816:	4603      	mov	r3, r0
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <vTaskStartScheduler+0xbc>)
 800381a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800381c:	4b1f      	ldr	r3, [pc, #124]	; (800389c <vTaskStartScheduler+0xbc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003824:	2301      	movs	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e001      	b.n	800382e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d102      	bne.n	800383a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003834:	f000 fe36 	bl	80044a4 <xTimerCreateTimerTask>
 8003838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d116      	bne.n	800386e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	613b      	str	r3, [r7, #16]
}
 8003852:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <vTaskStartScheduler+0xc0>)
 8003856:	f04f 32ff 	mov.w	r2, #4294967295
 800385a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <vTaskStartScheduler+0xc4>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <vTaskStartScheduler+0xc8>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003868:	f001 fa72 	bl	8004d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800386c:	e00e      	b.n	800388c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d10a      	bne.n	800388c <vTaskStartScheduler+0xac>
	__asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	60fb      	str	r3, [r7, #12]
}
 8003888:	bf00      	nop
 800388a:	e7fe      	b.n	800388a <vTaskStartScheduler+0xaa>
}
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	08005590 	.word	0x08005590
 8003898:	08003eb5 	.word	0x08003eb5
 800389c:	200008dc 	.word	0x200008dc
 80038a0:	200008d8 	.word	0x200008d8
 80038a4:	200008c4 	.word	0x200008c4
 80038a8:	200008bc 	.word	0x200008bc

080038ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <vTaskSuspendAll+0x18>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a03      	ldr	r2, [pc, #12]	; (80038c4 <vTaskSuspendAll+0x18>)
 80038b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	200008e0 	.word	0x200008e0

080038c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038d6:	4b41      	ldr	r3, [pc, #260]	; (80039dc <xTaskResumeAll+0x114>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	603b      	str	r3, [r7, #0]
}
 80038f0:	bf00      	nop
 80038f2:	e7fe      	b.n	80038f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038f4:	f001 face 	bl	8004e94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038f8:	4b38      	ldr	r3, [pc, #224]	; (80039dc <xTaskResumeAll+0x114>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	4a37      	ldr	r2, [pc, #220]	; (80039dc <xTaskResumeAll+0x114>)
 8003900:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003902:	4b36      	ldr	r3, [pc, #216]	; (80039dc <xTaskResumeAll+0x114>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d161      	bne.n	80039ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800390a:	4b35      	ldr	r3, [pc, #212]	; (80039e0 <xTaskResumeAll+0x118>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d05d      	beq.n	80039ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003912:	e02e      	b.n	8003972 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003914:	4b33      	ldr	r3, [pc, #204]	; (80039e4 <xTaskResumeAll+0x11c>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3318      	adds	r3, #24
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fe19 	bl	8002558 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3304      	adds	r3, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fe14 	bl	8002558 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <xTaskResumeAll+0x120>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	4a2a      	ldr	r2, [pc, #168]	; (80039e8 <xTaskResumeAll+0x120>)
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4a27      	ldr	r2, [pc, #156]	; (80039ec <xTaskResumeAll+0x124>)
 8003950:	441a      	add	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3304      	adds	r3, #4
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f7fe fda0 	bl	800249e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <xTaskResumeAll+0x128>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	429a      	cmp	r2, r3
 800396a:	d302      	bcc.n	8003972 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <xTaskResumeAll+0x12c>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003972:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <xTaskResumeAll+0x11c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1cc      	bne.n	8003914 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003980:	f000 fb4e 	bl	8004020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <xTaskResumeAll+0x130>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d010      	beq.n	80039b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003990:	f000 f846 	bl	8003a20 <xTaskIncrementTick>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <xTaskResumeAll+0x12c>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f1      	bne.n	8003990 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <xTaskResumeAll+0x130>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <xTaskResumeAll+0x12c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039ba:	2301      	movs	r3, #1
 80039bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <xTaskResumeAll+0x134>)
 80039c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039ce:	f001 fa91 	bl	8004ef4 <vPortExitCritical>

	return xAlreadyYielded;
 80039d2:	68bb      	ldr	r3, [r7, #8]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200008e0 	.word	0x200008e0
 80039e0:	200008b8 	.word	0x200008b8
 80039e4:	20000878 	.word	0x20000878
 80039e8:	200008c0 	.word	0x200008c0
 80039ec:	200007bc 	.word	0x200007bc
 80039f0:	200007b8 	.word	0x200007b8
 80039f4:	200008cc 	.word	0x200008cc
 80039f8:	200008c8 	.word	0x200008c8
 80039fc:	e000ed04 	.word	0xe000ed04

08003a00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <xTaskGetTickCount+0x1c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a0c:	687b      	ldr	r3, [r7, #4]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	200008bc 	.word	0x200008bc

08003a20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2a:	4b4e      	ldr	r3, [pc, #312]	; (8003b64 <xTaskIncrementTick+0x144>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 808e 	bne.w	8003b50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a34:	4b4c      	ldr	r3, [pc, #304]	; (8003b68 <xTaskIncrementTick+0x148>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a3c:	4a4a      	ldr	r2, [pc, #296]	; (8003b68 <xTaskIncrementTick+0x148>)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d120      	bne.n	8003a8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a48:	4b48      	ldr	r3, [pc, #288]	; (8003b6c <xTaskIncrementTick+0x14c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	603b      	str	r3, [r7, #0]
}
 8003a64:	bf00      	nop
 8003a66:	e7fe      	b.n	8003a66 <xTaskIncrementTick+0x46>
 8003a68:	4b40      	ldr	r3, [pc, #256]	; (8003b6c <xTaskIncrementTick+0x14c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b40      	ldr	r3, [pc, #256]	; (8003b70 <xTaskIncrementTick+0x150>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3e      	ldr	r2, [pc, #248]	; (8003b6c <xTaskIncrementTick+0x14c>)
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4a3e      	ldr	r2, [pc, #248]	; (8003b70 <xTaskIncrementTick+0x150>)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b3d      	ldr	r3, [pc, #244]	; (8003b74 <xTaskIncrementTick+0x154>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	4a3c      	ldr	r2, [pc, #240]	; (8003b74 <xTaskIncrementTick+0x154>)
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	f000 facb 	bl	8004020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <xTaskIncrementTick+0x158>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d348      	bcc.n	8003b26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a94:	4b35      	ldr	r3, [pc, #212]	; (8003b6c <xTaskIncrementTick+0x14c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d104      	bne.n	8003aa8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a9e:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <xTaskIncrementTick+0x158>)
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa4:	601a      	str	r2, [r3, #0]
					break;
 8003aa6:	e03e      	b.n	8003b26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa8:	4b30      	ldr	r3, [pc, #192]	; (8003b6c <xTaskIncrementTick+0x14c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d203      	bcs.n	8003ac8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ac0:	4a2d      	ldr	r2, [pc, #180]	; (8003b78 <xTaskIncrementTick+0x158>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ac6:	e02e      	b.n	8003b26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fd43 	bl	8002558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3318      	adds	r3, #24
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fd3a 	bl	8002558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2201      	movs	r2, #1
 8003aea:	409a      	lsls	r2, r3
 8003aec:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <xTaskIncrementTick+0x15c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <xTaskIncrementTick+0x15c>)
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4a1f      	ldr	r2, [pc, #124]	; (8003b80 <xTaskIncrementTick+0x160>)
 8003b04:	441a      	add	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f7fe fcc6 	bl	800249e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b16:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <xTaskIncrementTick+0x164>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d3b9      	bcc.n	8003a94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b24:	e7b6      	b.n	8003a94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b26:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <xTaskIncrementTick+0x164>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	4914      	ldr	r1, [pc, #80]	; (8003b80 <xTaskIncrementTick+0x160>)
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d901      	bls.n	8003b42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <xTaskIncrementTick+0x168>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e004      	b.n	8003b5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <xTaskIncrementTick+0x16c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	4a0d      	ldr	r2, [pc, #52]	; (8003b8c <xTaskIncrementTick+0x16c>)
 8003b58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b5a:	697b      	ldr	r3, [r7, #20]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200008e0 	.word	0x200008e0
 8003b68:	200008bc 	.word	0x200008bc
 8003b6c:	20000870 	.word	0x20000870
 8003b70:	20000874 	.word	0x20000874
 8003b74:	200008d0 	.word	0x200008d0
 8003b78:	200008d8 	.word	0x200008d8
 8003b7c:	200008c0 	.word	0x200008c0
 8003b80:	200007bc 	.word	0x200007bc
 8003b84:	200007b8 	.word	0x200007b8
 8003b88:	200008cc 	.word	0x200008cc
 8003b8c:	200008c8 	.word	0x200008c8

08003b90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <vTaskSwitchContext+0xa4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b9e:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <vTaskSwitchContext+0xa8>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ba4:	e03f      	b.n	8003c26 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <vTaskSwitchContext+0xa8>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bac:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <vTaskSwitchContext+0xac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003bba:	7afb      	ldrb	r3, [r7, #11]
 8003bbc:	f1c3 031f 	rsb	r3, r3, #31
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	491f      	ldr	r1, [pc, #124]	; (8003c40 <vTaskSwitchContext+0xb0>)
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <vTaskSwitchContext+0x5c>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	607b      	str	r3, [r7, #4]
}
 8003be8:	bf00      	nop
 8003bea:	e7fe      	b.n	8003bea <vTaskSwitchContext+0x5a>
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <vTaskSwitchContext+0xb0>)
 8003bf8:	4413      	add	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d104      	bne.n	8003c1c <vTaskSwitchContext+0x8c>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4a08      	ldr	r2, [pc, #32]	; (8003c44 <vTaskSwitchContext+0xb4>)
 8003c24:	6013      	str	r3, [r2, #0]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	200008e0 	.word	0x200008e0
 8003c38:	200008cc 	.word	0x200008cc
 8003c3c:	200008c0 	.word	0x200008c0
 8003c40:	200007bc 	.word	0x200007bc
 8003c44:	200007b8 	.word	0x200007b8

08003c48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	60fb      	str	r3, [r7, #12]
}
 8003c6a:	bf00      	nop
 8003c6c:	e7fe      	b.n	8003c6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <vTaskPlaceOnEventList+0x44>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3318      	adds	r3, #24
 8003c74:	4619      	mov	r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fe fc35 	bl	80024e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	6838      	ldr	r0, [r7, #0]
 8003c80:	f000 fbaa 	bl	80043d8 <prvAddCurrentTaskToDelayedList>
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200007b8 	.word	0x200007b8

08003c90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	617b      	str	r3, [r7, #20]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3318      	adds	r3, #24
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7fe fbec 	bl	800249e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	68b8      	ldr	r0, [r7, #8]
 8003cd6:	f000 fb7f 	bl	80043d8 <prvAddCurrentTaskToDelayedList>
	}
 8003cda:	bf00      	nop
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200007b8 	.word	0x200007b8

08003ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	60fb      	str	r3, [r7, #12]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	3318      	adds	r3, #24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe fc1d 	bl	8002558 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <xTaskRemoveFromEventList+0xac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11c      	bne.n	8003d60 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe fc14 	bl	8002558 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2201      	movs	r2, #1
 8003d36:	409a      	lsls	r2, r3
 8003d38:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <xTaskRemoveFromEventList+0xb0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	4a16      	ldr	r2, [pc, #88]	; (8003d98 <xTaskRemoveFromEventList+0xb0>)
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <xTaskRemoveFromEventList+0xb4>)
 8003d50:	441a      	add	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f7fe fba0 	bl	800249e <vListInsertEnd>
 8003d5e:	e005      	b.n	8003d6c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	3318      	adds	r3, #24
 8003d64:	4619      	mov	r1, r3
 8003d66:	480e      	ldr	r0, [pc, #56]	; (8003da0 <xTaskRemoveFromEventList+0xb8>)
 8003d68:	f7fe fb99 	bl	800249e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <xTaskRemoveFromEventList+0xbc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d905      	bls.n	8003d86 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <xTaskRemoveFromEventList+0xc0>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e001      	b.n	8003d8a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d8a:	697b      	ldr	r3, [r7, #20]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	200008e0 	.word	0x200008e0
 8003d98:	200008c0 	.word	0x200008c0
 8003d9c:	200007bc 	.word	0x200007bc
 8003da0:	20000878 	.word	0x20000878
 8003da4:	200007b8 	.word	0x200007b8
 8003da8:	200008cc 	.word	0x200008cc

08003dac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <vTaskInternalSetTimeOutState+0x24>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <vTaskInternalSetTimeOutState+0x28>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	605a      	str	r2, [r3, #4]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	200008d0 	.word	0x200008d0
 8003dd4:	200008bc 	.word	0x200008bc

08003dd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	613b      	str	r3, [r7, #16]
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60fb      	str	r3, [r7, #12]
}
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e1a:	f001 f83b 	bl	8004e94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <xTaskCheckForTimeOut+0xbc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d102      	bne.n	8003e3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	e023      	b.n	8003e86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <xTaskCheckForTimeOut+0xc0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d007      	beq.n	8003e5a <xTaskCheckForTimeOut+0x82>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d302      	bcc.n	8003e5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e54:	2301      	movs	r3, #1
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	e015      	b.n	8003e86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d20b      	bcs.n	8003e7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad2      	subs	r2, r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff9b 	bl	8003dac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	e004      	b.n	8003e86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e82:	2301      	movs	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e86:	f001 f835 	bl	8004ef4 <vPortExitCritical>

	return xReturn;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200008bc 	.word	0x200008bc
 8003e98:	200008d0 	.word	0x200008d0

08003e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <vTaskMissedYield+0x14>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	200008cc 	.word	0x200008cc

08003eb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ebc:	f000 f852 	bl	8003f64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <prvIdleTask+0x28>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d9f9      	bls.n	8003ebc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <prvIdleTask+0x2c>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ed8:	e7f0      	b.n	8003ebc <prvIdleTask+0x8>
 8003eda:	bf00      	nop
 8003edc:	200007bc 	.word	0x200007bc
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	e00c      	b.n	8003f0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <prvInitialiseTaskLists+0x60>)
 8003efc:	4413      	add	r3, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe faa0 	bl	8002444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3301      	adds	r3, #1
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b06      	cmp	r3, #6
 8003f0e:	d9ef      	bls.n	8003ef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f10:	480d      	ldr	r0, [pc, #52]	; (8003f48 <prvInitialiseTaskLists+0x64>)
 8003f12:	f7fe fa97 	bl	8002444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f16:	480d      	ldr	r0, [pc, #52]	; (8003f4c <prvInitialiseTaskLists+0x68>)
 8003f18:	f7fe fa94 	bl	8002444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f1c:	480c      	ldr	r0, [pc, #48]	; (8003f50 <prvInitialiseTaskLists+0x6c>)
 8003f1e:	f7fe fa91 	bl	8002444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f22:	480c      	ldr	r0, [pc, #48]	; (8003f54 <prvInitialiseTaskLists+0x70>)
 8003f24:	f7fe fa8e 	bl	8002444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f28:	480b      	ldr	r0, [pc, #44]	; (8003f58 <prvInitialiseTaskLists+0x74>)
 8003f2a:	f7fe fa8b 	bl	8002444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <prvInitialiseTaskLists+0x78>)
 8003f30:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <prvInitialiseTaskLists+0x64>)
 8003f32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <prvInitialiseTaskLists+0x7c>)
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <prvInitialiseTaskLists+0x68>)
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	200007bc 	.word	0x200007bc
 8003f48:	20000848 	.word	0x20000848
 8003f4c:	2000085c 	.word	0x2000085c
 8003f50:	20000878 	.word	0x20000878
 8003f54:	2000088c 	.word	0x2000088c
 8003f58:	200008a4 	.word	0x200008a4
 8003f5c:	20000870 	.word	0x20000870
 8003f60:	20000874 	.word	0x20000874

08003f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f6a:	e019      	b.n	8003fa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f6c:	f000 ff92 	bl	8004e94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <prvCheckTasksWaitingTermination+0x50>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe faeb 	bl	8002558 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <prvCheckTasksWaitingTermination+0x54>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <prvCheckTasksWaitingTermination+0x54>)
 8003f8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <prvCheckTasksWaitingTermination+0x58>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <prvCheckTasksWaitingTermination+0x58>)
 8003f94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f96:	f000 ffad 	bl	8004ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f810 	bl	8003fc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <prvCheckTasksWaitingTermination+0x58>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e1      	bne.n	8003f6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	2000088c 	.word	0x2000088c
 8003fb8:	200008b8 	.word	0x200008b8
 8003fbc:	200008a0 	.word	0x200008a0

08003fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d108      	bne.n	8003fe4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 f94a 	bl	8005270 <vPortFree>
				vPortFree( pxTCB );
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f001 f947 	bl	8005270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fe2:	e018      	b.n	8004016 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d103      	bne.n	8003ff6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f001 f93e 	bl	8005270 <vPortFree>
	}
 8003ff4:	e00f      	b.n	8004016 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d00a      	beq.n	8004016 <prvDeleteTCB+0x56>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <prvDeleteTCB+0x54>
	}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <prvResetNextTaskUnblockTime+0x38>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d104      	bne.n	800403a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <prvResetNextTaskUnblockTime+0x3c>)
 8004032:	f04f 32ff 	mov.w	r2, #4294967295
 8004036:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004038:	e008      	b.n	800404c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <prvResetNextTaskUnblockTime+0x38>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <prvResetNextTaskUnblockTime+0x3c>)
 800404a:	6013      	str	r3, [r2, #0]
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	20000870 	.word	0x20000870
 800405c:	200008d8 	.word	0x200008d8

08004060 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <xTaskGetSchedulerState+0x34>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800406e:	2301      	movs	r3, #1
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	e008      	b.n	8004086 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004074:	4b08      	ldr	r3, [pc, #32]	; (8004098 <xTaskGetSchedulerState+0x38>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800407c:	2302      	movs	r3, #2
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	e001      	b.n	8004086 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004086:	687b      	ldr	r3, [r7, #4]
	}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	200008c4 	.word	0x200008c4
 8004098:	200008e0 	.word	0x200008e0

0800409c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d05e      	beq.n	8004170 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b6:	4b31      	ldr	r3, [pc, #196]	; (800417c <xTaskPriorityInherit+0xe0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	429a      	cmp	r2, r3
 80040be:	d24e      	bcs.n	800415e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db06      	blt.n	80040d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c8:	4b2c      	ldr	r3, [pc, #176]	; (800417c <xTaskPriorityInherit+0xe0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	f1c3 0207 	rsb	r2, r3, #7
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6959      	ldr	r1, [r3, #20]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4a26      	ldr	r2, [pc, #152]	; (8004180 <xTaskPriorityInherit+0xe4>)
 80040e8:	4413      	add	r3, r2
 80040ea:	4299      	cmp	r1, r3
 80040ec:	d12f      	bne.n	800414e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fa30 	bl	8002558 <uxListRemove>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	2201      	movs	r2, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43da      	mvns	r2, r3
 800410a:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <xTaskPriorityInherit+0xe8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4013      	ands	r3, r2
 8004110:	4a1c      	ldr	r2, [pc, #112]	; (8004184 <xTaskPriorityInherit+0xe8>)
 8004112:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <xTaskPriorityInherit+0xe0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	2201      	movs	r2, #1
 8004124:	409a      	lsls	r2, r3
 8004126:	4b17      	ldr	r3, [pc, #92]	; (8004184 <xTaskPriorityInherit+0xe8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4313      	orrs	r3, r2
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <xTaskPriorityInherit+0xe8>)
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4a10      	ldr	r2, [pc, #64]	; (8004180 <xTaskPriorityInherit+0xe4>)
 800413e:	441a      	add	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f7fe f9a9 	bl	800249e <vListInsertEnd>
 800414c:	e004      	b.n	8004158 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <xTaskPriorityInherit+0xe0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e008      	b.n	8004170 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <xTaskPriorityInherit+0xe0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	429a      	cmp	r2, r3
 800416a:	d201      	bcs.n	8004170 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800416c:	2301      	movs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004170:	68fb      	ldr	r3, [r7, #12]
	}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	200007b8 	.word	0x200007b8
 8004180:	200007bc 	.word	0x200007bc
 8004184:	200008c0 	.word	0x200008c0

08004188 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d06e      	beq.n	800427c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800419e:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <xTaskPriorityDisinherit+0x100>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d00a      	beq.n	80041be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	60fb      	str	r3, [r7, #12]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	60bb      	str	r3, [r7, #8]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e0:	1e5a      	subs	r2, r3, #1
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d044      	beq.n	800427c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d140      	bne.n	800427c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe f9aa 	bl	8002558 <uxListRemove>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d115      	bne.n	8004236 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420e:	491f      	ldr	r1, [pc, #124]	; (800428c <xTaskPriorityDisinherit+0x104>)
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <xTaskPriorityDisinherit+0xae>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	2201      	movs	r2, #1
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43da      	mvns	r2, r3
 800422c:	4b18      	ldr	r3, [pc, #96]	; (8004290 <xTaskPriorityDisinherit+0x108>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4013      	ands	r3, r2
 8004232:	4a17      	ldr	r2, [pc, #92]	; (8004290 <xTaskPriorityDisinherit+0x108>)
 8004234:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f1c3 0207 	rsb	r2, r3, #7
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	2201      	movs	r2, #1
 8004250:	409a      	lsls	r2, r3
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <xTaskPriorityDisinherit+0x108>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4313      	orrs	r3, r2
 8004258:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <xTaskPriorityDisinherit+0x108>)
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4a08      	ldr	r2, [pc, #32]	; (800428c <xTaskPriorityDisinherit+0x104>)
 800426a:	441a      	add	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	3304      	adds	r3, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4610      	mov	r0, r2
 8004274:	f7fe f913 	bl	800249e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800427c:	697b      	ldr	r3, [r7, #20]
	}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	200007b8 	.word	0x200007b8
 800428c:	200007bc 	.word	0x200007bc
 8004290:	200008c0 	.word	0x200008c0

08004294 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d077      	beq.n	800439c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	60fb      	str	r3, [r7, #12]
}
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d902      	bls.n	80042da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	e002      	b.n	80042e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d058      	beq.n	800439c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d153      	bne.n	800439c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d10a      	bne.n	8004314 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	60bb      	str	r3, [r7, #8]
}
 8004310:	bf00      	nop
 8004312:	e7fe      	b.n	8004312 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	db04      	blt.n	8004332 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f1c3 0207 	rsb	r2, r3, #7
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	6959      	ldr	r1, [r3, #20]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4a19      	ldr	r2, [pc, #100]	; (80043a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004342:	4413      	add	r3, r2
 8004344:	4299      	cmp	r1, r3
 8004346:	d129      	bne.n	800439c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	3304      	adds	r3, #4
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe f903 	bl	8002558 <uxListRemove>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	2201      	movs	r2, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	4b11      	ldr	r3, [pc, #68]	; (80043ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4013      	ands	r3, r2
 800436a:	4a10      	ldr	r2, [pc, #64]	; (80043ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800436c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	2201      	movs	r2, #1
 8004374:	409a      	lsls	r2, r3
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4a06      	ldr	r2, [pc, #24]	; (80043a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800438e:	441a      	add	r2, r3
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7fe f881 	bl	800249e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800439c:	bf00      	nop
 800439e:	3720      	adds	r7, #32
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	200007b8 	.word	0x200007b8
 80043a8:	200007bc 	.word	0x200007bc
 80043ac:	200008c0 	.word	0x200008c0

080043b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80043b4:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043c2:	3201      	adds	r2, #1
 80043c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80043c6:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80043c8:	681b      	ldr	r3, [r3, #0]
	}
 80043ca:	4618      	mov	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	200007b8 	.word	0x200007b8

080043d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043e2:	4b29      	ldr	r3, [pc, #164]	; (8004488 <prvAddCurrentTaskToDelayedList+0xb0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e8:	4b28      	ldr	r3, [pc, #160]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3304      	adds	r3, #4
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe f8b2 	bl	8002558 <uxListRemove>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	2201      	movs	r2, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43da      	mvns	r2, r3
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <prvAddCurrentTaskToDelayedList+0xb8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4013      	ands	r3, r2
 800440e:	4a20      	ldr	r2, [pc, #128]	; (8004490 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004410:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d10a      	bne.n	8004430 <prvAddCurrentTaskToDelayedList+0x58>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004420:	4b1a      	ldr	r3, [pc, #104]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	481a      	ldr	r0, [pc, #104]	; (8004494 <prvAddCurrentTaskToDelayedList+0xbc>)
 800442a:	f7fe f838 	bl	800249e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800442e:	e026      	b.n	800447e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d209      	bcs.n	800445c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <prvAddCurrentTaskToDelayedList+0xc0>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7fe f846 	bl	80024e6 <vListInsert>
}
 800445a:	e010      	b.n	800447e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <prvAddCurrentTaskToDelayedList+0xc4>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3304      	adds	r3, #4
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f7fe f83c 	bl	80024e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	429a      	cmp	r2, r3
 8004476:	d202      	bcs.n	800447e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004478:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6013      	str	r3, [r2, #0]
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200008bc 	.word	0x200008bc
 800448c:	200007b8 	.word	0x200007b8
 8004490:	200008c0 	.word	0x200008c0
 8004494:	200008a4 	.word	0x200008a4
 8004498:	20000874 	.word	0x20000874
 800449c:	20000870 	.word	0x20000870
 80044a0:	200008d8 	.word	0x200008d8

080044a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044ae:	f000 fb85 	bl	8004bbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044b2:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <xTimerCreateTimerTask+0x80>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d021      	beq.n	80044fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044c2:	1d3a      	adds	r2, r7, #4
 80044c4:	f107 0108 	add.w	r1, r7, #8
 80044c8:	f107 030c 	add.w	r3, r7, #12
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fc f81b 	bl	8000508 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	9202      	str	r2, [sp, #8]
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	2302      	movs	r3, #2
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2300      	movs	r3, #0
 80044e2:	460a      	mov	r2, r1
 80044e4:	4910      	ldr	r1, [pc, #64]	; (8004528 <xTimerCreateTimerTask+0x84>)
 80044e6:	4811      	ldr	r0, [pc, #68]	; (800452c <xTimerCreateTimerTask+0x88>)
 80044e8:	f7fe ffb2 	bl	8003450 <xTaskCreateStatic>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4a10      	ldr	r2, [pc, #64]	; (8004530 <xTimerCreateTimerTask+0x8c>)
 80044f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044f2:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <xTimerCreateTimerTask+0x8c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044fa:	2301      	movs	r3, #1
 80044fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	613b      	str	r3, [r7, #16]
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800451a:	697b      	ldr	r3, [r7, #20]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000914 	.word	0x20000914
 8004528:	08005598 	.word	0x08005598
 800452c:	0800479d 	.word	0x0800479d
 8004530:	20000918 	.word	0x20000918

08004534 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004542:	2028      	movs	r0, #40	; 0x28
 8004544:	f000 fdc8 	bl	80050d8 <pvPortMalloc>
 8004548:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00d      	beq.n	800456c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f843 	bl	80045f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800456c:	697b      	ldr	r3, [r7, #20]
	}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08a      	sub	sp, #40	; 0x28
 800457a:	af02      	add	r7, sp, #8
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004584:	2328      	movs	r3, #40	; 0x28
 8004586:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b28      	cmp	r3, #40	; 0x28
 800458c:	d00a      	beq.n	80045a4 <xTimerCreateStatic+0x2e>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	61bb      	str	r3, [r7, #24]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <xTimerCreateStatic+0x4c>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	617b      	str	r3, [r7, #20]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f805 	bl	80045f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80045e8:	69fb      	ldr	r3, [r7, #28]
	}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	617b      	str	r3, [r7, #20]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01e      	beq.n	8004660 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004622:	f000 facb 	bl	8004bbc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	6a3a      	ldr	r2, [r7, #32]
 800463c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	3304      	adds	r3, #4
 8004642:	4618      	mov	r0, r3
 8004644:	f7fd ff1e 	bl	8002484 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004654:	f043 0304 	orr.w	r3, r3, #4
 8004658:	b2da      	uxtb	r2, r3
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004660:	bf00      	nop
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004676:	2300      	movs	r3, #0
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	623b      	str	r3, [r7, #32]
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004696:	4b1a      	ldr	r3, [pc, #104]	; (8004700 <xTimerGenericCommand+0x98>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d02a      	beq.n	80046f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	dc18      	bgt.n	80046e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046b0:	f7ff fcd6 	bl	8004060 <xTaskGetSchedulerState>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d109      	bne.n	80046ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046ba:	4b11      	ldr	r3, [pc, #68]	; (8004700 <xTimerGenericCommand+0x98>)
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	f107 0114 	add.w	r1, r7, #20
 80046c2:	2300      	movs	r3, #0
 80046c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c6:	f7fe f8ab 	bl	8002820 <xQueueGenericSend>
 80046ca:	6278      	str	r0, [r7, #36]	; 0x24
 80046cc:	e012      	b.n	80046f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <xTimerGenericCommand+0x98>)
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	f107 0114 	add.w	r1, r7, #20
 80046d6:	2300      	movs	r3, #0
 80046d8:	2200      	movs	r2, #0
 80046da:	f7fe f8a1 	bl	8002820 <xQueueGenericSend>
 80046de:	6278      	str	r0, [r7, #36]	; 0x24
 80046e0:	e008      	b.n	80046f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046e2:	4b07      	ldr	r3, [pc, #28]	; (8004700 <xTimerGenericCommand+0x98>)
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	f107 0114 	add.w	r1, r7, #20
 80046ea:	2300      	movs	r3, #0
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	f7fe f995 	bl	8002a1c <xQueueGenericSendFromISR>
 80046f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3728      	adds	r7, #40	; 0x28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000914 	.word	0x20000914

08004704 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af02      	add	r7, sp, #8
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470e:	4b22      	ldr	r3, [pc, #136]	; (8004798 <prvProcessExpiredTimer+0x94>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	3304      	adds	r3, #4
 800471c:	4618      	mov	r0, r3
 800471e:	f7fd ff1b 	bl	8002558 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d022      	beq.n	8004776 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	18d1      	adds	r1, r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	6978      	ldr	r0, [r7, #20]
 800473e:	f000 f8d1 	bl	80048e4 <prvInsertTimerInActiveList>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01f      	beq.n	8004788 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004748:	2300      	movs	r3, #0
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	2300      	movs	r3, #0
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	2100      	movs	r1, #0
 8004752:	6978      	ldr	r0, [r7, #20]
 8004754:	f7ff ff88 	bl	8004668 <xTimerGenericCommand>
 8004758:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d113      	bne.n	8004788 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	60fb      	str	r3, [r7, #12]
}
 8004772:	bf00      	nop
 8004774:	e7fe      	b.n	8004774 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	b2da      	uxtb	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	6978      	ldr	r0, [r7, #20]
 800478e:	4798      	blx	r3
}
 8004790:	bf00      	nop
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	2000090c 	.word	0x2000090c

0800479c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047a4:	f107 0308 	add.w	r3, r7, #8
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f857 	bl	800485c <prvGetNextExpireTime>
 80047ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4619      	mov	r1, r3
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f803 	bl	80047c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047ba:	f000 f8d5 	bl	8004968 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047be:	e7f1      	b.n	80047a4 <prvTimerTask+0x8>

080047c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047ca:	f7ff f86f 	bl	80038ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047ce:	f107 0308 	add.w	r3, r7, #8
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f866 	bl	80048a4 <prvSampleTimeNow>
 80047d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d130      	bne.n	8004842 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <prvProcessTimerOrBlockTask+0x3c>
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d806      	bhi.n	80047fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047ee:	f7ff f86b 	bl	80038c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047f2:	68f9      	ldr	r1, [r7, #12]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff ff85 	bl	8004704 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047fa:	e024      	b.n	8004846 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <prvProcessTimerOrBlockTask+0x90>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <prvProcessTimerOrBlockTask+0x50>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <prvProcessTimerOrBlockTask+0x52>
 8004810:	2300      	movs	r3, #0
 8004812:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <prvProcessTimerOrBlockTask+0x94>)
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	4619      	mov	r1, r3
 8004822:	f7fe fde1 	bl	80033e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004826:	f7ff f84f 	bl	80038c8 <xTaskResumeAll>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <prvProcessTimerOrBlockTask+0x98>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
}
 8004840:	e001      	b.n	8004846 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004842:	f7ff f841 	bl	80038c8 <xTaskResumeAll>
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000910 	.word	0x20000910
 8004854:	20000914 	.word	0x20000914
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004864:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <prvGetNextExpireTime+0x44>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <prvGetNextExpireTime+0x16>
 800486e:	2201      	movs	r2, #1
 8004870:	e000      	b.n	8004874 <prvGetNextExpireTime+0x18>
 8004872:	2200      	movs	r2, #0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <prvGetNextExpireTime+0x44>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e001      	b.n	8004890 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004890:	68fb      	ldr	r3, [r7, #12]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	2000090c 	.word	0x2000090c

080048a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048ac:	f7ff f8a8 	bl	8003a00 <xTaskGetTickCount>
 80048b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <prvSampleTimeNow+0x3c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d205      	bcs.n	80048c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048bc:	f000 f91a 	bl	8004af4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e002      	b.n	80048ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048ce:	4a04      	ldr	r2, [pc, #16]	; (80048e0 <prvSampleTimeNow+0x3c>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048d4:	68fb      	ldr	r3, [r7, #12]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	2000091c 	.word	0x2000091c

080048e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d812      	bhi.n	8004930 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	1ad2      	subs	r2, r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	429a      	cmp	r2, r3
 8004916:	d302      	bcc.n	800491e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e01b      	b.n	8004956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <prvInsertTimerInActiveList+0x7c>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fd fddc 	bl	80024e6 <vListInsert>
 800492e:	e012      	b.n	8004956 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d206      	bcs.n	8004946 <prvInsertTimerInActiveList+0x62>
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d302      	bcc.n	8004946 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e007      	b.n	8004956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004946:	4b07      	ldr	r3, [pc, #28]	; (8004964 <prvInsertTimerInActiveList+0x80>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3304      	adds	r3, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f7fd fdc8 	bl	80024e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004956:	697b      	ldr	r3, [r7, #20]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000910 	.word	0x20000910
 8004964:	2000090c 	.word	0x2000090c

08004968 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08c      	sub	sp, #48	; 0x30
 800496c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800496e:	e0ae      	b.n	8004ace <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f2c0 80aa 	blt.w	8004acc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fd fde5 	bl	8002558 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800498e:	1d3b      	adds	r3, r7, #4
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff ff87 	bl	80048a4 <prvSampleTimeNow>
 8004996:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b09      	cmp	r3, #9
 800499c:	f200 8097 	bhi.w	8004ace <prvProcessReceivedCommands+0x166>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <prvProcessReceivedCommands+0x40>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d1 	.word	0x080049d1
 80049b4:	08004a45 	.word	0x08004a45
 80049b8:	08004a59 	.word	0x08004a59
 80049bc:	08004aa3 	.word	0x08004aa3
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049d1 	.word	0x080049d1
 80049c8:	08004a45 	.word	0x08004a45
 80049cc:	08004a59 	.word	0x08004a59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	18d1      	adds	r1, r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a3a      	ldr	r2, [r7, #32]
 80049ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049f0:	f7ff ff78 	bl	80048e4 <prvInsertTimerInActiveList>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d069      	beq.n	8004ace <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d05e      	beq.n	8004ace <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	441a      	add	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2100      	movs	r1, #0
 8004a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a22:	f7ff fe21 	bl	8004668 <xTimerGenericCommand>
 8004a26:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d14f      	bne.n	8004ace <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	61bb      	str	r3, [r7, #24]
}
 8004a40:	bf00      	nop
 8004a42:	e7fe      	b.n	8004a42 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004a56:	e03a      	b.n	8004ace <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	617b      	str	r3, [r7, #20]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	18d1      	adds	r1, r2, r3
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	6a3a      	ldr	r2, [r7, #32]
 8004a9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a9c:	f7ff ff22 	bl	80048e4 <prvInsertTimerInActiveList>
					break;
 8004aa0:	e015      	b.n	8004ace <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d103      	bne.n	8004ab8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ab2:	f000 fbdd 	bl	8005270 <vPortFree>
 8004ab6:	e00a      	b.n	8004ace <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004aca:	e000      	b.n	8004ace <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004acc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ace:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <prvProcessReceivedCommands+0x188>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f107 0108 	add.w	r1, r7, #8
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fe f8c7 	bl	8002c6c <xQueueReceive>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f47f af45 	bne.w	8004970 <prvProcessReceivedCommands+0x8>
	}
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	3728      	adds	r7, #40	; 0x28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20000914 	.word	0x20000914

08004af4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004afa:	e048      	b.n	8004b8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004afc:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <prvSwitchTimerLists+0xc0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b06:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <prvSwitchTimerLists+0xc0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fd fd1f 	bl	8002558 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02e      	beq.n	8004b8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d90e      	bls.n	8004b60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b4e:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <prvSwitchTimerLists+0xc0>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f7fd fcc4 	bl	80024e6 <vListInsert>
 8004b5e:	e016      	b.n	8004b8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b60:	2300      	movs	r3, #0
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2300      	movs	r3, #0
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	2100      	movs	r1, #0
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff fd7c 	bl	8004668 <xTimerGenericCommand>
 8004b70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	603b      	str	r3, [r7, #0]
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b8e:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <prvSwitchTimerLists+0xc0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1b1      	bne.n	8004afc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <prvSwitchTimerLists+0xc0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <prvSwitchTimerLists+0xc4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <prvSwitchTimerLists+0xc0>)
 8004ba4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ba6:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <prvSwitchTimerLists+0xc4>)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	2000090c 	.word	0x2000090c
 8004bb8:	20000910 	.word	0x20000910

08004bbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bc2:	f000 f967 	bl	8004e94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bc6:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <prvCheckForValidListAndQueue+0x60>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d120      	bne.n	8004c10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bce:	4814      	ldr	r0, [pc, #80]	; (8004c20 <prvCheckForValidListAndQueue+0x64>)
 8004bd0:	f7fd fc38 	bl	8002444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bd4:	4813      	ldr	r0, [pc, #76]	; (8004c24 <prvCheckForValidListAndQueue+0x68>)
 8004bd6:	f7fd fc35 	bl	8002444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <prvCheckForValidListAndQueue+0x6c>)
 8004bdc:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <prvCheckForValidListAndQueue+0x64>)
 8004bde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004be0:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <prvCheckForValidListAndQueue+0x70>)
 8004be2:	4a10      	ldr	r2, [pc, #64]	; (8004c24 <prvCheckForValidListAndQueue+0x68>)
 8004be4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004be6:	2300      	movs	r3, #0
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <prvCheckForValidListAndQueue+0x74>)
 8004bec:	4a11      	ldr	r2, [pc, #68]	; (8004c34 <prvCheckForValidListAndQueue+0x78>)
 8004bee:	210c      	movs	r1, #12
 8004bf0:	200a      	movs	r0, #10
 8004bf2:	f7fd fd43 	bl	800267c <xQueueGenericCreateStatic>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <prvCheckForValidListAndQueue+0x60>)
 8004bfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <prvCheckForValidListAndQueue+0x60>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <prvCheckForValidListAndQueue+0x60>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	490b      	ldr	r1, [pc, #44]	; (8004c38 <prvCheckForValidListAndQueue+0x7c>)
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fbc2 	bl	8003394 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c10:	f000 f970 	bl	8004ef4 <vPortExitCritical>
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000914 	.word	0x20000914
 8004c20:	200008e4 	.word	0x200008e4
 8004c24:	200008f8 	.word	0x200008f8
 8004c28:	2000090c 	.word	0x2000090c
 8004c2c:	20000910 	.word	0x20000910
 8004c30:	20000998 	.word	0x20000998
 8004c34:	20000920 	.word	0x20000920
 8004c38:	080055a0 	.word	0x080055a0

08004c3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3b04      	subs	r3, #4
 8004c4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3b04      	subs	r3, #4
 8004c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f023 0201 	bic.w	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3b04      	subs	r3, #4
 8004c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ca0 <pxPortInitialiseStack+0x64>)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3b14      	subs	r3, #20
 8004c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3b04      	subs	r3, #4
 8004c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f06f 0202 	mvn.w	r2, #2
 8004c8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b20      	subs	r3, #32
 8004c90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c92:	68fb      	ldr	r3, [r7, #12]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	08004ca5 	.word	0x08004ca5

08004ca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <prvTaskExitError+0x54>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d00a      	beq.n	8004cce <prvTaskExitError+0x2a>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60fb      	str	r3, [r7, #12]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <prvTaskExitError+0x28>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	60bb      	str	r3, [r7, #8]
}
 8004ce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ce2:	bf00      	nop
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0fc      	beq.n	8004ce4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	2000000c 	.word	0x2000000c
 8004cfc:	00000000 	.word	0x00000000

08004d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <pxCurrentTCBConst2>)
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	6808      	ldr	r0, [r1, #0]
 8004d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0a:	f380 8809 	msr	PSP, r0
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f04f 0000 	mov.w	r0, #0
 8004d16:	f380 8811 	msr	BASEPRI, r0
 8004d1a:	4770      	bx	lr
 8004d1c:	f3af 8000 	nop.w

08004d20 <pxCurrentTCBConst2>:
 8004d20:	200007b8 	.word	0x200007b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop

08004d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d28:	4808      	ldr	r0, [pc, #32]	; (8004d4c <prvPortStartFirstTask+0x24>)
 8004d2a:	6800      	ldr	r0, [r0, #0]
 8004d2c:	6800      	ldr	r0, [r0, #0]
 8004d2e:	f380 8808 	msr	MSP, r0
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f380 8814 	msr	CONTROL, r0
 8004d3a:	b662      	cpsie	i
 8004d3c:	b661      	cpsie	f
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	df00      	svc	0
 8004d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d4a:	bf00      	nop
 8004d4c:	e000ed08 	.word	0xe000ed08

08004d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d56:	4b46      	ldr	r3, [pc, #280]	; (8004e70 <xPortStartScheduler+0x120>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a46      	ldr	r2, [pc, #280]	; (8004e74 <xPortStartScheduler+0x124>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10a      	bne.n	8004d76 <xPortStartScheduler+0x26>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	613b      	str	r3, [r7, #16]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d76:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <xPortStartScheduler+0x120>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a3f      	ldr	r2, [pc, #252]	; (8004e78 <xPortStartScheduler+0x128>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d10a      	bne.n	8004d96 <xPortStartScheduler+0x46>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	60fb      	str	r3, [r7, #12]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d96:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <xPortStartScheduler+0x12c>)
 8004d98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	22ff      	movs	r2, #255	; 0xff
 8004da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <xPortStartScheduler+0x130>)
 8004dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dbe:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <xPortStartScheduler+0x134>)
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dc4:	e009      	b.n	8004dda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <xPortStartScheduler+0x134>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	4a2d      	ldr	r2, [pc, #180]	; (8004e84 <xPortStartScheduler+0x134>)
 8004dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de2:	2b80      	cmp	r3, #128	; 0x80
 8004de4:	d0ef      	beq.n	8004dc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004de6:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <xPortStartScheduler+0x134>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f1c3 0307 	rsb	r3, r3, #7
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d00a      	beq.n	8004e08 <xPortStartScheduler+0xb8>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	60bb      	str	r3, [r7, #8]
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <xPortStartScheduler+0x134>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <xPortStartScheduler+0x134>)
 8004e10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <xPortStartScheduler+0x134>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e1a:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <xPortStartScheduler+0x134>)
 8004e1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e26:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <xPortStartScheduler+0x138>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <xPortStartScheduler+0x138>)
 8004e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e32:	4b15      	ldr	r3, [pc, #84]	; (8004e88 <xPortStartScheduler+0x138>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <xPortStartScheduler+0x138>)
 8004e38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e3e:	f000 f8dd 	bl	8004ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <xPortStartScheduler+0x13c>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e48:	f000 f8fc 	bl	8005044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <xPortStartScheduler+0x140>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0f      	ldr	r2, [pc, #60]	; (8004e90 <xPortStartScheduler+0x140>)
 8004e52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e58:	f7ff ff66 	bl	8004d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e5c:	f7fe fe98 	bl	8003b90 <vTaskSwitchContext>
	prvTaskExitError();
 8004e60:	f7ff ff20 	bl	8004ca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	e000ed00 	.word	0xe000ed00
 8004e74:	410fc271 	.word	0x410fc271
 8004e78:	410fc270 	.word	0x410fc270
 8004e7c:	e000e400 	.word	0xe000e400
 8004e80:	200009e0 	.word	0x200009e0
 8004e84:	200009e4 	.word	0x200009e4
 8004e88:	e000ed20 	.word	0xe000ed20
 8004e8c:	2000000c 	.word	0x2000000c
 8004e90:	e000ef34 	.word	0xe000ef34

08004e94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	607b      	str	r3, [r7, #4]
}
 8004eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004eae:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <vPortEnterCritical+0x58>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	4a0d      	ldr	r2, [pc, #52]	; (8004eec <vPortEnterCritical+0x58>)
 8004eb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <vPortEnterCritical+0x58>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d10f      	bne.n	8004ee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <vPortEnterCritical+0x5c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	603b      	str	r3, [r7, #0]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <vPortEnterCritical+0x4a>
	}
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	2000000c 	.word	0x2000000c
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004efa:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <vPortExitCritical+0x50>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <vPortExitCritical+0x24>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	607b      	str	r3, [r7, #4]
}
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <vPortExitCritical+0x50>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <vPortExitCritical+0x50>)
 8004f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <vPortExitCritical+0x50>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d105      	bne.n	8004f36 <vPortExitCritical+0x42>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f383 8811 	msr	BASEPRI, r3
}
 8004f34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	2000000c 	.word	0x2000000c
	...

08004f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f50:	f3ef 8009 	mrs	r0, PSP
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	4b15      	ldr	r3, [pc, #84]	; (8004fb0 <pxCurrentTCBConst>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	f01e 0f10 	tst.w	lr, #16
 8004f60:	bf08      	it	eq
 8004f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6a:	6010      	str	r0, [r2, #0]
 8004f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f74:	f380 8811 	msr	BASEPRI, r0
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f7fe fe06 	bl	8003b90 <vTaskSwitchContext>
 8004f84:	f04f 0000 	mov.w	r0, #0
 8004f88:	f380 8811 	msr	BASEPRI, r0
 8004f8c:	bc09      	pop	{r0, r3}
 8004f8e:	6819      	ldr	r1, [r3, #0]
 8004f90:	6808      	ldr	r0, [r1, #0]
 8004f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f96:	f01e 0f10 	tst.w	lr, #16
 8004f9a:	bf08      	it	eq
 8004f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fa0:	f380 8809 	msr	PSP, r0
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	f3af 8000 	nop.w

08004fb0 <pxCurrentTCBConst>:
 8004fb0:	200007b8 	.word	0x200007b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop

08004fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	607b      	str	r3, [r7, #4]
}
 8004fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fd2:	f7fe fd25 	bl	8003a20 <xTaskIncrementTick>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fdc:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <SysTick_Handler+0x40>)
 8004fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f383 8811 	msr	BASEPRI, r3
}
 8004fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	e000ed04 	.word	0xe000ed04

08004ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <vPortSetupTimerInterrupt+0x34>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005006:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <vPortSetupTimerInterrupt+0x38>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <vPortSetupTimerInterrupt+0x3c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0a      	ldr	r2, [pc, #40]	; (800503c <vPortSetupTimerInterrupt+0x40>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	4a09      	ldr	r2, [pc, #36]	; (8005040 <vPortSetupTimerInterrupt+0x44>)
 800501a:	3b01      	subs	r3, #1
 800501c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800501e:	4b04      	ldr	r3, [pc, #16]	; (8005030 <vPortSetupTimerInterrupt+0x34>)
 8005020:	2207      	movs	r2, #7
 8005022:	601a      	str	r2, [r3, #0]
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	e000e010 	.word	0xe000e010
 8005034:	e000e018 	.word	0xe000e018
 8005038:	20000000 	.word	0x20000000
 800503c:	10624dd3 	.word	0x10624dd3
 8005040:	e000e014 	.word	0xe000e014

08005044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005054 <vPortEnableVFP+0x10>
 8005048:	6801      	ldr	r1, [r0, #0]
 800504a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800504e:	6001      	str	r1, [r0, #0]
 8005050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005052:	bf00      	nop
 8005054:	e000ed88 	.word	0xe000ed88

08005058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800505e:	f3ef 8305 	mrs	r3, IPSR
 8005062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d914      	bls.n	8005094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800506a:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <vPortValidateInterruptPriority+0x70>)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005074:	4b15      	ldr	r3, [pc, #84]	; (80050cc <vPortValidateInterruptPriority+0x74>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	7afa      	ldrb	r2, [r7, #11]
 800507a:	429a      	cmp	r2, r3
 800507c:	d20a      	bcs.n	8005094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	607b      	str	r3, [r7, #4]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005094:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <vPortValidateInterruptPriority+0x78>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800509c:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <vPortValidateInterruptPriority+0x7c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d90a      	bls.n	80050ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	603b      	str	r3, [r7, #0]
}
 80050b6:	bf00      	nop
 80050b8:	e7fe      	b.n	80050b8 <vPortValidateInterruptPriority+0x60>
	}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	e000e3f0 	.word	0xe000e3f0
 80050cc:	200009e0 	.word	0x200009e0
 80050d0:	e000ed0c 	.word	0xe000ed0c
 80050d4:	200009e4 	.word	0x200009e4

080050d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	; 0x28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050e4:	f7fe fbe2 	bl	80038ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050e8:	4b5b      	ldr	r3, [pc, #364]	; (8005258 <pvPortMalloc+0x180>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050f0:	f000 f920 	bl	8005334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050f4:	4b59      	ldr	r3, [pc, #356]	; (800525c <pvPortMalloc+0x184>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 8093 	bne.w	8005228 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01d      	beq.n	8005144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005108:	2208      	movs	r2, #8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4413      	add	r3, r2
 800510e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b00      	cmp	r3, #0
 8005118:	d014      	beq.n	8005144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f023 0307 	bic.w	r3, r3, #7
 8005120:	3308      	adds	r3, #8
 8005122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <pvPortMalloc+0x6c>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	617b      	str	r3, [r7, #20]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d06e      	beq.n	8005228 <pvPortMalloc+0x150>
 800514a:	4b45      	ldr	r3, [pc, #276]	; (8005260 <pvPortMalloc+0x188>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d869      	bhi.n	8005228 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005154:	4b43      	ldr	r3, [pc, #268]	; (8005264 <pvPortMalloc+0x18c>)
 8005156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005158:	4b42      	ldr	r3, [pc, #264]	; (8005264 <pvPortMalloc+0x18c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800515e:	e004      	b.n	800516a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	d903      	bls.n	800517c <pvPortMalloc+0xa4>
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f1      	bne.n	8005160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800517c:	4b36      	ldr	r3, [pc, #216]	; (8005258 <pvPortMalloc+0x180>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005182:	429a      	cmp	r2, r3
 8005184:	d050      	beq.n	8005228 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2208      	movs	r2, #8
 800518c:	4413      	add	r3, r2
 800518e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	1ad2      	subs	r2, r2, r3
 80051a0:	2308      	movs	r3, #8
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d91f      	bls.n	80051e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <pvPortMalloc+0xf8>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	613b      	str	r3, [r7, #16]
}
 80051cc:	bf00      	nop
 80051ce:	e7fe      	b.n	80051ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051e2:	69b8      	ldr	r0, [r7, #24]
 80051e4:	f000 f908 	bl	80053f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051e8:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <pvPortMalloc+0x188>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <pvPortMalloc+0x188>)
 80051f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051f6:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <pvPortMalloc+0x188>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <pvPortMalloc+0x190>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d203      	bcs.n	800520a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005202:	4b17      	ldr	r3, [pc, #92]	; (8005260 <pvPortMalloc+0x188>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a18      	ldr	r2, [pc, #96]	; (8005268 <pvPortMalloc+0x190>)
 8005208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	4b13      	ldr	r3, [pc, #76]	; (800525c <pvPortMalloc+0x184>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	431a      	orrs	r2, r3
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800521e:	4b13      	ldr	r3, [pc, #76]	; (800526c <pvPortMalloc+0x194>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3301      	adds	r3, #1
 8005224:	4a11      	ldr	r2, [pc, #68]	; (800526c <pvPortMalloc+0x194>)
 8005226:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005228:	f7fe fb4e 	bl	80038c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <pvPortMalloc+0x174>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60fb      	str	r3, [r7, #12]
}
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <pvPortMalloc+0x172>
	return pvReturn;
 800524c:	69fb      	ldr	r3, [r7, #28]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3728      	adds	r7, #40	; 0x28
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	200045f0 	.word	0x200045f0
 800525c:	20004604 	.word	0x20004604
 8005260:	200045f4 	.word	0x200045f4
 8005264:	200045e8 	.word	0x200045e8
 8005268:	200045f8 	.word	0x200045f8
 800526c:	200045fc 	.word	0x200045fc

08005270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d04d      	beq.n	800531e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005282:	2308      	movs	r3, #8
 8005284:	425b      	negs	r3, r3
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4413      	add	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	4b24      	ldr	r3, [pc, #144]	; (8005328 <vPortFree+0xb8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <vPortFree+0x44>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60fb      	str	r3, [r7, #12]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <vPortFree+0x62>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	60bb      	str	r3, [r7, #8]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	4b14      	ldr	r3, [pc, #80]	; (8005328 <vPortFree+0xb8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4013      	ands	r3, r2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01e      	beq.n	800531e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d11a      	bne.n	800531e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <vPortFree+0xb8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	43db      	mvns	r3, r3
 80052f2:	401a      	ands	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052f8:	f7fe fad8 	bl	80038ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <vPortFree+0xbc>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4413      	add	r3, r2
 8005306:	4a09      	ldr	r2, [pc, #36]	; (800532c <vPortFree+0xbc>)
 8005308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800530a:	6938      	ldr	r0, [r7, #16]
 800530c:	f000 f874 	bl	80053f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <vPortFree+0xc0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	4a06      	ldr	r2, [pc, #24]	; (8005330 <vPortFree+0xc0>)
 8005318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800531a:	f7fe fad5 	bl	80038c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800531e:	bf00      	nop
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20004604 	.word	0x20004604
 800532c:	200045f4 	.word	0x200045f4
 8005330:	20004600 	.word	0x20004600

08005334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800533a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800533e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005340:	4b27      	ldr	r3, [pc, #156]	; (80053e0 <prvHeapInit+0xac>)
 8005342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00c      	beq.n	8005368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3307      	adds	r3, #7
 8005352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0307 	bic.w	r3, r3, #7
 800535a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <prvHeapInit+0xac>)
 8005364:	4413      	add	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800536c:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <prvHeapInit+0xb0>)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005372:	4b1c      	ldr	r3, [pc, #112]	; (80053e4 <prvHeapInit+0xb0>)
 8005374:	2200      	movs	r2, #0
 8005376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	4413      	add	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005380:	2208      	movs	r2, #8
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0307 	bic.w	r3, r3, #7
 800538e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <prvHeapInit+0xb4>)
 8005394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <prvHeapInit+0xb4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2200      	movs	r2, #0
 800539c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800539e:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <prvHeapInit+0xb4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <prvHeapInit+0xb4>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <prvHeapInit+0xb8>)
 80053c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <prvHeapInit+0xbc>)
 80053ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053cc:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <prvHeapInit+0xc0>)
 80053ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053d2:	601a      	str	r2, [r3, #0]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	200009e8 	.word	0x200009e8
 80053e4:	200045e8 	.word	0x200045e8
 80053e8:	200045f0 	.word	0x200045f0
 80053ec:	200045f8 	.word	0x200045f8
 80053f0:	200045f4 	.word	0x200045f4
 80053f4:	20004604 	.word	0x20004604

080053f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005400:	4b28      	ldr	r3, [pc, #160]	; (80054a4 <prvInsertBlockIntoFreeList+0xac>)
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	e002      	b.n	800540c <prvInsertBlockIntoFreeList+0x14>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	d8f7      	bhi.n	8005406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	4413      	add	r3, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d108      	bne.n	800543a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	441a      	add	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	441a      	add	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d118      	bne.n	8005480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b15      	ldr	r3, [pc, #84]	; (80054a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d00d      	beq.n	8005476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	e008      	b.n	8005488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005476:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e003      	b.n	8005488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	429a      	cmp	r2, r3
 800548e:	d002      	beq.n	8005496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	200045e8 	.word	0x200045e8
 80054a8:	200045f0 	.word	0x200045f0

080054ac <__libc_init_array>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	4d0d      	ldr	r5, [pc, #52]	; (80054e4 <__libc_init_array+0x38>)
 80054b0:	4c0d      	ldr	r4, [pc, #52]	; (80054e8 <__libc_init_array+0x3c>)
 80054b2:	1b64      	subs	r4, r4, r5
 80054b4:	10a4      	asrs	r4, r4, #2
 80054b6:	2600      	movs	r6, #0
 80054b8:	42a6      	cmp	r6, r4
 80054ba:	d109      	bne.n	80054d0 <__libc_init_array+0x24>
 80054bc:	4d0b      	ldr	r5, [pc, #44]	; (80054ec <__libc_init_array+0x40>)
 80054be:	4c0c      	ldr	r4, [pc, #48]	; (80054f0 <__libc_init_array+0x44>)
 80054c0:	f000 f82e 	bl	8005520 <_init>
 80054c4:	1b64      	subs	r4, r4, r5
 80054c6:	10a4      	asrs	r4, r4, #2
 80054c8:	2600      	movs	r6, #0
 80054ca:	42a6      	cmp	r6, r4
 80054cc:	d105      	bne.n	80054da <__libc_init_array+0x2e>
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d4:	4798      	blx	r3
 80054d6:	3601      	adds	r6, #1
 80054d8:	e7ee      	b.n	80054b8 <__libc_init_array+0xc>
 80054da:	f855 3b04 	ldr.w	r3, [r5], #4
 80054de:	4798      	blx	r3
 80054e0:	3601      	adds	r6, #1
 80054e2:	e7f2      	b.n	80054ca <__libc_init_array+0x1e>
 80054e4:	080055d8 	.word	0x080055d8
 80054e8:	080055d8 	.word	0x080055d8
 80054ec:	080055d8 	.word	0x080055d8
 80054f0:	080055dc 	.word	0x080055dc

080054f4 <memcpy>:
 80054f4:	440a      	add	r2, r1
 80054f6:	4291      	cmp	r1, r2
 80054f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054fc:	d100      	bne.n	8005500 <memcpy+0xc>
 80054fe:	4770      	bx	lr
 8005500:	b510      	push	{r4, lr}
 8005502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800550a:	4291      	cmp	r1, r2
 800550c:	d1f9      	bne.n	8005502 <memcpy+0xe>
 800550e:	bd10      	pop	{r4, pc}

08005510 <memset>:
 8005510:	4402      	add	r2, r0
 8005512:	4603      	mov	r3, r0
 8005514:	4293      	cmp	r3, r2
 8005516:	d100      	bne.n	800551a <memset+0xa>
 8005518:	4770      	bx	lr
 800551a:	f803 1b01 	strb.w	r1, [r3], #1
 800551e:	e7f9      	b.n	8005514 <memset+0x4>

08005520 <_init>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr

0800552c <_fini>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr
