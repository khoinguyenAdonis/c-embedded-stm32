
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e18  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001fa0  08001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fb8  08001fb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001fb8  08001fb8  00011fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fc0  08001fc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fc0  08001fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fc4  08001fc4  00011fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000024  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005b4f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001393  00000000  00000000  00025b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f8  00000000  00000000  00026f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000540  00000000  00000000  00027518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228ba  00000000  00000000  00027a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000066bd  00000000  00000000  0004a312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf499  00000000  00000000  000509cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011fe68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000169c  00000000  00000000  0011feb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f88 	.word	0x08001f88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001f88 	.word	0x08001f88

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <__NVIC_GetPriorityGrouping+0x18>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	0a1b      	lsrs	r3, r3, #8
 80004d6:	f003 0307 	and.w	r3, r3, #7
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db0b      	blt.n	8000512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 021f 	and.w	r2, r3, #31
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <__NVIC_EnableIRQ+0x38>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000e100 	.word	0xe000e100

08000524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db0a      	blt.n	800054e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	490c      	ldr	r1, [pc, #48]	; (8000570 <__NVIC_SetPriority+0x4c>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	0112      	lsls	r2, r2, #4
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	440b      	add	r3, r1
 8000548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800054c:	e00a      	b.n	8000564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <__NVIC_SetPriority+0x50>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	3b04      	subs	r3, #4
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	440b      	add	r3, r1
 8000562:	761a      	strb	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000e100 	.word	0xe000e100
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000578:	b480      	push	{r7}
 800057a:	b089      	sub	sp, #36	; 0x24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	f1c3 0307 	rsb	r3, r3, #7
 8000592:	2b04      	cmp	r3, #4
 8000594:	bf28      	it	cs
 8000596:	2304      	movcs	r3, #4
 8000598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	3304      	adds	r3, #4
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d902      	bls.n	80005a8 <NVIC_EncodePriority+0x30>
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3b03      	subs	r3, #3
 80005a6:	e000      	b.n	80005aa <NVIC_EncodePriority+0x32>
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43da      	mvns	r2, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	401a      	ands	r2, r3
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c0:	f04f 31ff 	mov.w	r1, #4294967295
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43d9      	mvns	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	4313      	orrs	r3, r2
         );
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3724      	adds	r7, #36	; 0x24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0UL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d103      	bne.n	80005fc <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	334c      	adds	r3, #76	; 0x4c
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e001      	b.n	8000600 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register CDR */
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <LL_ADC_DMA_GetRegAddr+0x30>)
 80005fe:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 8000600:	68fb      	ldr	r3, [r7, #12]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40012308 	.word	0x40012308

08000614 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_TSVREFE | ADC_CCR_VBATE, PathInternal);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	431a      	orrs	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800063a:	b480      	push	{r7}
 800063c:	b089      	sub	sp, #36	; 0x24
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	332c      	adds	r3, #44	; 0x2c
 800064a:	4619      	mov	r1, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000652:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000656:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	fa92 f2a2 	rbit	r2, r2
 800065e:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000660:	697a      	ldr	r2, [r7, #20]
 8000662:	fab2 f282 	clz	r2, r2
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	40d3      	lsrs	r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	440b      	add	r3, r1
 800066e:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	f003 031f 	and.w	r3, r3, #31
 800067a:	211f      	movs	r1, #31
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	401a      	ands	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 011f 	and.w	r1, r3, #31
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	f003 031f 	and.w	r3, r3, #31
 8000690:	fa01 f303 	lsl.w	r3, r1, r3
 8000694:	431a      	orrs	r2, r3
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800069a:	bf00      	nop
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA | ADC_CR2_DDS, DMATransfer);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	431a      	orrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	609a      	str	r2, [r3, #8]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	431a      	orrs	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	609a      	str	r2, [r3, #8]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b08d      	sub	sp, #52	; 0x34
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	330c      	adds	r3, #12
 8000702:	4619      	mov	r1, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800070a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800070e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000710:	69ba      	ldr	r2, [r7, #24]
 8000712:	fa92 f2a2 	rbit	r2, r2
 8000716:	617a      	str	r2, [r7, #20]
  return result;
 8000718:	697a      	ldr	r2, [r7, #20]
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	40d3      	lsrs	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	440b      	add	r3, r1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8000728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000732:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000736:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000738:	6a39      	ldr	r1, [r7, #32]
 800073a:	fa91 f1a1 	rbit	r1, r1
 800073e:	61f9      	str	r1, [r7, #28]
  return result;
 8000740:	69f9      	ldr	r1, [r7, #28]
 8000742:	fab1 f181 	clz	r1, r1
 8000746:	b2c9      	uxtb	r1, r1
 8000748:	40cb      	lsrs	r3, r1
 800074a:	2107      	movs	r1, #7
 800074c:	fa01 f303 	lsl.w	r3, r1, r3
 8000750:	43db      	mvns	r3, r3
 8000752:	401a      	ands	r2, r3
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800075a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800075e:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000762:	fa91 f1a1 	rbit	r1, r1
 8000766:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8000768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800076a:	fab1 f181 	clz	r1, r1
 800076e:	b2c9      	uxtb	r1, r1
 8000770:	40cb      	lsrs	r3, r1
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	fa01 f303 	lsl.w	r3, r1, r3
 8000778:	431a      	orrs	r2, r3
 800077a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077c:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800077e:	bf00      	nop
 8000780:	3734      	adds	r7, #52	; 0x34
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	609a      	str	r2, [r3, #8]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80007b6:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <LL_DMA_EnableStream+0x3c>)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <LL_DMA_EnableStream+0x3c>)
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	440a      	add	r2, r1
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	4611      	mov	r1, r2
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	440a      	add	r2, r1
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6013      	str	r3, [r2, #0]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	08001fa0 	.word	0x08001fa0

080007ec <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80007f6:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <LL_DMA_DisableStream+0x3c>)
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <LL_DMA_DisableStream+0x3c>)
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	440a      	add	r2, r1
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	4611      	mov	r1, r2
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	440a      	add	r2, r1
 8000814:	f023 0301 	bic.w	r3, r3, #1
 8000818:	6013      	str	r3, [r2, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	08001fa0 	.word	0x08001fa0

0800082c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <LL_DMA_SetDataTransferDirection+0x44>)
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4413      	add	r3, r2
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800084c:	4908      	ldr	r1, [pc, #32]	; (8000870 <LL_DMA_SetDataTransferDirection+0x44>)
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	440b      	add	r3, r1
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	440b      	add	r3, r1
 800085a:	4619      	mov	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4313      	orrs	r3, r2
 8000860:	600b      	str	r3, [r1, #0]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	08001fa0 	.word	0x08001fa0

08000874 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LL_DMA_SetMode+0x44>)
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	4413      	add	r3, r2
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000894:	4908      	ldr	r1, [pc, #32]	; (80008b8 <LL_DMA_SetMode+0x44>)
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	440b      	add	r3, r1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	440b      	add	r3, r1
 80008a2:	4619      	mov	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	600b      	str	r3, [r1, #0]
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	08001fa0 	.word	0x08001fa0

080008bc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <LL_DMA_SetPeriphIncMode+0x44>)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	4413      	add	r3, r2
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80008dc:	4908      	ldr	r1, [pc, #32]	; (8000900 <LL_DMA_SetPeriphIncMode+0x44>)
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	440b      	add	r3, r1
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	440b      	add	r3, r1
 80008ea:	4619      	mov	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	600b      	str	r3, [r1, #0]
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	08001fa0 	.word	0x08001fa0

08000904 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LL_DMA_SetMemoryIncMode+0x44>)
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000924:	4908      	ldr	r1, [pc, #32]	; (8000948 <LL_DMA_SetMemoryIncMode+0x44>)
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	440b      	add	r3, r1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	440b      	add	r3, r1
 8000932:	4619      	mov	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4313      	orrs	r3, r2
 8000938:	600b      	str	r3, [r1, #0]
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	08001fa0 	.word	0x08001fa0

0800094c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LL_DMA_SetPeriphSize+0x44>)
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	4413      	add	r3, r2
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800096c:	4908      	ldr	r1, [pc, #32]	; (8000990 <LL_DMA_SetPeriphSize+0x44>)
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	440b      	add	r3, r1
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	440b      	add	r3, r1
 800097a:	4619      	mov	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4313      	orrs	r3, r2
 8000980:	600b      	str	r3, [r1, #0]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	08001fa0 	.word	0x08001fa0

08000994 <LL_DMA_GetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  */
__STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE));
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <LL_DMA_GetMemorySize+0x2c>)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	08001fa0 	.word	0x08001fa0

080009c4 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80009e4:	4908      	ldr	r1, [pc, #32]	; (8000a08 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	440b      	add	r3, r1
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	440b      	add	r3, r1
 80009f2:	4619      	mov	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	600b      	str	r3, [r1, #0]
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	08001fa0 	.word	0x08001fa0

08000a0c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <LL_DMA_SetDataLength+0x44>)
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4413      	add	r3, r2
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	0c1b      	lsrs	r3, r3, #16
 8000a2a:	041b      	lsls	r3, r3, #16
 8000a2c:	4908      	ldr	r1, [pc, #32]	; (8000a50 <LL_DMA_SetDataLength+0x44>)
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	440a      	add	r2, r1
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	4611      	mov	r1, r2
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	440a      	add	r2, r1
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	604b      	str	r3, [r1, #4]
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	08001fa0 	.word	0x08001fa0

08000a54 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <LL_DMA_SetChannelSelection+0x44>)
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000a74:	4908      	ldr	r1, [pc, #32]	; (8000a98 <LL_DMA_SetChannelSelection+0x44>)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	440b      	add	r3, r1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	440b      	add	r3, r1
 8000a82:	4619      	mov	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	600b      	str	r3, [r1, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	08001fa0 	.word	0x08001fa0

08000a9c <LL_DMA_SetMemoryBurstxfer>:
  *         @arg @ref LL_DMA_MBURST_INC8
  *         @arg @ref LL_DMA_MBURST_INC16
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mburst)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	4413      	add	r3, r2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 8000abc:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	440b      	add	r3, r1
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	440b      	add	r3, r1
 8000aca:	4619      	mov	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	08001fa0 	.word	0x08001fa0

08000ae4 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <LL_DMA_DisableFifoMode+0x3c>)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <LL_DMA_DisableFifoMode+0x3c>)
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	440a      	add	r2, r1
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	4611      	mov	r1, r2
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	440a      	add	r2, r1
 8000b0c:	f023 0304 	bic.w	r3, r3, #4
 8000b10:	6153      	str	r3, [r2, #20]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	08001fa0 	.word	0x08001fa0

08000b24 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <LL_DMA_SetMemoryAddress+0x2c>)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	461a      	mov	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	08001fa0 	.word	0x08001fa0

08000b54 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <LL_DMA_SetPeriphAddress+0x2c>)
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	4413      	add	r3, r2
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	461a      	mov	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6093      	str	r3, [r2, #8]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	08001fa0 	.word	0x08001fa0

08000b84 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000b8e:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <LL_DMA_EnableIT_TC+0x3c>)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <LL_DMA_EnableIT_TC+0x3c>)
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	440a      	add	r2, r1
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	440a      	add	r2, r1
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6013      	str	r3, [r2, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	08001fa0 	.word	0x08001fa0

08000bc4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4013      	ands	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000c22:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c26:	f7ff ffcd 	bl	8000bc4 <LL_APB2_GRP1_EnableClock>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c2a:	f7ff fc4f 	bl	80004cc <__NVIC_GetPriorityGrouping>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fc9f 	bl	8000578 <NVIC_EncodePriority>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2012      	movs	r0, #18
 8000c40:	f7ff fc70 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8000c44:	2012      	movs	r0, #18
 8000c46:	f7ff fc4f 	bl	80004e8 <__NVIC_EnableIRQ>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481a      	ldr	r0, [pc, #104]	; (8000cc8 <MX_ADC1_Init+0xd4>)
 8000c5e:	f001 f8f9 	bl	8001e54 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <MX_ADC1_Init+0xd4>)
 8000c7e:	f001 f915 	bl	8001eac <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8000c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c86:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <MX_ADC1_Init+0xd4>)
 8000c88:	f7ff fd20 	bl	80006cc <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	603b      	str	r3, [r7, #0]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <MX_ADC1_Init+0xd8>)
 8000c9a:	f001 f893 	bl	8001dc4 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_VREFINT);
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <MX_ADC1_Init+0xdc>)
 8000ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <MX_ADC1_Init+0xd4>)
 8000ca6:	f7ff fcc8 	bl	800063a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_3CYCLES);
 8000caa:	2200      	movs	r2, #0
 8000cac:	4908      	ldr	r1, [pc, #32]	; (8000cd0 <MX_ADC1_Init+0xdc>)
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <MX_ADC1_Init+0xd4>)
 8000cb0:	f7ff fd1f 	bl	80006f2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8000cb4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_ADC1_Init+0xd8>)
 8000cba:	f7ff fcab 	bl	8000614 <LL_ADC_SetCommonPathInternalCh>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	3730      	adds	r7, #48	; 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40012000 	.word	0x40012000
 8000ccc:	40012300 	.word	0x40012300
 8000cd0:	81500011 	.word	0x81500011

08000cd4 <DMA_Start>:
void change_conver(void)
{
 // data = start_adc();
}
void DMA_Start(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
   LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8000cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <DMA_Start+0x14>)
 8000cde:	f7ff fce2 	bl	80006a6 <LL_ADC_REG_SetDMATransfer>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40012000 	.word	0x40012000

08000cec <ADC_config_DMA>:
void ADC_config_DMA(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  // disable dma
  LL_DMA_DisableStream(DMA2,LL_DMA_STREAM_0);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	482b      	ldr	r0, [pc, #172]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000cf4:	f7ff fd7a 	bl	80007ec <LL_DMA_DisableStream>
  
  //get address pheria
  LL_DMA_SetPeriphAddress(DMA2,LL_DMA_STREAM_0,LL_ADC_DMA_GetRegAddr(ADC1,LL_ADC_DMA_REG_REGULAR_DATA));
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	482a      	ldr	r0, [pc, #168]	; (8000da4 <ADC_config_DMA+0xb8>)
 8000cfc:	f7ff fc70 	bl	80005e0 <LL_ADC_DMA_GetRegAddr>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	2100      	movs	r1, #0
 8000d06:	4826      	ldr	r0, [pc, #152]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d08:	f7ff ff24 	bl	8000b54 <LL_DMA_SetPeriphAddress>
  // set memory address 
  LL_DMA_SetMemoryAddress(DMA2,LL_DMA_STREAM_0,(uint32_t)&DMABuffer);
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <ADC_config_DMA+0xbc>)
 8000d0e:	461a      	mov	r2, r3
 8000d10:	2100      	movs	r1, #0
 8000d12:	4823      	ldr	r0, [pc, #140]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d14:	f7ff ff06 	bl	8000b24 <LL_DMA_SetMemoryAddress>
  // configure number of data 
  LL_DMA_SetDataLength(DMA2,LL_DMA_STREAM_0,32UL);
 8000d18:	2220      	movs	r2, #32
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4820      	ldr	r0, [pc, #128]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d1e:	f7ff fe75 	bl	8000a0c <LL_DMA_SetDataLength>
  // select channel DMA
  LL_DMA_SetChannelSelection(DMA2,LL_DMA_STREAM_0,LL_DMA_CHANNEL_0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	481e      	ldr	r0, [pc, #120]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d28:	f7ff fe94 	bl	8000a54 <LL_DMA_SetChannelSelection>
  // select stream priority level
  LL_DMA_SetStreamPriorityLevel(DMA2,LL_DMA_STREAM_0,LL_DMA_PRIORITY_LOW);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	481b      	ldr	r0, [pc, #108]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d32:	f7ff fe47 	bl	80009c4 <LL_DMA_SetStreamPriorityLevel>
  // configure FIFO 
  LL_DMA_DisableFifoMode(DMA2,LL_DMA_STREAM_0);
 8000d36:	2100      	movs	r1, #0
 8000d38:	4819      	ldr	r0, [pc, #100]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d3a:	f7ff fed3 	bl	8000ae4 <LL_DMA_DisableFifoMode>
  // direction data stranfer
  LL_DMA_SetDataTransferDirection(DMA2,LL_DMA_STREAM_0,LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	4817      	ldr	r0, [pc, #92]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d44:	f7ff fd72 	bl	800082c <LL_DMA_SetDataTransferDirection>
  //peripheral and memory incremented/fixed mode
  LL_DMA_SetMode(DMA2,LL_DMA_STREAM_0,LL_DMA_MODE_NORMAL);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4814      	ldr	r0, [pc, #80]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d4e:	f7ff fd91 	bl	8000874 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA2,LL_DMA_STREAM_0,LL_DMA_PERIPH_NOINCREMENT);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	4812      	ldr	r0, [pc, #72]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d58:	f7ff fdb0 	bl	80008bc <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA2,LL_DMA_STREAM_0,LL_DMA_MEMORY_NOINCREMENT);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	480f      	ldr	r0, [pc, #60]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d62:	f7ff fdcf 	bl	8000904 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA2,LL_DMA_STREAM_0,LL_DMA_PDATAALIGN_HALFWORD);
 8000d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d6e:	f7ff fded 	bl	800094c <LL_DMA_SetPeriphSize>
  LL_DMA_GetMemorySize(DMA2,LL_DMA_STREAM_0);
 8000d72:	2100      	movs	r1, #0
 8000d74:	480a      	ldr	r0, [pc, #40]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d76:	f7ff fe0d 	bl	8000994 <LL_DMA_GetMemorySize>
  // single or burst transactions
  LL_DMA_SetMemoryBurstxfer(DMA2,LL_DMA_STREAM_0,LL_DMA_MBURST_SINGLE);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4808      	ldr	r0, [pc, #32]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d80:	f7ff fe8c 	bl	8000a9c <LL_DMA_SetMemoryBurstxfer>
  // enable interup
  LL_ADC_REG_StartConversionSWStart(ADC1);
 8000d84:	4807      	ldr	r0, [pc, #28]	; (8000da4 <ADC_config_DMA+0xb8>)
 8000d86:	f7ff fd00 	bl	800078a <LL_ADC_REG_StartConversionSWStart>
  LL_DMA_EnableIT_TC(DMA2,LL_DMA_STREAM_0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d8e:	f7ff fef9 	bl	8000b84 <LL_DMA_EnableIT_TC>
  //enable dma
  LL_DMA_EnableStream(DMA2,LL_DMA_STREAM_0);
 8000d92:	2100      	movs	r1, #0
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <ADC_config_DMA+0xb4>)
 8000d96:	f7ff fd09 	bl	80007ac <LL_DMA_EnableStream>

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40026400 	.word	0x40026400
 8000da4:	40012000 	.word	0x40012000
 8000da8:	20000028 	.word	0x20000028

08000dac <__NVIC_GetPriorityGrouping>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <LL_AHB1_GRP1_EnableClock>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4013      	ands	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40023800 	.word	0x40023800

08000ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000ef4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000ef8:	f7ff ffe2 	bl	8000ec0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8000efc:	f7ff ff56 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2200      	movs	r2, #0
 8000f04:	2102      	movs	r1, #2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ffa6 	bl	8000e58 <NVIC_EncodePriority>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	2038      	movs	r0, #56	; 0x38
 8000f12:	f7ff ff77 	bl	8000e04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f16:	2038      	movs	r0, #56	; 0x38
 8000f18:	f7ff ff56 	bl	8000dc8 <__NVIC_EnableIRQ>

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f74:	f000 f944 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f80c 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f7ff ffd0 	bl	8000f20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f80:	f7ff ffb6 	bl	8000ef0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f84:	f7ff fe36 	bl	8000bf4 <MX_ADC1_Init>
  ADC_config_DMA();
 8000f88:	f7ff feb0 	bl	8000cec <ADC_config_DMA>
  DMA_Start();
 8000f8c:	f7ff fea2 	bl	8000cd4 <DMA_Start>
   // change_conver();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <main+0x20>
	...

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	2230      	movs	r2, #48	; 0x30
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 ffe8 	bl	8001f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <SystemClock_Config+0xc8>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a26      	ldr	r2, [pc, #152]	; (800105c <SystemClock_Config+0xc8>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <SystemClock_Config+0xc8>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <SystemClock_Config+0xcc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a20      	ldr	r2, [pc, #128]	; (8001060 <SystemClock_Config+0xcc>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <SystemClock_Config+0xcc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001004:	2304      	movs	r3, #4
 8001006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001008:	2332      	movs	r3, #50	; 0x32
 800100a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001010:	2304      	movs	r3, #4
 8001012:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fa49 	bl	80014b0 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001024:	f000 f81e 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2101      	movs	r1, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fcab 	bl	80019a0 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001050:	f000 f808 	bl	8001064 <Error_Handler>
  }
}
 8001054:	bf00      	nop
 8001056:	3750      	adds	r7, #80	; 0x50
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_MspInit+0x4c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_MspInit+0x4c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	bf0c      	ite	eq
 80010d4:	2301      	moveq	r3, #1
 80010d6:	2300      	movne	r3, #0
 80010d8:	b2db      	uxtb	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f06f 0202 	mvn.w	r2, #2
 80010f4:	601a      	str	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <NMI_Handler+0x4>

08001108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <HardFault_Handler+0x4>

0800110e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <MemManage_Handler+0x4>

08001114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <BusFault_Handler+0x4>

0800111a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <UsageFault_Handler+0x4>

08001120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114e:	f000 f8a9 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_EOCS(ADC1))
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <ADC_IRQHandler+0x1c>)
 800115e:	f7ff ffaf 	bl	80010c0 <LL_ADC_IsActiveFlag_EOCS>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <ADC_IRQHandler+0x16>
  {
    LL_ADC_ClearFlag_EOCS(ADC1);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <ADC_IRQHandler+0x1c>)
 800116a:	f7ff ffbc 	bl	80010e6 <LL_ADC_ClearFlag_EOCS>
  /* USER CODE END ADC_IRQn 0 */

  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40012000 	.word	0x40012000

08001178 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b2:	490e      	ldr	r1, [pc, #56]	; (80011ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b4:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c8:	4c0b      	ldr	r4, [pc, #44]	; (80011f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d6:	f7ff ffd7 	bl	8001188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011da:	f000 fea9 	bl	8001f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011de:	f7ff fec7 	bl	8000f70 <main>
  bx  lr    
 80011e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011f0:	08001fc8 	.word	0x08001fc8
  ldr r2, =_sbss
 80011f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011f8:	20000030 	.word	0x20000030

080011fc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <CAN1_RX0_IRQHandler>
	...

08001200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_Init+0x40>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_Init+0x40>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x40>)
 8001222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f90d 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff ff1c 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023c00 	.word	0x40023c00

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f917 	bl	8001496 <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f8ed 	bl	800145e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000000 	.word	0x20000000
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008
 80012c8:	2000002c 	.word	0x2000002c

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2000002c 	.word	0x2000002c

080012e4 <__NVIC_SetPriorityGrouping>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_SetPriority>:
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001414:	d301      	bcc.n	800141a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <SysTick_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001422:	210f      	movs	r1, #15
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f7ff ff8e 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <SysTick_Config+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SysTick_Config+0x40>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff47 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff5c 	bl	800132c <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff8e 	bl	800139c <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5d 	bl	8001348 <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffb0 	bl	8001404 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e267      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d075      	beq.n	80015ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ce:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d00c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d112      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e6:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f2:	d10b      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b7e      	ldr	r3, [pc, #504]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d05b      	beq.n	80015b8 <HAL_RCC_OscConfig+0x108>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d157      	bne.n	80015b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e242      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x74>
 8001516:	4b76      	ldr	r3, [pc, #472]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a75      	ldr	r2, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e01d      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b70      	ldr	r3, [pc, #448]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6f      	ldr	r2, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b6d      	ldr	r3, [pc, #436]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6c      	ldr	r2, [pc, #432]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001548:	4b69      	ldr	r3, [pc, #420]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a68      	ldr	r2, [pc, #416]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b66      	ldr	r3, [pc, #408]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a65      	ldr	r2, [pc, #404]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff feb0 	bl	80012cc <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff feac 	bl	80012cc <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e207      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0xc0>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fe9c 	bl	80012cc <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fe98 	bl	80012cc <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1f3      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0xe8>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d063      	beq.n	800168e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d11c      	bne.n	8001618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015de:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d116      	bne.n	8001618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x152>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e1c7      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4937      	ldr	r1, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	e03a      	b.n	800168e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001620:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_RCC_OscConfig+0x244>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fe51 	bl	80012cc <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fe4d 	bl	80012cc <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1a8      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4925      	ldr	r1, [pc, #148]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e015      	b.n	800168e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x244>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fe30 	bl	80012cc <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fe2c 	bl	80012cc <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e187      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d036      	beq.n	8001708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d016      	beq.n	80016d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_RCC_OscConfig+0x248>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff fe10 	bl	80012cc <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b0:	f7ff fe0c 	bl	80012cc <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e167      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80016c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x200>
 80016ce:	e01b      	b.n	8001708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_OscConfig+0x248>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fdf9 	bl	80012cc <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016dc:	e00e      	b.n	80016fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fdf5 	bl	80012cc <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d907      	bls.n	80016fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e150      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
 80016f0:	40023800 	.word	0x40023800
 80016f4:	42470000 	.word	0x42470000
 80016f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fc:	4b88      	ldr	r3, [pc, #544]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ea      	bne.n	80016de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8097 	beq.w	8001844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171a:	4b81      	ldr	r3, [pc, #516]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10f      	bne.n	8001746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b7d      	ldr	r3, [pc, #500]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a7c      	ldr	r2, [pc, #496]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001742:	2301      	movs	r3, #1
 8001744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001746:	4b77      	ldr	r3, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d118      	bne.n	8001784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001752:	4b74      	ldr	r3, [pc, #464]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a73      	ldr	r2, [pc, #460]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175e:	f7ff fdb5 	bl	80012cc <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001766:	f7ff fdb1 	bl	80012cc <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e10c      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x2ea>
 800178c:	4b64      	ldr	r3, [pc, #400]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a63      	ldr	r2, [pc, #396]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0x324>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x30c>
 80017a2:	4b5f      	ldr	r3, [pc, #380]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	4a5e      	ldr	r2, [pc, #376]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6713      	str	r3, [r2, #112]	; 0x70
 80017ae:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a5b      	ldr	r2, [pc, #364]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0x324>
 80017bc:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a54      	ldr	r2, [pc, #336]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 0304 	bic.w	r3, r3, #4
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d015      	beq.n	8001808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff fd76 	bl	80012cc <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff fd72 	bl	80012cc <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e0cb      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	4b49      	ldr	r3, [pc, #292]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0ee      	beq.n	80017e4 <HAL_RCC_OscConfig+0x334>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001808:	f7ff fd60 	bl	80012cc <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180e:	e00a      	b.n	8001826 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f7ff fd5c 	bl	80012cc <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0b5      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ee      	bne.n	8001810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a38      	ldr	r2, [pc, #224]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a1 	beq.w	8001990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d05c      	beq.n	8001914 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d141      	bne.n	80018e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fd30 	bl	80012cc <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fd2c 	bl	80012cc <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e087      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69da      	ldr	r2, [r3, #28]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	3b01      	subs	r3, #1
 80018a8:	041b      	lsls	r3, r3, #16
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	491b      	ldr	r1, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff fd05 	bl	80012cc <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fd01 	bl	80012cc <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e05c      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x416>
 80018e4:	e054      	b.n	8001990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fcee 	bl	80012cc <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fcea 	bl	80012cc <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e045      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x444>
 8001912:	e03d      	b.n	8001990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e038      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000
 8001928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x4ec>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d028      	beq.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d121      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d11a      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800195c:	4013      	ands	r3, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001964:	4293      	cmp	r3, r2
 8001966:	d111      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	3b01      	subs	r3, #1
 8001976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d107      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0cc      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d90c      	bls.n	80019dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b65      	ldr	r3, [pc, #404]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b8      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a0c:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	494d      	ldr	r1, [pc, #308]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d044      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d119      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e07f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e067      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f023 0203 	bic.w	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4934      	ldr	r1, [pc, #208]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a90:	f7ff fc1c 	bl	80012cc <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7ff fc18 	bl	80012cc <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e04f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 020c 	and.w	r2, r3, #12
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1eb      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d20c      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e032      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4916      	ldr	r1, [pc, #88]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	490e      	ldr	r1, [pc, #56]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b26:	f000 f821 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	490a      	ldr	r1, [pc, #40]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	5ccb      	ldrb	r3, [r1, r3]
 8001b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fb7c 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	08001fa8 	.word	0x08001fa8
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b70:	b094      	sub	sp, #80	; 0x50
 8001b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
 8001b78:	2300      	movs	r3, #0
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b84:	4b79      	ldr	r3, [pc, #484]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d00d      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x40>
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	f200 80e1 	bhi.w	8001d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b9e:	e0db      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b73      	ldr	r3, [pc, #460]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ba4:	e0db      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba6:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001baa:	e0d8      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d063      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b6a      	ldr	r3, [pc, #424]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	2200      	movs	r2, #0
 8001bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bde:	4622      	mov	r2, r4
 8001be0:	462b      	mov	r3, r5
 8001be2:	f04f 0000 	mov.w	r0, #0
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	0159      	lsls	r1, r3, #5
 8001bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf0:	0150      	lsls	r0, r2, #5
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	1a51      	subs	r1, r2, r1
 8001bfa:	6139      	str	r1, [r7, #16]
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c10:	4659      	mov	r1, fp
 8001c12:	018b      	lsls	r3, r1, #6
 8001c14:	4651      	mov	r1, sl
 8001c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c1a:	4651      	mov	r1, sl
 8001c1c:	018a      	lsls	r2, r1, #6
 8001c1e:	4651      	mov	r1, sl
 8001c20:	ebb2 0801 	subs.w	r8, r2, r1
 8001c24:	4659      	mov	r1, fp
 8001c26:	eb63 0901 	sbc.w	r9, r3, r1
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3e:	4690      	mov	r8, r2
 8001c40:	4699      	mov	r9, r3
 8001c42:	4623      	mov	r3, r4
 8001c44:	eb18 0303 	adds.w	r3, r8, r3
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	462b      	mov	r3, r5
 8001c4c:	eb49 0303 	adc.w	r3, r9, r3
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c5e:	4629      	mov	r1, r5
 8001c60:	024b      	lsls	r3, r1, #9
 8001c62:	4621      	mov	r1, r4
 8001c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c68:	4621      	mov	r1, r4
 8001c6a:	024a      	lsls	r2, r1, #9
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c72:	2200      	movs	r2, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c7c:	f7fe faa4 	bl	80001c8 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c88:	e058      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	2200      	movs	r2, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	4611      	mov	r1, r2
 8001c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca4:	4642      	mov	r2, r8
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	f04f 0000 	mov.w	r0, #0
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	0159      	lsls	r1, r3, #5
 8001cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb6:	0150      	lsls	r0, r2, #5
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cc2:	4649      	mov	r1, r9
 8001cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	00eb      	lsls	r3, r5, #3
 8001cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf2:	00e2      	lsls	r2, r4, #3
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	461d      	mov	r5, r3
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	18e3      	adds	r3, r4, r3
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	464b      	mov	r3, r9
 8001d00:	eb45 0303 	adc.w	r3, r5, r3
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d12:	4629      	mov	r1, r5
 8001d14:	028b      	lsls	r3, r1, #10
 8001d16:	4621      	mov	r1, r4
 8001d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	028a      	lsls	r2, r1, #10
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	2200      	movs	r2, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	61fa      	str	r2, [r7, #28]
 8001d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d30:	f7fe fa4a 	bl	80001c8 <__aeabi_uldivmod>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d56:	e002      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3750      	adds	r7, #80	; 0x50
 8001d64:	46bd      	mov	sp, r7
 8001d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <LL_ADC_REG_SetSequencerLength>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_ADC_IsEnabled>:
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8001dd2:	481c      	ldr	r0, [pc, #112]	; (8001e44 <LL_ADC_CommonInit+0x80>)
 8001dd4:	f7ff ffe3 	bl	8001d9e <LL_ADC_IsEnabled>
 8001dd8:	4604      	mov	r4, r0
 8001dda:	481b      	ldr	r0, [pc, #108]	; (8001e48 <LL_ADC_CommonInit+0x84>)
 8001ddc:	f7ff ffdf 	bl	8001d9e <LL_ADC_IsEnabled>
 8001de0:	4603      	mov	r3, r0
 8001de2:	431c      	orrs	r4, r3
 8001de4:	4819      	ldr	r0, [pc, #100]	; (8001e4c <LL_ADC_CommonInit+0x88>)
 8001de6:	f7ff ffda 	bl	8001d9e <LL_ADC_IsEnabled>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4323      	orrs	r3, r4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d120      	bne.n	8001e34 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d012      	beq.n	8001e20 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <LL_ADC_CommonInit+0x8c>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	6811      	ldr	r1, [r2, #0]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	6852      	ldr	r2, [r2, #4]
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	6892      	ldr	r2, [r2, #8]
 8001e10:	4311      	orrs	r1, r2
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	68d2      	ldr	r2, [r2, #12]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	e00b      	b.n	8001e38 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <LL_ADC_CommonInit+0x8c>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	e001      	b.n	8001e38 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40012000 	.word	0x40012000
 8001e48:	40012100 	.word	0x40012100
 8001e4c:	40012200 	.word	0x40012200
 8001e50:	fffc10e0 	.word	0xfffc10e0

08001e54 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ff9b 	bl	8001d9e <LL_ADC_IsEnabled>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d117      	bne.n	8001e9e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	6811      	ldr	r1, [r2, #0]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	6892      	ldr	r2, [r2, #8]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	e001      	b.n	8001ea2 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ff6f 	bl	8001d9e <LL_ADC_IsEnabled>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d12b      	bne.n	8001f1e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	e005      	b.n	8001eee <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <LL_ADC_REG_Init+0x80>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	68d2      	ldr	r2, [r2, #12]
 8001f02:	4311      	orrs	r1, r2
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	6912      	ldr	r2, [r2, #16]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ff2e 	bl	8001d78 <LL_ADC_REG_SetSequencerLength>
 8001f1c:	e001      	b.n	8001f22 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	c0fffcfd 	.word	0xc0fffcfd

08001f30 <__libc_init_array>:
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__libc_init_array+0x38>)
 8001f34:	4c0d      	ldr	r4, [pc, #52]	; (8001f6c <__libc_init_array+0x3c>)
 8001f36:	1b64      	subs	r4, r4, r5
 8001f38:	10a4      	asrs	r4, r4, #2
 8001f3a:	2600      	movs	r6, #0
 8001f3c:	42a6      	cmp	r6, r4
 8001f3e:	d109      	bne.n	8001f54 <__libc_init_array+0x24>
 8001f40:	4d0b      	ldr	r5, [pc, #44]	; (8001f70 <__libc_init_array+0x40>)
 8001f42:	4c0c      	ldr	r4, [pc, #48]	; (8001f74 <__libc_init_array+0x44>)
 8001f44:	f000 f820 	bl	8001f88 <_init>
 8001f48:	1b64      	subs	r4, r4, r5
 8001f4a:	10a4      	asrs	r4, r4, #2
 8001f4c:	2600      	movs	r6, #0
 8001f4e:	42a6      	cmp	r6, r4
 8001f50:	d105      	bne.n	8001f5e <__libc_init_array+0x2e>
 8001f52:	bd70      	pop	{r4, r5, r6, pc}
 8001f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f58:	4798      	blx	r3
 8001f5a:	3601      	adds	r6, #1
 8001f5c:	e7ee      	b.n	8001f3c <__libc_init_array+0xc>
 8001f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f62:	4798      	blx	r3
 8001f64:	3601      	adds	r6, #1
 8001f66:	e7f2      	b.n	8001f4e <__libc_init_array+0x1e>
 8001f68:	08001fc0 	.word	0x08001fc0
 8001f6c:	08001fc0 	.word	0x08001fc0
 8001f70:	08001fc0 	.word	0x08001fc0
 8001f74:	08001fc4 	.word	0x08001fc4

08001f78 <memset>:
 8001f78:	4402      	add	r2, r0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <memset+0xa>
 8001f80:	4770      	bx	lr
 8001f82:	f803 1b01 	strb.w	r1, [r3], #1
 8001f86:	e7f9      	b.n	8001f7c <memset+0x4>

08001f88 <_init>:
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8a:	bf00      	nop
 8001f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8e:	bc08      	pop	{r3}
 8001f90:	469e      	mov	lr, r3
 8001f92:	4770      	bx	lr

08001f94 <_fini>:
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f96:	bf00      	nop
 8001f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9a:	bc08      	pop	{r3}
 8001f9c:	469e      	mov	lr, r3
 8001f9e:	4770      	bx	lr
